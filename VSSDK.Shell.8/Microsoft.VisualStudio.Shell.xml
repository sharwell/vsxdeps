<?xml version="1.0" encoding="utf-8"?>
<doc>
	<assembly>
		<name>Microsoft.VisualStudio.Shell</name>
	</assembly>
	<members>
		<member name="T:Microsoft.VisualStudio.ErrorHandler">
			<summary>Provides methods for dealing with common COM error codes.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.ErrorHandler.Failed(System.Int32)">
			<summary>Checks if an HRESULT is an error return code.</summary>
			<returns>true if hr represents an error, otherwise false.</returns>
			<param name="hr">The HRESULT to test.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.ErrorHandler.Succeeded(System.Int32)">
			<summary>Checks if an HRESULT is a success return code.</summary>
			<returns>true if hr represents a success otherwise false.</returns>
			<param name="hr">The HRESULT to test.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.ErrorHandler.ThrowOnFailure(System.Int32)">
			<summary>Checks if the parameter is a success or failure HRESULT and throws an exception in case of failure.</summary>
			<returns>The HRESULT.</returns>
			<param name="hr">The HRESULT to test.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.ErrorHandler.ThrowOnFailure(System.Int32,System.Int32[])">
			<summary>Checks if the parameter is a success or failure HRESULT and throws an exception if it is a failure that is not included in the array of well-known failures.</summary>
			<returns>The HRESULT.</returns>
			<param name="hr">The HRESULT to test.</param>
			<param name="expectedHRFailure">If hr is found in this array of expected failures no exception should be thrown.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.IEventHandler">
			<summary>Provides the methods necessary to add, remove, and test for the existence of handlers in an event handler collection.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.IEventHandler.AddHandler(System.String)">
			<summary>When implemented by a derived class, adds a named handler to an event handler collection.</summary>
			<returns><see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see> if the method succeeds, otherwise an error code.</returns>
			<param name="bstrEventName">The name of the handler.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.IEventHandler.GetHandledEvents">
			<summary>When implemented by a derived class, returns an enumerator over all the handlers added by successive calls to <see cref="M:Microsoft.VisualStudio.IEventHandler.AddHandler(System.String)"></see>.</summary>
			<returns><see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see> if the method succeeds, otherwise an error code.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.IEventHandler.HandlesEvent(System.String)">
			<summary>When implemented by a derived class, determines whether a named handler is in the event handler collection.</summary>
			<returns>true if the handler is in the underlying handler collection, otherwise false.</returns>
			<param name="bstrEventName">The name of the evaluated handler.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.IEventHandler.RemoveHandler(System.String)">
			<summary>When implemented by a derived class, removes a named handler from the collection of event handlers.</summary>
			<returns><see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see> if the method succeeds, otherwise an error code.</returns>
			<param name="bstrEventName">The name of the event handler to remove.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.VSConstants">
			<summary>Use this class to access common Visual Studio constants.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.BuildOrder">
			<summary>Use this legacy GUID to access a specific output pane.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.BuildOutput">
			<summary>Use this legacy GUID to access a specific output pane.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.CEF_CLONEFILE">
			<summary>An obsolete flag combined bitwise as the first parameter of the method <see cref="M:Microsoft.VisualStudio.Package.EditorFactory.CreateEditorInstance(System.UInt32,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.IntPtr,System.IntPtr@,System.IntPtr@,System.String@,System.Guid@,System.Int32@)"></see>.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.CEF_OPENASNEW">
			<summary>Combined bitwise as the first parameter of the method <see cref="M:Microsoft.VisualStudio.Package.EditorFactory.CreateEditorInstance(System.UInt32,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.IntPtr,System.IntPtr@,System.IntPtr@,System.String@,System.Guid@,System.Int32@)"></see>, this indicates the editor factory should perform necessary corrections.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.CEF_OPENFILE">
			<summary>Combined bitwise as the first parameter of the method <see cref="M:Microsoft.VisualStudio.Package.EditorFactory.CreateEditorInstance(System.UInt32,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.IntPtr,System.IntPtr@,System.IntPtr@,System.String@,System.Guid@,System.Int32@)"></see>, this flag is mutually exclusive with <see cref="F:Microsoft.VisualStudio.VSConstants.CEF_CLONEFILE"></see>. </summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.CEF_SILENT">
			<summary>Indicates the editor factory should create the editor silently. </summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.CLSID_HtmDocData">
			<summary>The document's data is HTML format.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.CLSID_HtmedPackage">
			<summary>GUID of the HTML package.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.CLSID_HtmlLanguageService">
			<summary>GUID of the HTML language service.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.CLSID_MiscellaneousFilesProject">
			<summary>CLSID for Miscellaneous Files project.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.CLSID_SolutionItemsProject">
			<summary>Project type CLSID for Solution Items project.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.CLSID_VsCfgProviderEventsHelper">
			<summary>Provide notifications when configuration-related events are fired. Implemented by the environment.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.CLSID_VsDocOutlinePackage">
			<summary>The CLSID of the document outline package window.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.CLSID_VsEnvironmentPackage">
			<summary>The CLSID for Visual Studio Environment Package.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.CLSID_VsTaskList">
			<summary>The CLSID for Visual Studio Environment Task List.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.CLSID_VsTaskListPackage">
			<summary>The CLSID for Visual Studio Environment Task List Package.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.CLSID_VsUIHierarchyWindow">
			<summary>The CLSID for Visual Studio Environment Hierarchy Window.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.cmdidToolsOptions">
			<summary>On the Tools menu, the command for options.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.CPDN_SELCHANGED">
			<summary>Sent from a page dialog to Component Selector dialog, informs of selection change on page.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.CPDN_SELDBLCLICK">
			<summary>Sent from a page dialog to Component Selector dialog, informs of a double click on a selected item.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.CPPM_CLEARSELECTION">
			<summary>Resets and clears selection in list of available components on the Component Selector dialog.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.CPPM_GETSELECTION">
			<summary>Retrieves information about selection on the Component Selector dialog.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.CPPM_INITIALIZELIST">
			<summary>Initializes the list of available components on the Component Selector dialog.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.CPPM_INITIALIZETAB">
			<summary>Initializes a tab with <see cref="T:Microsoft.VisualStudio.Package.Variant"></see> in <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORTABINIT"></see> on the Component Selector dialog.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.CPPM_QUERYCANSELECT">
			<summary>Determine whether the Select button should be enabled on the Component Selector dialog.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.CPPM_SETMULTISELECT">
			<summary>Sets the multiple-selection mode on the Component Selector dialog.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.DebugOutput">
			<summary>Use this legacy GUID to access a specific output pane.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.DISP_E_ARRAYISLOCKED">
			<summary>An HRESULT that indicates that the array is currently locked.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.DISP_E_BADCALLEE">
			<summary>A COM return value.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.DISP_E_BADINDEX">
			<summary>A return value that indicates subscript out of range.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.DISP_E_BADPARAMCOUNT">
			<summary>An error return value that indicates that the number of elements provided to the method is different from the number of arguments accepted by the method.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.DISP_E_BADVARTYPE">
			<summary>One of the method arguments is not a valid variant type.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.DISP_E_BUFFERTOOSMALL">
			<summary>A return error that indicates the destination token buffer is too small.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.DISP_E_DIVBYZERO">
			<summary>A return error that indicates a divide by zero error.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.DISP_E_EXCEPTION">
			<summary>This return value indicates that the call generated an exception.  The usual implementation is to specify that an argument of the method that returned this error is a pointer to a structure that contains exception information.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.DISP_E_MEMBERNOTFOUND">
			<summary>A return value indicating that the requested member does not exist, or the call to Invoke tried to set the value of a read-only property.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.DISP_E_NONAMEDARGS">
			<summary>A return value indicating that the invoked implementation of IDispatch does not support named arguments.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.DISP_E_NOTACOLLECTION">
			<summary>A return value indicating an unexpected argument type.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.DISP_E_OVERFLOW">
			<summary>An error that indicates that a value could not be coerced to its expected representation.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.DISP_E_PARAMNOTFOUND">
			<summary>A return value that indicates that one of the parameter DISPIDs does not correspond to a parameter on the method.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.DISP_E_PARAMNOTOPTIONAL">
			<summary>A return value that indicates that a required parameter was omitted.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.DISP_E_TYPEMISMATCH">
			<summary>A return value that indicates that one or more of the parameters could not be coerced.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.DISP_E_UNKNOWNINTERFACE">
			<summary>A return value that indicates that the interface identifier passed in riid is not equal to IID_NULL.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.DISP_E_UNKNOWNLCID">
			<summary>A return value that indicates that the member being invoked interprets string arguments according to the Locale ID (LCID), and the LCID is not recognized.  If the LCID is not needed to interpret arguments, this error should not be returned.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.DISP_E_UNKNOWNNAME">
			<summary>A return value that indicates that one or more of the names were not known. The returned DISPIDs contain DISPID_UNKNOWN for each entry that corresponds to an unknown name.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.DocumentFrame">
			<summary>A constant referenced in selection events to describe which component of the shell has just been selected.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.E_ABORT">
			<summary>A return value that may indicate an explicit cancellation action or some process that could no longer proceed after (for instance) both undo and rollback failed.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.E_ACCESSDENIED">
			<summary>A return value that describes a general access denied error.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.E_FAIL">
			<summary>Error HRESULT for a generic failure.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.E_HANDLE">
			<summary>A return value that indicates an invalid handle.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.E_INVALIDARG">
			<summary>Error HRESULT for an invalid argument.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.E_NOINTERFACE">
			<summary>Error HRESULT for the request of a not implemented interface.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL">
			<summary>Error HRESULT for the call to a method that is not implemented.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.E_OUTOFMEMORY">
			<summary>Error HRESULT for out of memory.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.E_PENDING">
			<summary>A return value that indicates the availability of an asynchronously accessed interface.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.E_POINTER">
			<summary>A return value that indicates that an invalid pointer, usually null, was passed as a parameter.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.E_UNEXPECTED">
			<summary>A return value that indicates that the result of the method call is outside of the error cases the client code can readily handle.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.GUID_BuildOutputWindowPane">
			<summary>This constant represents the GUID for the interface <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane"></see> which is implemented by the shell's OutputWindow tool window.  It is used by client code to display messages in the output window.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.GUID_COMClassicPage">
			<summary>A Visual Studio component selector page GUID.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.GUID_COMPlusPage">
			<summary>A Visual Studio component selector page GUID.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.GUID_DefaultEditor">
			<summary>A common system defined editor GUID.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.GUID_ExternalEditor">
			<summary>A common editor GUID.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.GUID_HTMEDAllowExistingDocData">
			<summary>GUID used to mark a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.VsTextBuffer"></see> in order to tell to the HTML editor factory to accept preexisting doc data.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.GUID_HtmlEditorFactory">
			<summary>GUID of the HTML editor factory.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.GUID_ItemType_PhysicalFile">
			<summary>A GUID constant used to specify that the type is a physical file on disk or the Web.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.GUID_ItemType_PhysicalFolder">
			<summary>A GUID constant used to specify that the type is a physical folder on disk or the Web.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.GUID_ItemType_SubProject">
			<summary>A GUID constant used to specify that the type is a nested hierarchy project.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.GUID_ItemType_VirtualFolder">
			<summary>A GUID constant used to specify that the type is a non-physical folder.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.GUID_OutWindowDebugPane">
			<summary>A GUID constant used to specify the debug pane inside the output window.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.GUID_OutWindowGeneralPane">
			<summary>The GUID of the pseudo service that returns the General output pane <see cref="F:Microsoft.VisualStudio.VSConstants.SID_SVsGeneralOutputWindowPane"></see> in the VS environment.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.GUID_SolutionPage">
			<summary>A Visual Studio component selector page GUID.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.GUID_TextEditorFactory">
			<summary>GUID of the Text editor factory.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.GUID_VsNewProjectPseudoFolder">
			<summary>String resource ID for Visual Studio pseudo-folder.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.GUID_VSStandardCommandSet97">
			<summary>This GUID identifies the standard set of commands known by Visual Studio 97 (version 6).</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.GUID_VsTaskListViewAll">
			<summary>The GUID for the highest abstraction task lists.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.GUID_VsTaskListViewCheckedTasks">
			<summary>The GUID for a certain flavor or task lists.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.GUID_VsTaskListViewCommentTasks">
			<summary>The GUID for a certain flavor or task lists.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.GUID_VsTaskListViewCompilerTasks">
			<summary>The GUID for a certain flavor or task lists.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.GUID_VsTaskListViewCurrentFileTasks">
			<summary>The GUID for a certain flavor or task lists.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.GUID_VsTaskListViewHTMLTasks">
			<summary>The GUID for a certain flavor or task lists.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.GUID_VsTaskListViewShortcutTasks">
			<summary>The GUID for a certain flavor or task lists.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.GUID_VsTaskListViewUncheckedTasks">
			<summary>The GUID for a certain flavor or task lists.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.GUID_VsTaskListViewUserTasks">
			<summary>The GUID for a certain flavor or task lists.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.GUID_VsUIHierarchyWindowCmds">
			<summary>A GUID that defines the command group related to the hierarchy window.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.IID_IUnknown">
			<summary>GUID of the IUnknown COM interface.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_Code">
			<summary><see cref="F:Microsoft.VisualStudio.VSConstants.GUID_VSStandardCommandSet97"></see>cmdidOpenWith handlers should pass this value to the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.OpenStandardEditor(System.UInt32,System.String,System.Guid@,System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.IServiceProvider,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)"></see> method to get the Open With dialog, in this case on possible Code Views.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_Debugging">
			<summary><see cref="F:Microsoft.VisualStudio.VSConstants.GUID_VSStandardCommandSet97"></see>cmdidOpenWith handlers should pass this value to the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.OpenStandardEditor(System.UInt32,System.String,System.Guid@,System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.IServiceProvider,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)"></see> method to get the Open With dialog, in this case populated with possible <see cref="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_Debugging"></see> debugging views which map to the same view as <see cref="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_Code"></see>.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_Designer">
			<summary><see cref="F:Microsoft.VisualStudio.VSConstants.GUID_VSStandardCommandSet97"></see>cmdidOpenWith handlers should pass this value to the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.OpenStandardEditor(System.UInt32,System.String,System.Guid@,System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.IServiceProvider,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)"></see> method to get the Open With dialog, in this case to View Form designer views.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_Primary">
			<summary><see cref="F:Microsoft.VisualStudio.VSConstants.GUID_VSStandardCommandSet97"></see>cmdidOpenWith handlers should pass this value to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.OpenStandardEditor(System.UInt32,System.String,System.Guid@,System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.IServiceProvider,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)"></see> method to get the Open With dialog, in this case the default/primary view of the editor factory.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_TextView">
			<summary><see cref="F:Microsoft.VisualStudio.VSConstants.GUID_VSStandardCommandSet97"></see>cmdidOpenWith handlers should pass this value to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.OpenStandardEditor(System.UInt32,System.String,System.Guid@,System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.IServiceProvider,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)"></see> method to get the Open With dialog, in this for a document or data text editor view.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_UserChooseView">
			<summary><see cref="F:Microsoft.VisualStudio.VSConstants.GUID_VSStandardCommandSet97"></see>cmdidOpenWith handlers should pass this value to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.OpenStandardEditor(System.UInt32,System.String,System.Guid@,System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.IServiceProvider,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)"></see> method which prompts the user to choose which user-defined view to use.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.OLE_E_ADVF">
			<summary>A legacy OLE error.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.OLE_E_ADVISENOTSUPPORTED">
			<summary>A legacy OLE error.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.OLE_E_BLANK">
			<summary>A legacy OLE error.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.OLE_E_CANT_BINDTOSOURCE">
			<summary>A legacy OLE error.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.OLE_E_CANT_GETMONIKER">
			<summary>A legacy OLE error.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.OLE_E_CANTCONVERT">
			<summary>A legacy OLE error.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.OLE_E_CLASSDIFF">
			<summary>A legacy OLE error.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.OLE_E_ENUM_NOMORE">
			<summary>A legacy OLE error.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.OLE_E_INVALIDHWND">
			<summary>A legacy OLE error.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.OLE_E_INVALIDRECT">
			<summary>A legacy OLE error.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.OLE_E_NOCACHE">
			<summary>A legacy OLE error.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.OLE_E_NOCONNECTION">
			<summary>A legacy OLE error.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.OLE_E_NOSTORAGE">
			<summary>A legacy OLE error.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.OLE_E_NOT_INPLACEACTIVE">
			<summary>A legacy OLE error.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.OLE_E_NOTRUNNING">
			<summary>A legacy OLE error.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.OLE_E_OLEVERB">
			<summary>A legacy OLE error.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.OLE_E_PROMPTSAVECANCELLED">
			<summary>The user was prompted to save but chose the Cancel button from the prompt message box.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.OLE_E_STATIC">
			<summary>The cache is for a static object and it already has a cache node.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.OLE_E_WRONGCOMPOBJ">
			<summary>The versions of COMPOBJ.DLL and OLE2.DLL on your machine are incompatible with each other.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.PropertyBrowserSID">
			<summary>Describes what component of the shell has just been selected.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.S_FALSE">
			<summary>HRESULT for false.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.S_OK">
			<summary>Generic HRESULT for success.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.SID_SUIHostCommandDispatcher">
			<summary>The name of the Visual Studio service that implements <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget"></see>.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.SID_SVsGeneralOutputWindowPane">
			<summary>Returns an IID_IVsOutputWindowPane interface of the General output pane in the Visual Studio environment.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.SID_SVsToolboxActiveXDataProvider">
			<summary>A Visual Studio toolbox service.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.StartupProject">
			<summary>A constant referenced in selection events to describe which component of the shell has just been selected, in this case in response to project startup.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT_CodeWindow">
			<summary>Returns the GUID of the command associated with a change in UI context.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT_Debugging">
			<summary>Specifies that UI context is the switch to a debugging window.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT_DesignMode">
			<summary>Returns the GUID of the command associated with a change to design mode in UI context.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT_Dragging">
			<summary>Returns the GUID of the command associated with the UI drag/drop operation.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT_EmptySolution">
			<summary>Packages may define a command that is associated with a change in UI context.  Use UICONTEXT_EmptySolution to return the GUID of the command associated with this UI state.  In this case the UI context is an empty solution.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT_FullScreenMode">
			<summary>Packages may define a command that is associated with a change in UI context.  Use UICONTEXT_FullScreenMode to return the GUID of the command associated with this UI state.  In this case the UI context is that the Full Screen command from the View menu has been selected.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT_NoSolution">
			<summary>Packages may define a command that is associated with a change in UI context.  Use UICONTEXT_NoSolution to return the GUID of the command associated with this UI state.  In this case the UI context is that there is no solution.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT_SolutionBuilding">
			<summary>Packages may define a command that is associated with a change in UI context.  Use UICONTEXT_SolutionBuilding to return the GUID of the command associated with this UI state.  In this case the UI context is Build solution or build project mode is in effect.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT_SolutionExists">
			<summary>Packages may define a command that is associated with a change in UI context.  Use UICONTEXT_SolutionExists to return the GUID of the command associated with this UI state.  In this case the UI context is that a solution exists, though the number of projects loaded is not pertinent to this call.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT_SolutionHasMultipleProjects">
			<summary>Packages may define a command that is associated with a change in UI context. Use UICONTEXT_SolutionHasMultipleProjects to return the GUID of the command associated with this UI state. In this case the UI context is that a solution exists and has multiple projects loaded.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT_SolutionHasSingleProject">
			<summary>Packages may define a command that is associated with a change in UI context. Use UICONTEXT_SolutionHasMultipleProjects to return the GUID of the command associated with this UI state. In this case the UI context is that a solution exists and has a single project loaded.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.UNDO_E_CLIENTABORT">
			<summary>Error HRESULT for a client abort.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.UndoManager">
			<summary>A constant referenced in selection events to describe which component of the shell has just been selected.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.UserContext">
			<summary>A constant referenced in selection events to describe which component of the shell has just been selected.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VS_E_BUSY">
			<summary>A constant returned by interfaces to asynchronous behavior when the object in question in already busy.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VS_E_INCOMPATIBLEDOCDATA">
			<summary>A Visual Studio specific error HRESULT for "Incompatible document data".</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VS_E_PACKAGENOTLOADED">
			<summary>A Visual Studio specific error HRESULT that indicates "Package not loaded."</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VS_E_PROJECTALREADYEXISTS">
			<summary>A Visual Studio-specific error HRESULT that indicates that the "Project already exists."</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VS_E_PROJECTMIGRATIONFAILED">
			<summary>A Visual Studio specific error HRESULT that indicates "Project configuration failed."</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VS_E_PROJECTNOTLOADED">
			<summary>A Visual Studio-specific error HRESULT that indicates "Project not loaded."</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VS_E_SOLUTIONALREADYOPEN">
			<summary>A Visual Studio-specific error HRESULT that indicates "Solution already open."</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VS_E_SOLUTIONNOTOPEN">
			<summary>A Visual Studio-specific error HRESULT that indicates "Solution not open."</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VS_E_SPECIFYING_OUTPUT_UNSUPPORTED">
			<summary>Returned by build interfaces that have parameters for specifying an array of IVsOutput's but the implementation can only apply the method to all outputs.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VS_E_UNSUPPORTEDFORMAT">
			<summary><see cref="M:Microsoft.VisualStudio.Package.EditorFactory.CreateEditorInstance(System.UInt32,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.IntPtr,System.IntPtr@,System.IntPtr@,System.String@,System.Guid@,System.Int32@)"></see> returns this value if the document has a format that cannot be opened in the editor.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VS_E_WIZARDBACKBUTTONPRESS">
			<summary>An HRESULT value that indicates that the user hit the back button in a Visual Studio wizard.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VS_S_PROJECTFORWARDED">
			<summary>A Visual Studio-specific error HRESULT that indicates "Project forwarded."</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VS_S_TBXMARKER">
			<summary>A Visual Studio-specific constant for a "Toolbox marker."</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSCOOKIE_NIL">
			<summary>A Visual Studio-specific constant that indicates that a cookie has not been set.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSITEMID_NIL">
			<summary>A Visual Studio item identifier that represents the absence of a project item. This value is used when there is no current selection.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT">
			<summary>A Visual Studio item identifier that represents the root of a project hierarchy and is used to identify the entire hierarchy, as opposed to a single item.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSITEMID_SELECTION">
			<summary>A Visual Studio item identifier that represents the currently selected item or items, which can include the root of the hierarchy.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSM_ENTERMODAL">
			<summary>A Visual Studio-specific constant for broadcasting a notification message via <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsBroadcastMessageEvents.OnBroadcastMessage(System.UInt32,System.IntPtr,System.IntPtr)"></see> that indicates the beginning of modality.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSM_EXITMODAL">
			<summary>A Visual Studio-specific constant for broadcasting a notification message via <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsBroadcastMessageEvents.OnBroadcastMessage(System.UInt32,System.IntPtr,System.IntPtr)"></see> that indicates the end of modality.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSM_TOOLBARMETRICSCHANGE">
			<summary>A Visual Studio-specific constant for broadcasting a notification message via <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsBroadcastMessageEvents.OnBroadcastMessage(System.UInt32,System.IntPtr,System.IntPtr)"></see> indicating that the command bar metrics have changed.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2K">
			<summary>GUID for the Windows 2000 command set. This is a set of standard editor commands.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.WindowFrame">
			<summary>A constant referenced in selection events to describe which component of the shell has just been selected.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.VSConstants.VSSELELEMID">
			<summary>Constants used in <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSelectionEvents"></see> to indicate a new selection state.  The selections may be propagated through <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSelectionEvents.OnElementValueChanged(System.UInt32,System.Object,System.Object)"></see>.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSSELELEMID.SEID_DocumentFrame">
			<summary>Visual Studio tracks this selection automatically so it cannot be set via <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSelectionEvents.OnElementValueChanged(System.UInt32,System.Object,System.Object)"></see>, but the value may be observed by calling <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsMonitorSelection.GetCurrentElementValue(System.UInt32,System.Object@)"></see></summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSSELELEMID.SEID_LastWindowFrame">
			<summary>The value of <see cref="F:Microsoft.VisualStudio.VSConstants.VSSELELEMID.SEID_WindowFrame"></see> before it received its current value.  It is guaranteed to be different from <see cref="F:Microsoft.VisualStudio.VSConstants.VSSELELEMID.SEID_WindowFrame"></see> unless both are empty.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSSELELEMID.SEID_PropertyBrowserSID">
			<summary><see cref="F:Microsoft.VisualStudio.VSConstants.IID_IUnknown"></see> of the active <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsPropertyBrowser"></see>.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSSELELEMID.SEID_ResultList">
			<summary><see cref="F:Microsoft.VisualStudio.VSConstants.IID_IUnknown"></see> of the active <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget"></see> for list navigation commands.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSSELELEMID.SEID_StartupProject">
			<summary><see cref="F:Microsoft.VisualStudio.VSConstants.IID_IUnknown"></see> of the active StartupProject.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSSELELEMID.SEID_UndoManager">
			<summary><see cref="F:Microsoft.VisualStudio.VSConstants.IID_IUnknown"></see> of the active <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleUndoManager"></see> object.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSSELELEMID.SEID_UserContext">
			<summary>An event that indicates selection only by document windows that do not push selection context to the property browser.  The alternative case is <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_UserContext"></see>.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSSELELEMID.SEID_WindowFrame">
			<summary>Visual Studio tracks this selection automatically so it cannot be set via <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSelectionEvents.OnElementValueChanged(System.UInt32,System.Object,System.Object)"></see>, but the value may be observed by calling <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsMonitorSelection.GetCurrentElementValue(System.UInt32,System.Object@)"></see></summary>
		</member>
		<member name="T:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID">
			<summary>These constants make some basic menu commands available to managed code.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ACTIVATEFILTER">
			<summary>Activate Filter </summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.BACKSPACE">
			<summary>Delete Backwards; Delete the current selection, or if no selection, the previous character.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.BACKTAB">
			<summary>Tab Left; Move the caret back one tab stop.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.BOL">
			<summary>Line Start; Move the caret to the start of the line.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.BOL_EXT">
			<summary>Line Start Extend; Move the caret to the start of the line, extending the selection.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.BOL_EXT_COL">
			<summary>Line Start Extend Column; Move the caret to the start of the line, extending the column selection.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.BOTTOMLINE">
			<summary>View Bottom; Move the caret to the last line in view.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.BOTTOMLINE_EXT">
			<summary>View Bottom Extend; Move the caret to the last line in view, extending the selection.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CANCEL">
			<summary>Selection Cancel; Cancel the current selection moving the caret to the anchor point.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.COMMENT_BLOCK">
			<summary>Comment Block; Comment out the selected block.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.COMMENTBLOCK">
			<summary>Comment Block; Comment out the selected block.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.COMPLETEWORD">
			<summary>Complete Word; Display Word Completion based on the current language.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.COPY">
			<summary>Copy; Copy the current selection to the clipboard.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CUT">
			<summary>Cut; Cut the current selectionto the clipboard.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CUTLINE">
			<summary>Line Cut; Cut all selected lines, or the current line if no selection, to the clipboard..</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DELETE">
			<summary>Delete; Delete the current selection.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DELETEALLTEMPBOOKMARKS">
			<summary>Clear Bookmarks; Clear all unnamed bookmarks in the current document.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DELETEBLANKLINES">
			<summary>Delete Blank Lines; Delete all blank lines in the selection, or the current blank line if no selection.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DELETELINE">
			<summary>Delete Line; Delete all selected lines, or the current line if no selection.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DELETETOBOL">
			<summary>Delete To BOL; Delete from the caret position to the beginning of the line.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DELETETOEOL">
			<summary>Delete To EOL; Delete from the caret position to the end of the line.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DELETEWHITESPACE">
			<summary>Delete Horizontal White Space; Collapse white space in the selection, or delete white space adjacent to the caret if no selection.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DELETEWORDLEFT">
			<summary>Word Delete To Start; Delete the word to the left of the caret.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DELETEWORDRIGHT">
			<summary>Word Delete To End; Delete the word to the right of the caret.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DOUBLECLICK">
			<summary>Double Click.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DOWN">
			<summary>Line Down; Move the caret down one line.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DOWN_EXT">
			<summary>Line Down Extend; Move the caret down one line, extending the selection.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DOWN_EXT_COL">
			<summary>Line Down Extend Column; Move the caret down one line, extending the column selection.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.END">
			<summary>Document End; Move the caret to the end of the document.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.END_EXT">
			<summary>Document End Extend; Move the caret to the end of the document, extending the selection..</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.EOL">
			<summary>Line End; Move the caret to the end of the line..</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.EOL_EXT">
			<summary>Line End Extend; Move the caret to the end of the line, extending the selection.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.EOL_EXT_COL">
			<summary>Line End Extend Column; Move the caret to the end of the line, extending the column selection.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.EXTERNALLY_HANDLED_WIDGET_CLICK">
			<summary>Externally handled widget click;A mouse click event in the widget margin passed to an external handler. The widget margin is used to set breakpoints or bookmarks.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.FIND">
			<summary>Find; Find the occurance.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.FINDAGAIN">
			<summary>Find Again; Repeat the find operation.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.FINDNEXT">
			<summary>Find Next; Find the next occurance</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.FINDNEXTWORD">
			<summary>Find Next Word; Find the next occurance of word.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.FINDPREV">
			<summary>Find Prev; Find the previous occurance </summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.FINDPREVWORD">
			<summary>Find Prev Word; Find the previous occurance of word.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.FIRSTCHAR">
			<summary>Line Start After Indentation; Move the caret to first non-white space character on the line.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.FIRSTCHAR_EXT">
			<summary>Line Start After Indentation Extend; Move the caret to first non-white space character on the line, extending the selection.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.FIRSTNONWHITENEXT">
			<summary>Line Start After Indentation Next; Move the caret to the first non-white-space character on the next line.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.FIRSTNONWHITEPREV">
			<summary>Line Start After Indentation Next; Move the caret to the first non-white-space character on the previous line.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.FORMATSELECTION">
			<summary>Format Selection; Format the currently selected text.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.GOBACK">
			<summary>Go Back; Go back one character.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.GOTOBRACE">
			<summary>Goto Brace; Move the caret forward to the matching brace.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.GOTOBRACE_EXT">
			<summary>Goto Brace Extend; Move the caret forward to the matching brace, extending the selection.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.GOTOLINE">
			<summary>Go To Line; Go to the indicated line.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.GOTONEXTBOOKMARK">
			<summary>Next Bookmark; Move the caret to the next unnamed bookmark.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.GOTOPREVBOOKMARK">
			<summary>Previous Bookmark; Move the caret to the previous unnamed bookmark.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.HELPKEYWORD">
			<summary>Help Keyword</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.HOME">
			<summary>Document Start; Move the caret to the start of the document.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.HOME_EXT">
			<summary>Document Start Extend; Move the caret to the start of the document, extending the selection.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.INDENT">
			<summary>Increase Line Indent; Increase Indent.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.INSERTFILE">
			<summary>Insert File As Text; Insert a file into the current document.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ISEARCH">
			<summary>Incremental Search; Reverse Incremental Search.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ISEARCHBACK">
			<summary>Reverse Incremental Search.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.LASTCHAR">
			<summary>Line Last Char; Move the caret after the last non-white space character on the line.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.LASTCHAR_EXT">
			<summary>Line Last Char Extend; Move the caret after the last non-white space character on the line, extending the selection..</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.LEFT">
			<summary>Char Left; Move the caret left one character..</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.LEFT_EXT">
			<summary>Char Left Extend; Move the caret left one character, extending the selection..</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.LEFT_EXT_COL">
			<summary>Char Left Extend Column; Move the caret left one character, extending the column selection.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.NAVIGATETOURL">
			<summary>Open URL; Invoke the default browser and opens the URL under the caret.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OPENFILE">
			<summary>Open File; Open file under caret.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OPENLINEABOVE">
			<summary>Line Open Above; Open a new line above the current line..</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OPENLINEBELOW">
			<summary>Line Open Below: Open a new line below the current line..</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OPENURL">
			<summary>Open URL; Invoke the default browser and opens the URL under the caret..</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OUTLN_COLLAPSE_TO_DEF">
			<summary>Collapse to Definitions; Outline Collapse To Definitions.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OUTLN_HIDE_SELECTION">
			<summary>Hide Selection; Outline Hide Selection.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OUTLN_STOP_HIDING_ALL">
			<summary>Stop Outlining; Outline Stop Hiding All.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OUTLN_STOP_HIDING_CURRENT">
			<summary>Stop Hiding Current; Outline Stop Hiding Current.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OUTLN_TOGGLE_ALL">
			<summary>Toggle All Outlining; Toggle all hidden regions.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OUTLN_TOGGLE_CURRENT">
			<summary>Toggle Outlining Expansion; Outline Toggle Current.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.PAGEDN">
			<summary>Page Down; . Move the caret down one page. </summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.PAGEDN_EXT">
			<summary>Page Down Extend; Move the caret down one page, extending the selection.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.PAGEUP">
			<summary>Page Up; Move the caret up one page.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.PAGEUP_EXT">
			<summary>Page Up Extend; Move the caret up one page, extending the selection.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.PARAMINFO">
			<summary>Parameter Info; Display Parameter Info based on the current language.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.PASTE">
			<summary>Paste; Paste the selection.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.QUICKINFO">
			<summary>Quick Info; Display Quick Info based on the current language.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.REDO">
			<summary>Redo; Repeat the operation.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.REPLACE">
			<summary>Replace; Replace the occurance.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.REPLACE_ALL">
			<summary>Replace All; Replace all instances of the occurance.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.RETURN">
			<summary>Break Line; Insert a line break at the current caret position.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.RIGHT">
			<summary>Char Right; Move the caret right one character.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.RIGHT_EXT">
			<summary>Char Right Extend; Move the caret right one character, extending the selection.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.RIGHT_EXT_COL">
			<summary>Char Right Extend Column; Move the caret right one character, extending the column selection.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SCROLLBOTTOM">
			<summary>Scroll Line Bottom; Scroll the current line to the bottom of the view.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SCROLLCENTER">
			<summary>Scroll Line Center; Scroll the current line to the center of the view.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SCROLLDN">
			<summary>Scroll Line Down; Scroll the document down one line.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SCROLLLEFT">
			<summary>Scroll Column Left; Scroll the document left one column.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SCROLLPAGEDN">
			<summary>Scroll Page Down: Scroll the document down one page.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SCROLLPAGEUP">
			<summary>Scroll Page Up: Scroll the document up one page..</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SCROLLRIGHT">
			<summary>Scroll Column Right; Scroll the document right one column.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SCROLLTOP">
			<summary>Scroll Line Top: Scroll the current line to the top of the view.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SCROLLUP">
			<summary>Scroll Line Up: Scroll the document up one line.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SELECTALL">
			<summary>Select All; Select all of the document.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SELECTCURRENTWORD">
			<summary>Select Current Word; Select the word under the caret.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SELECTMODE">
			<summary>Select Mode; Toggle the selection mode.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SELLOWCASE">
			<summary>Make Lowercase; Change the text in the current selection to all lower case.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SELSWAPANCHOR">
			<summary>Swap Anchor; Swap the anchor and end points of the current selection.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SELTABIFY">
			<summary>Tabify Selection: Replace spaces in the current selection with tabs.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SELTITLECASE">
			<summary>Capitalize; Capitalize the first letter of words in the selection.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SELTOGGLECASE">
			<summary>Toggle Case: Toggle the case of the text in the current selection.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SELUNTABIFY">
			<summary>Untabify Selection; Replace tabs in the current selection with spaces.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SELUPCASE">
			<summary>Make Uppercase; Change the text in the current selection to all upper case.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SHOWCONTEXTMENU">
			<summary>Displays a context menu.  If unhandled this most editors display a default context menu without any language-specific commands.  If you want your own commands on this menu, handle the command and bring up a context menu yourself.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SHOWMEMBERLIST">
			<summary>Show Member List; Display an object Member List based on the current language.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.TAB">
			<summary>Insert Tab; Insert a tab character at the current caret position.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.TOGGLE_OVERTYPE_MODE">
			<summary>Overtype Mode; Toggle between insert and overtype insertion modes.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.TOGGLECARETPASTEPOS">
			<summary>Paste Moves Caret; Toggle where the caret is positioned after a paste operation.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.TOGGLESHORTCUT">
			<summary>Toggle Task List Shortcut; Toggle a task list shortcut on the current line.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.TOGGLETEMPBOOKMARK">
			<summary>Toggle Bookmark; Toggle an unnamed bookmark on the current line.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.TOGGLEVISSPACE">
			<summary>View White Space; Toggle the visibility of white space characters.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.TOGGLEWORDWRAP">
			<summary>Toggle Word Wrap; Toggle Word Wrap mode.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.TOPLINE">
			<summary>View Top; Move the caret to the top line in view.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.TOPLINE_EXT">
			<summary>View Top Extend; Move the caret to the top line in view, extending the selection.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.TRANSPOSECHAR">
			<summary>Char Transpose: Transpose the characters on either side of the caret.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.TRANSPOSELINE">
			<summary>Line Transpose; Transpose the current line and the line below.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.TRANSPOSEWORD">
			<summary>Word Transpose; Transpose the words on either side of the caret.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.UNCOMMENT_BLOCK">
			<summary>Uncomment Selection; Uncomment the selected lines.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.UNCOMMENTBLOCK">
			<summary>Uncomment Block; Uncomment the selected block. If the block is not commented, make no change.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.UNDO">
			<summary>Undo; Undo the last operation.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.UNINDENT">
			<summary>Decrease Line Indent; Line Unindent.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.UP">
			<summary>Line Up.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.UP_EXT">
			<summary>Line Up Extend; Move the caret up one line, extending the selection.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.UP_EXT_COL">
			<summary>Line Up Extend Column; Move the caret up one line, extending the column selection.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.WIDGETMARGIN_LBTNDOWN">
			<summary> Widget Margin Left Button Down; A left button down event in the widget margin. The widget margin is used to set breakpoints or bookmarks.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.WORDNEXT">
			<summary>Word Next; Move the caret right one word.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.WORDNEXT_EXT">
			<summary>Word Next Extend; Move the caret right one word, extending the selection.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.WORDNEXT_EXT_COL">
			<summary>Word Next Extend Column; Move the caret right one word, extending the column selection..</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.WORDPREV">
			<summary>Word Previous; Move the caret left one word..</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.WORDPREV_EXT">
			<summary>Word Previous Extend; Move the caret left one word, extending the selection..</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.WORDPREV_EXT_COL">
			<summary>Word Previous Extend Column; Move the caret left one word, extending the column selection.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.VSConstants.VSStd97CmdID">
			<summary>These constants make some basic menu commands available to managed code.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.CloseSolution">
			<summary>Command id for "close solution".</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Copy">
			<summary>Command id for "copy".</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Cut">
			<summary>Command id for "cut".</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Delete">
			<summary>Command id for "delete".</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Exit">
			<summary>Command id for "exit".</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.FileClose">
			<summary>Command id for "file close".</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.FileNew">
			<summary>Command id for "file new".</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.FileOpen">
			<summary>Command id for "file open".</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Find">
			<summary>Command id for "find".</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Goto">
			<summary>Command id for "go to".</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.NewProject">
			<summary>Command id for "new project".</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.OpenProject">
			<summary>Command id for "open project".</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.OpenSolution">
			<summary>Command id for "open solution".</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.PageSetup">
			<summary>Command id for "page setup".</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Paste">
			<summary>Command id for "paste".</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Print">
			<summary>Command id for "print".</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.PrintPreview">
			<summary>Command id for "print preview".</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Redo">
			<summary>Command id for "redo".</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Replace">
			<summary>Command id for "replace".</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Save">
			<summary>Command id for "save".</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.SaveAs">
			<summary>Command id for "save as".</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.SaveOptions">
			<summary>Command id for "save options".</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.SaveProjectItemAs">
			<summary>Command id for "save project item as".</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.SaveSolution">
			<summary>Command id for "save solution".</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.SaveSolutionAs">
			<summary>Command id for "save solution as".</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.SelectAll">
			<summary>Command id for "select all".</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ToolsOptions">
			<summary>Command id for "tools options".</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Undo">
			<summary>Command id for "undo".</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.VSConstants.VsUIHierarchyWindowCmdIds">
			<summary>An enumeration of commands that apply to events unique to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchyWindow"></see>.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VsUIHierarchyWindowCmdIds.UIHWCMDID_CancelLabelEdit">
			<summary>Occurs when the user hits the escape key and causes an editable tree node to turn back into static text.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VsUIHierarchyWindowCmdIds.UIHWCMDID_CommitLabelEdit">
			<summary>Occurs when a tree node turns from an editable entry field back into static text.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VsUIHierarchyWindowCmdIds.UIHWCMDID_DoubleClick">
			<summary>Occurs when the user double clicks the mouse on the tree's pane.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VsUIHierarchyWindowCmdIds.UIHWCMDID_EnterKey">
			<summary>Occurs when the user hits the Enter key while the tree's pane has focus.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VsUIHierarchyWindowCmdIds.UIHWCMDID_RightClick">
			<summary>Occurs when the user right clicks the mouse over the tree's pane.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VsUIHierarchyWindowCmdIds.UIHWCMDID_StartLabelEdit">
			<summary>Occurs when tree node text becomes an editable entry field.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.Win32Methods">
			<summary>Imports some Win32 window management functions.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Win32Methods.#ctor">
			<summary>Initializes a new instance of the class.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Win32Methods.IsDialogMessageA(System.IntPtr,Microsoft.VisualStudio.OLE.Interop.MSG@)">
			<summary>Determines if a message is intended for the specified dialog box, and if so processes the message.</summary>
			<returns>true if the message has been processed, otherwise false.</returns>
			<param name="msg">The message in question.</param>
			<param name="hDlg">A handle to the child window.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Win32Methods.SetParent(System.IntPtr,System.IntPtr)">
			<summary>Changes the parent window of the specified child window.</summary>
			<returns>If the function succeeds, a handle to the previous parent window, otherwise null.</returns>
			<param name="hWndParent">A handle to the new parent window.</param>
			<param name="hWnd">A handle to the child window that should receive a new parent.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.DefaultRegistryRootAttribute">
			<summary>Defines the default registry root used to register VSPackage information. This class cannot be inherited.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.DefaultRegistryRootAttribute.#ctor(System.String)">
			<summary>Initializes a new <see cref="T:Microsoft.VisualStudio.Shell.DefaultRegistryRootAttribute"></see> object with the given registry root.</summary>
			<param name="root">The default registry root used to register VSPackage information.</param>
			<exception cref="T:System.ArgumentNullException">The constructor throws an <see cref="T:System.ArgumentNullException"></see> if the root argument is null.</exception>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.DefaultRegistryRootAttribute.Root">
			<summary>Gets the value of the default registry root for the VSPackage.</summary>
			<returns>The value of the default registry root for the VSPackage.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.DesignPropertyDescriptor">
			<summary>A specialization of <see cref="T:System.ComponentModel.PropertyDescriptor"></see> that allows customization of the display name of the property in the property grid.  </summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.DesignPropertyDescriptor.#ctor(System.ComponentModel.PropertyDescriptor)">
			<summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.DesignPropertyDescriptor"></see> for the specified property descriptor.</summary>
			<param name="prop"><see cref="T:System.ComponentModel.PropertyDescriptor"></see>.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.DesignPropertyDescriptor.CanResetValue(System.Object)">
			<summary>Determines whether or not resetting the object changes its value.</summary>
			<returns>true if resetting the component changes its value, otherwise false.</returns>
			<param name="component">The component that owns the property.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.DesignPropertyDescriptor.GetEditor(System.Type)">
			<summary>Gets an editor of the specified type.</summary>
			<returns>The editor, or null if it cannot be found.</returns>
			<param name="editorBaseType">The type of the editor.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.DesignPropertyDescriptor.GetTypeFromNameProperty(System.String)">
			<summary>Converts the name to a <see cref="T:System.Type"></see>.</summary>
			<returns><see cref="T:System.Type"></see>.</returns>
			<param name="typeName">The name of the type.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.DesignPropertyDescriptor.GetValue(System.Object)">
			<summary>Gets the value of the property.</summary>
			<returns>The value of the property.</returns>
			<param name="component">The component that owns the property.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.DesignPropertyDescriptor.ResetValue(System.Object)">
			<summary>Resets the value to the default value.</summary>
			<param name="component">The component that owns the property.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.DesignPropertyDescriptor.SetValue(System.Object,System.Object)">
			<summary>Sets the value of the property to the specified value.</summary>
			<param name="component">The component that owns the property.</param>
			<param name="value">The value to set.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.DesignPropertyDescriptor.ShouldSerializeValue(System.Object)">
			<summary>Determines whether or not the property's value should be persisted.</summary>
			<returns>true if the property should be persisted, otherwise false.</returns>
			<param name="component">The component that owns the property.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.DesignPropertyDescriptor.ComponentType">
			<summary>Gets the component type.</summary>
			<returns>The type of the component.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.DesignPropertyDescriptor.Converter">
			<summary>Gets the type converter for the property.</summary>
			<returns><see cref="T:System.ComponentModel.TypeConverter"></see>.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.DesignPropertyDescriptor.DisplayName">
			<summary>Gets the display name for this property.</summary>
			<returns>The display name.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.DesignPropertyDescriptor.IsReadOnly">
			<summary>Gets whether or not the property is read-only.</summary>
			<returns>true if the property is read-only, otherwise false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.DesignPropertyDescriptor.PropertyType">
			<summary>Gets the type of the property.</summary>
			<returns>The type of the property.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.DialogContainerWithToolbar">
			<summary>Use this class to implement modal forms in Visual Studio. The implementation enables the form to host a Visual Studio command bar so that it participates in standard command routing.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.DialogContainerWithToolbar.#ctor">
			<summary>Initializes a new instance of the class.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.DialogContainerWithToolbar.#ctor(System.IServiceProvider)">
			<summary>Initializes a new instance of the class and sets the service provider.</summary>
			<param name="sp">The service provider that the window can subsequently query to retrieve Visual Studio services.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.DialogContainerWithToolbar.#ctor(System.IServiceProvider,System.Windows.Forms.Control)">
			<summary>Initializes a new instance of the class and sets the service provider as well as the control contained by the form.</summary>
			<param name="sp">The service provider that the window can subsequently query to retrieve Visual Studio services.</param>
			<param name="contained">The control contained by the form.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.DialogContainerWithToolbar.#ctor(System.IServiceProvider,System.Windows.Forms.Control,Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget)">
			<summary>Initializes a new instance <see cref="T:Microsoft.VisualStudio.Shell.DialogContainerWithToolbar"></see> with its contained control and an additional <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget"></see> implementation in addition to the one owned by the <see cref="T:Microsoft.VisualStudio.Shell.OleMenuCommandService"></see>.</summary>
			<param name="sp">The <see cref="T:System.IServiceProvider"></see>.</param>
			<param name="contained">The <see cref="T:System.Windows.Forms.Control"></see> that is to be contained.</param>
			<param name="parentCommandTarget">The parent <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget"></see>.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.DialogContainerWithToolbar.Dispose(System.Boolean)">
			<summary>Explicitly called to release resources.</summary>
			<param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.DialogContainerWithToolbar.Microsoft.VisualStudio.Shell.Interop.IVsToolWindowToolbar.SetBorderSpace(Microsoft.VisualStudio.OLE.Interop.RECT[])">
			<summary>Stores toolbar information and resizes the main pane to leave room for the command bar.</summary>
			<returns>If the method succeeded, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>, otherwise an error code.</returns>
			<param name="rect">The new desired bounds.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.DialogContainerWithToolbar.SetSite(System.IServiceProvider)">
			<summary>Sets the site for this window.</summary>
			<param name="sp">The service provider.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.DialogContainerWithToolbar.ShowDialog">
			<summary>Shows a dialog.</summary>
			<returns><see cref="T:System.Windows.Forms.DialogResult"></see>.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.DialogContainerWithToolbar.System.IServiceProvider.GetService(System.Type)">
			<summary>Gets the service of the specified type.</summary>
			<returns>An object representing the requested service.</returns>
			<param name="serviceType">The type of service requested.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.DialogContainerWithToolbar.System.Windows.Forms.IMessageFilter.PreFilterMessage(System.Windows.Forms.Message@)">
			<summary>Filters mouse messages before they are dispatched.</summary>
			<returns>true if the message was filtered and not dispatched, false if it was dispatched.</returns>
			<param name="m">A message from the toolbar.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.DialogContainerWithToolbar.CommandService">
			<summary>Returns the command service used to check the status or execute the toolbar's commands.</summary>
			<returns><see cref="T:System.ComponentModel.Design.IMenuCommandService"></see>.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.DialogContainerWithToolbar.ToolbarHost">
			<summary>Returns the corresponding <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsToolWindowToolbarHost"></see>.</summary>
			<returns><see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsToolWindowToolbarHost"></see>.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.DialogContainerWithToolbar.ToolbarID">
			<summary>Gets or sets the command ID of the toolbar contained in this dialog.</summary>
			<returns>The command ID of the toolbar contained in this dialog.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.DialogContainerWithToolbar.ToolbarLocation">
			<summary>Gets and sets the value of the enumeration that describes the toolbar location.</summary>
			<returns>The enumeration is defined as:typedef enum {VSTWT_LEFT, VSTWT_TOP, VSTWT_RIGHT, VSTWT_BOTTOM} VSTWT_LOCATION;Which corresponds to toolbar locations of left, top, right and bottom.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.DialogPage">
			<summary>Provides a standard dialog functionality for implementing Toolbox property sheets, ToolsOptions pages, or custom UI dialog boxes with support for the Visual Studio automation model, Windows Forms, and state persistence through the Visual Studio settings mechanism.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.DialogPage.#ctor">
			<summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.DialogPage"></see>.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.DialogPage.Dispose(System.Boolean)">
			<summary>Releases the unmanaged resources used by a dialog page class and optionally releases the managed resources; the parent class, <see cref="T:System.ComponentModel.Component"></see> supports unmanaged resources.</summary>
			<param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.DialogPage.LoadSettingsFromStorage">
			<summary>Called by Visual Studio to load a dialog page's settings from local storage, generally the registry.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.DialogPage.LoadSettingsFromXml(Microsoft.VisualStudio.Shell.Interop.IVsSettingsReader)">
			<summary>Called by Visual Studio to load a dialog page's settings from the Visual Studio settings storage on disk.</summary>
			<param name="reader">[in]An <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSettingsReader"></see> interface provided by the environment to the VSPackage providing read access to the Visual Studio settings file.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.DialogPage.OnActivate(System.ComponentModel.CancelEventArgs)">
			<summary>Handles Windows Activate messages from the Visual Studio environment.</summary>
			<param name="e">[in] Arguments to event handler.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.DialogPage.OnApply(Microsoft.VisualStudio.Shell.DialogPage.PageApplyEventArgs)">
			<summary>Handles Apply messages from the Visual Studio environment.</summary>
			<param name="e">[in] Arguments to event handler.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.DialogPage.OnClosed(System.EventArgs)">
			<summary>Handles Close messages from the Visual Studio environment.</summary>
			<param name="e">[in] Arguments to event handler.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.DialogPage.OnDeactivate(System.ComponentModel.CancelEventArgs)">
			<summary>Handles Deactive messages from the Visual Studio environment.</summary>
			<param name="e">[in] Arguments to event handler.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.DialogPage.ResetSettings">
			<summary>This method should be overridden to reset settings to their default values.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.DialogPage.SaveSettingsToStorage">
			<summary>Called by Visual Studio to store a dialog page's settings in local storage, generally the registry.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.DialogPage.SaveSettingsToXml(Microsoft.VisualStudio.Shell.Interop.IVsSettingsWriter)">
			<summary>Called by Visual Studio to store a dialog page's settings to the Visual Studio settings storage on disk.</summary>
			<param name="writer">[in]A <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSettingsWriter"></see> interface provided by the environment to the VSPackage providing write access to the Visual Studio settings file.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.DialogPage.AutomationObject">
			<summary>Gets the DTE automation model object for a given instance of a dialog page class.</summary>
			<returns>An instance of the automation object, or null if no automation support is available.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.DialogPage.SettingsRegistryPath">
			<summary>Gets or sets the sub-key under the Visual Studio version-specific root for storing settings data for a dialog page.</summary>
			<returns>The sub-key of the Visual Studio version-specific registry tree containing the settings for a given dialog page.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.DialogPage.Site">
			<summary>Gets or sets the site of the dialog page. Overrides the implementation inherited from <see cref="T:System.ComponentModel.Component"></see>.</summary>
			<returns><see cref="T:System.ComponentModel.ISite"></see>.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.DialogPage.System.Windows.Forms.IWin32Window.Handle">
			<summary>Gets the handle of the window of the dialog page.</summary>
			<returns>A pointer that is the handle of an <see cref="T:System.Windows.Forms.IWin32Window"></see>.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.DialogPage.Window">
			<summary>Gets the window that is used as the user interface of the dialog page.</summary>
			<returns>An <see cref="T:System.Windows.Forms.IWin32Window"></see> providing the handle to the window acting as the user interface for dialog page.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.DialogPage.ApplyKind">
			<summary>An enumeration that describes dialog page apply behavior.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.DialogPage.ApplyKind.Apply">
			<summary>Allows the changes to be applied</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.DialogPage.ApplyKind.Cancel">
			<summary>Cancels the apply event and navigates to the page cancelling the event.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.DialogPage.ApplyKind.CancelNoNavigate">
			<summary>Cancels the apply event and returns the active page, not the page canceling the event.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.DialogPage.PageApplyEventArgs">
			<summary>Event arguments that allow the <see cref="M:Microsoft.VisualStudio.Shell.DialogPage.OnApply(Microsoft.VisualStudio.Shell.DialogPage.PageApplyEventArgs)"></see> method to indicate how to handle the apply event.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.DialogPage.PageApplyEventArgs.#ctor">
			<summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.DialogPage.PageApplyEventArgs"></see>.</summary>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.DialogPage.PageApplyEventArgs.ApplyBehavior">
			<summary>Gets or sets the kind of behavior that should take plan on Apply.</summary>
			<returns><see cref="T:Microsoft.VisualStudio.Shell.DialogPage.ApplyKind"></see>.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.ErrorListProvider">
			<summary>This task provider is used to provide tasks for the Visual StudioError List window.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ErrorListProvider.#ctor(System.IServiceProvider)">
			<summary>Creates an ErrorListProvider object.</summary>
			<param name="provider"><see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider"></see> object.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ErrorListProvider.BringToFront">
			<summary>Activates the Error List window and makes it visible.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ErrorListProvider.Dispose(System.Boolean)">
			<summary>Activates the Error List window and makes it visible.</summary>
			<param name="disposing">Parameter is set to true if the task list can be disposed, that is, if the <see cref="T:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection"></see> contains tasks.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ErrorListProvider.Finalize">
			<summary>Destructor for ErrorListProvider.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ErrorListProvider.ForceShowErrors">
			<summary>Shows the errors in the Error List window.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ErrorListProvider.Show">
			<summary>Creates a Error List tool window and shows the errors in it. </summary>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ErrorListProvider.VsTaskList">
			<summary>Returns the service that allows VSPackage implementers to store and manage their tasks as a part of the environment's task list.</summary>
			<returns>Returns an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTaskList"></see> object.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.ErrorTask">
			<summary>Represents an error task on the Task List. This class implements <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsErrorItem"></see>. </summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ErrorTask.#ctor">
			<summary>Initializes a new instance of an <see cref="T:Microsoft.VisualStudio.Shell.ErrorTask"></see>.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ErrorTask.#ctor(System.Exception)">
			<summary>Initializes a new instance of an <see cref="T:Microsoft.VisualStudio.Shell.ErrorTask"></see> for the specified error.</summary>
			<param name="error"><see cref="T:System.Exception"></see>.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ErrorTask.Microsoft.VisualStudio.Shell.Interop.IVsErrorItem.GetCategory(System.UInt32@)">
			<summary>Gets the category of the error.</summary>
			<returns><see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK"></see>.</returns>
			<param name="pCategory">[out] Returns the <see cref="T:Microsoft.VisualStudio.Shell.TaskErrorCategory"></see>.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ErrorTask.Microsoft.VisualStudio.Shell.Interop.IVsErrorItem.GetHierarchy(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@)">
			<summary>Gets the hierarchy node associated with the task.</summary>
			<returns><see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK"></see>.</returns>
			<param name="ppHier">[out] Returns the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy"></see> interface of the node associated with this task.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ErrorTask.ErrorCategory">
			<summary>Gets or sets the error category of this task.</summary>
			<returns><see cref="T:Microsoft.VisualStudio.Shell.TaskErrorCategory"></see>.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ErrorTask.HierarchyItem">
			<summary>Gets or sets the hierarchy item associated with this task.</summary>
			<returns>The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy"></see> item associated with the task.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.EventSinkCollection">
			<summary>Maps objects to and from event "cookies" that represent a client's registration with an event provider. </summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.EventSinkCollection.#ctor">
			<summary>Initializes a new instance of an <see cref="T:Microsoft.VisualStudio.Shell.EventSinkCollection"></see> object.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.EventSinkCollection.Add(System.Object)">
			<summary>Adds an event and returns its cookie.</summary>
			<returns>The cookie of the added event.</returns>
			<param name="o">An object to be added to the event collection.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.EventSinkCollection.Clear">
			<summary>Removes all event cookies.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.EventSinkCollection.Remove(System.Object)">
			<summary>Removes the specified event cookie from the collection.</summary>
			<param name="obj">The event cookie to be removed.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.EventSinkCollection.RemoveAt(System.UInt32)">
			<summary>Removes the event cookie.</summary>
			<param name="cookie">The event cookie. </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.EventSinkCollection.SetAt(System.UInt32,System.Object)">
			<summary>Updates the event associated with the given cookie.</summary>
			<param name="cookie">A cookie specifying an event.</param>
			<param name="value">The value to which the event sink is set.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.EventSinkCollection.System.Collections.IEnumerable.GetEnumerator">
			<summary>Microsoft Internal Only.</summary>
			<returns>Returns an <see cref="T:System.Collections.IEnumerator"></see>.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.EventSinkCollection.Count">
			<summary>Gets the total number of event cookies in the collection.</summary>
			<returns>The number of cookies in the collection.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.EventSinkCollection.Item(System.UInt32)">
			<summary>Gets or sets the specified cookie from the collection.</summary>
			<returns>The cookie.</returns>
			<param name="cookie">The cookie to get.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.IConfigureToolboxItem">
			<summary>Provides the ability to configure <see cref="T:System.Drawing.Design.ToolboxItem"></see> objects dynamically by adding additional data to the toolbox item's Properties dictionary. This data is then serialized as a permanent part of the toolbox item.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.IConfigureToolboxItem.ConfigureToolboxItem(System.Drawing.Design.ToolboxItem)">
			<summary>Called by the toolbox service to configure <see cref="T:System.Drawing.Design.ToolboxItem"></see> objects.</summary>
			<param name="item">[in] The <see cref="T:System.Drawing.Design.ToolboxItem"></see> object whose configuration is to be modified.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.InstalledProductRegistrationAttribute">
			<summary>Provides information for the Visual Studio splash screen and the Help About dialog box when applied to a <see cref="T:Microsoft.VisualStudio.Shell.Package"></see>-derived class or a class that implements <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsPackage"></see>. This class cannot be inherited.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.InstalledProductRegistrationAttribute.#ctor(System.Boolean,System.String,System.String,System.String)">
			<summary>Initializes a new InstalledProductRegistrationAttribute instance for the specified product.</summary>
			<param name="productName">The name of the product.</param>
			<param name="productId">The product ID.</param>
			<param name="useInterface">true if the package implements the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsInstalledProduct"></see> interface to collect and display the information, otherwise false.</param>
			<param name="productDetails">The detailed description of the product.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.InstalledProductRegistrationAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Registers information about a VSPackage when called by an external registration tool such as regpkg.exe. </summary>
			<param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext"></see> provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
			<exception cref="T:System.ArgumentNullException">context is null.</exception>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.InstalledProductRegistrationAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Removes the registration information about a VSPackage when called by an external registration tool such as regpkg.exe. </summary>
			<param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext"></see> provided by an external registration tool. The context can be used to remove registry keys, log registration activity, and obtain information about the component being registered.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.InstalledProductRegistrationAttribute.IconResourceID">
			<summary>Gets or sets the resource ID of the icon associated with the product.</summary>
			<returns>The resource ID of the icon associated with the product.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.InstalledProductRegistrationAttribute.LanguageIndependentName">
			<summary>Gets or sets the (non-localized) name of the product.</summary>
			<returns>The (non-localized) name of the product.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.InstalledProductRegistrationAttribute.ProductDetails">
			<summary>Gets or sets the detailed description of the product.</summary>
			<returns>The detailed description of the product.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.InstalledProductRegistrationAttribute.ProductDetailsResourceID">
			<summary>Gets or sets the product details resource ID.</summary>
			<returns>The product details resource ID.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.InstalledProductRegistrationAttribute.ProductId">
			<summary>Gets or sets the product ID.</summary>
			<returns>The ID of the product.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.InstalledProductRegistrationAttribute.ProductName">
			<summary>Gets or sets the name of the product.</summary>
			<returns>The name of the product.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.InstalledProductRegistrationAttribute.ProductNameResourceID">
			<summary>Gets or sets the resource ID of the product name.</summary>
			<returns>The product name resource ID.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.InstalledProductRegistrationAttribute.UseInterface">
			<summary>Gets or whether the package implements the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsInstalledProduct"></see> interface to display a bitmap in the splash screen and information in the About dialog box on the Help menu.</summary>
			<returns>The value is true if the product installation implements the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsInstalledProduct"></see> interface and false otherwise.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.InstalledProductRegistrationAttribute.UsePackage">
			<summary>Gets or sets whether the product installation uses the package ID.</summary>
			<returns>The value is true if the product installation uses the package ID, and false otherwise.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.IProfileManager">
			<summary>Interface implemented by classes supporting VSPackages by persisting their state information through the Visual Studio settings mechanism.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.IProfileManager.LoadSettingsFromStorage">
			<summary>Reads a VSPackage's configuration from local storage (typically the registry) and updates its state.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.IProfileManager.LoadSettingsFromXml(Microsoft.VisualStudio.Shell.Interop.IVsSettingsReader)">
			<summary>Writes a VSPackage's configuration to disk using the Visual Studio settings mechanism when the export option of an Import/Export Settings feature available on the IDE’s Tools menu is selected by a user.</summary>
			<param name="reader">[in] An <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSettingsReader"></see> interface provided by the environment to the VSPackage providing read access to the Visual Studio settings file.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.IProfileManager.ResetSettings">
			<summary>Resets the user settings.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.IProfileManager.SaveSettingsToStorage">
			<summary>Writes a VSPackage's configuration to local storage (typically the registry) following state update.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.IProfileManager.SaveSettingsToXml(Microsoft.VisualStudio.Shell.Interop.IVsSettingsWriter)">
			<summary>Writes a VSPackage's configuration to disk using the Visual Studio settings mechanism when an import option of the Import/Export Settings command on the IDE’s Tools menu is selected by a user.</summary>
			<param name="writer">[in] An <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSettingsWriter"></see> interface provided by the environment to the VSPackage providing write access to the Visual Studio settings file.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.IResXResourceService">
			<summary>An abstraction layer that lets clients control the resx readers and writers used within Visual Studio.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.IResXResourceService.GetResXResourceReader(System.String,System.Boolean)">
			<summary>Returns a resx resource reader that matches a given a resXFullName.</summary>
			<returns><see cref="T:System.Resources.IResourceReader"></see>.</returns>
			<param name="resXFullName">Creates a reader for the specified file.</param>
			<param name="useResXDat aNodes">If this value is true the reader returns one or more <see cref="T:System.Resources.ResXDataNode"></see>s instead of the object type the resource becomes at runtime in order to figure out which files the resx references</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.IResXResourceService.GetResXResourceReader(System.IO.TextReader,System.Boolean,System.String)">
			<summary>Returns a resx resource reader given a basepath and name.</summary>
			<returns><see cref="T:System.Resources.IResourceReader"></see>.</returns>
			<param name="useResXDataNodes">If this value is true the reader returns one or more <see cref="T:System.Resources.ResXDataNode"></see>s instead of the object type the resource becomes at runtime in order to figure out which files the resx references</param>
			<param name="basePath">The path of the resource file.</param>
			<param name="textReader">The <see cref="T:System.IO.TextReader"></see> that is wrapped by the returned <see cref="T:System.Resources.IResourceReader"></see>.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.IResXResourceService.GetResXResourceWriter(System.String)">
			<summary>Returns a resx resource writer given resXFullName.</summary>
			<returns><see cref="T:System.Resources.IResourceWriter"></see>.</returns>
			<param name="resXFullName">Creates a reader for the specified file.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.IResXResourceService.GetResXResourceWriter(System.IO.TextWriter,System.String)">
			<summary>Returns a resx resource writer given a textWriter and basepath.</summary>
			<returns><see cref="T:System.Resources.IResourceWriter"></see>.</returns>
			<param name="textWriter">The <see cref="T:System.IO.TextWriter"></see> that is wrapped by the returned <see cref="T:System.Resources.IResourceWriter"></see>.</param>
			<param name="basePath">The path of the resource file.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.LocalizableProperties">
			<summary><see cref="T:Microsoft.VisualStudio.Shell.LocalizableProperties"></see> provides a class that supplies custom type information on localizable properties for an object.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.LocalizableProperties.#ctor">
			<summary>This default constructor creates a <see cref="T:Microsoft.VisualStudio.Shell.LocalizableProperties"></see> object.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.LocalizableProperties.CreateDesignPropertyDescriptor(System.ComponentModel.PropertyDescriptor)">
			<summary>Returns a <see cref="T:Microsoft.VisualStudio.Shell.DesignPropertyDescriptor"></see> wrapper on the given property descriptor.</summary>
			<returns>Returns a <see cref="T:Microsoft.VisualStudio.Shell.DesignPropertyDescriptor"></see>.</returns>
			<param name="p">Property descriptor.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.LocalizableProperties.GetAttributes">
			<summary>Gets a collection of attributes for this component.</summary>
			<returns>Returns a collection of attributes.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.LocalizableProperties.GetClassName">
			<summary>Returns the class name of this object.</summary>
			<returns>A string containing the class name.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.LocalizableProperties.GetComponentName">
			<summary>Returns the name of this object.</summary>
			<returns>A string containing the component name.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.LocalizableProperties.GetConverter">
			<summary>Returns a type converter for this object.</summary>
			<returns>Returns a <see cref="T:System.ComponentModel.TypeConverter"></see>.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.LocalizableProperties.GetDefaultEvent">
			<summary>Returns the default event for this object.</summary>
			<returns>Returns an <see cref="T:System.ComponentModel.EventDescriptor"></see>.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.LocalizableProperties.GetDefaultProperty">
			<summary>Gets the default property for a component.</summary>
			<returns>Returns a <see cref="T:System.ComponentModel.PropertyDescriptor"></see>.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.LocalizableProperties.GetEditor(System.Type)">
			<summary>Retrieves the editor for this object.</summary>
			<returns>Returns the editor object.</returns>
			<param name="editorBaseType">A <see cref="T:System.Type"></see> that represents the base type of the editor you want to find. </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.LocalizableProperties.GetEvents">
			<summary>Gets the collection of events for a specified component.</summary>
			<returns>An <see cref="T:System.ComponentModel.EventDescriptorCollection"></see> with the events for this component.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.LocalizableProperties.GetEvents(System.Attribute[])">
			<summary>Gets the collection of events for a specified component using a specified array of attributes as a filter.</summary>
			<returns>An <see cref="T:System.ComponentModel.EventDescriptorCollection"></see> with the events that match the specified attributes for this component.</returns>
			<param name="attributes">An array of type <see cref="T:System.Attribute"></see> to use as a filter.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.LocalizableProperties.GetProperties">
			<summary>Gets the collection of properties.</summary>
			<returns>Returns a <see cref="T:System.ComponentModel.PropertyDescriptorCollection"></see>.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.LocalizableProperties.GetProperties(System.Attribute[])">
			<summary>Returns the properties for selected object using the attribute array as a filter.</summary>
			<returns>Returns a <see cref="T:System.ComponentModel.PropertyDescriptorCollection"></see>.</returns>
			<param name="attributes">An array of type <see cref="T:System.Attribute"></see> to use as a filter.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.LocalizableProperties.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
			<summary>Returns the brows-able object.</summary>
			<returns>Returns the browsable object.</returns>
			<param name="pd"><see cref="T:System.ComponentModel.PropertyDescriptor"></see> object.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.LocDisplayNameAttribute">
			<summary>Specifies the localizable display name for a property, event, or public void method which takes no arguments.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.LocDisplayNameAttribute.#ctor(System.String)">
			<summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.LocDisplayNameAttribute"></see> for the specified name.</summary>
			<param name="name">The name to localize.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.LocDisplayNameAttribute.DisplayName">
			<summary>Gets the localized display name.</summary>
			<returns>The localized display name.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.LogicalView">
			<summary>This enumeration lists the supported logical views.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.LogicalView.Any">
			<summary>The corresponding GUID value is FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.LogicalView.Code">
			<summary>The corresponding GUID value is 7651A701-06E5-11D1-8EBD-00A0C90F26EA.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.LogicalView.Debugging">
			<summary>The corresponding GUID value is 7651A700-06E5-11D1-8EBD-00A0C90F26EA.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.LogicalView.Designer">
			<summary>The corresponding GUID value is 7651A702-06E5-11D1-8EBD-00A0C90F26EA.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.LogicalView.Primary">
			<summary>The corresponding GUID value is 00000000-0000-0000-0000-000000000000.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.LogicalView.ProjectSpecific">
			<summary>The corresponding GUID value is 80A3471A-6B87-433E-A75A-9D461DE0645F.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.LogicalView.Text">
			<summary>The corresponding GUID value is 7651A703-06E5-11D1-8EBD-00A0C90F26EA.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.LogicalView.UserChoose">
			<summary>The corresponding GUID value is 7651A704-06E5-11D1-8EBD-00A0C90F26EA.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.MsiComponentIdAttribute">
			<summary>Defines the Windows Installer component ID. The component ID is used by the Windows Installer to indicate the installation path to the VSPackage.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.MsiComponentIdAttribute.#ctor(System.String)">
			<summary>This constructor creates a new MsiComponentIdAttribute object.</summary>
			<param name="id">The Windows Installer component ID. The MSI component registration ID is used to indicate the installation path to the component within the Windows Installer.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.MsiComponentIdAttribute.Id">
			<summary>The Id property returns a string containing the Windows Installer component registration ID.</summary>
			<returns>Returns a string containing the Windows Installer component registration ID.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.MsiTokenAttribute">
			<summary>Defines a token string for the MSI installer.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.MsiTokenAttribute.#ctor(System.String,System.String)">
			<summary>Creates an MsiTokenAttribute object.</summary>
			<param name="name">Name of the MsiTokenAttribute.</param>
			<param name="value">Value of the MsiTokenAttribute.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.MsiTokenAttribute.Name">
			<summary>Returns the MsiTokenAttribute name.</summary>
			<returns>Returns a string containing the MsiTokenAttribute name.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.MsiTokenAttribute.Value">
			<summary>Returns the MsiTokenAttribute value.</summary>
			<returns>Returns a string containing the MsiTokenAttribute value.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.OleDataObject">
			<summary>Provides a managed class that implements the IOleDataObject interface.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.OleDataObject.#ctor">
			<summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.OleDataObject"></see>.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.OleDataObject.#ctor(Microsoft.VisualStudio.OLE.Interop.IDataObject)">
			<summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.OleDataObject"></see> for the specified object implementing <see cref="T:Microsoft.VisualStudio.OLE.Interop.IDataObject"></see>.</summary>
			<param name="oleData">The underlying <see cref="T:Microsoft.VisualStudio.OLE.Interop.IDataObject"></see>.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.OleDataObject.#ctor(System.Runtime.InteropServices.ComTypes.IDataObject)">
			<summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.OleDataObject"></see> for the specified <see cref="T:System.Runtime.InteropServices.ComTypes.IDataObject"></see>.</summary>
			<param name="comData">The underlying <see cref="T:System.Runtime.InteropServices.ComTypes.IDataObject"></see>.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.OleDataObject.#ctor(System.Windows.Forms.IDataObject)">
			<summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.OleDataObject"></see> for the specified <see cref="T:System.Windows.Forms.IDataObject"></see>.</summary>
			<param name="winData">The underlying <see cref="T:System.Windows.Forms.IDataObject"></see>.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.OleDataObject.Microsoft.VisualStudio.OLE.Interop.IDataObject.DAdvise(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],System.UInt32,Microsoft.VisualStudio.OLE.Interop.IAdviseSink,System.UInt32@)">
			<summary>Establishes a connection between the data object and a caller object implementing <see cref="T:Microsoft.VisualStudio.OLE.Interop.IAdviseSink"></see>.</summary>
			<returns>If the method succeeded, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>, otherwise an error code.</returns>
			<param name="pFormatetc">Pointer to a FORMATETC structure that defines the format, target device, aspect, and medium that will be used for future notifications. For example, one sink may want to know only when the bitmap representation of the data in the data object changes. Another sink may be interested in only the metafile format of the same object. Each advise sink is notified when the data of interest changes. This data is passed back to the advise sink when notification occurs.</param>
			<param name="pdwConnection">Pointer to a DWORD token that identifies this connection. You can use this token later to delete the advisory connection (by passing it to <see cref="M:Microsoft.VisualStudio.Shell.OleDataObject.Microsoft.VisualStudio.OLE.Interop.IDataObject.DUnadvise(System.UInt32)"></see>. If this value is zero, the connection was not established.</param>
			<param name="pAdvSink">Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IAdviseSink"></see> interface on the advise sink that will receive the change notification.</param>
			<param name="ADVF">DWORD that specifies a group of flags for controlling the advisory connection. Valid values are from the enumeration ADVF. However, only some of the possible ADVF values are relevant for this method.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.OleDataObject.Microsoft.VisualStudio.OLE.Interop.IDataObject.DUnadvise(System.UInt32)">
			<summary>Terminates an advise connection previously established through <see cref="M:Microsoft.VisualStudio.Shell.OleDataObject.Microsoft.VisualStudio.OLE.Interop.IDataObject.DAdvise(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],System.UInt32,Microsoft.VisualStudio.OLE.Interop.IAdviseSink,System.UInt32@)"></see>.</summary>
			<param name="dwConnection">DWORD token that specifies the connection to remove. Use the value returned by <see cref="M:Microsoft.VisualStudio.Shell.OleDataObject.Microsoft.VisualStudio.OLE.Interop.IDataObject.DAdvise(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],System.UInt32,Microsoft.VisualStudio.OLE.Interop.IAdviseSink,System.UInt32@)"></see> when the connection was originally established.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.OleDataObject.Microsoft.VisualStudio.OLE.Interop.IDataObject.EnumDAdvise(Microsoft.VisualStudio.OLE.Interop.IEnumSTATDATA@)">
			<summary>Creates an enumerator to iterate through the current advisory connections.</summary>
			<returns>If the method succeeded, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>, otherwise an error code.</returns>
			<param name="ppenumAdvise">Address of <see cref="T:Microsoft.VisualStudio.OLE.Interop.IEnumSTATDATA"></see>* pointer variable that receives the interface pointer to the new enumerator object. If the implementation sets *ppenumAdvise to NULL, there are no connections to advise sinks at this time.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.OleDataObject.Microsoft.VisualStudio.OLE.Interop.IDataObject.EnumFormatEtc(System.UInt32,Microsoft.VisualStudio.OLE.Interop.IEnumFORMATETC@)">
			<summary>Creates an enumerator to iterate through the <see cref="T:Microsoft.VisualStudio.OLE.Interop.FORMATETC"></see> structures supported by the data object.</summary>
			<returns>If the method succeeded, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>, otherwise an error code.</returns>
			<param name="dwDirection">Direction of the data through a value from the enumeration <see cref="T:Microsoft.VisualStudio.OLE.Interop.DATADIR"></see>.</param>
			<param name="ppenumFormatEtc">Address of <see cref="T:Microsoft.VisualStudio.OLE.Interop.IEnumFORMATETC"></see>* pointer variable that receives the interface pointer to the new enumerator object.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.OleDataObject.Microsoft.VisualStudio.OLE.Interop.IDataObject.GetCanonicalFormatEtc(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],Microsoft.VisualStudio.OLE.Interop.FORMATETC[])">
			<summary>Retrieves a <see cref="T:Microsoft.VisualStudio.OLE.Interop.FORMATETC"></see> structure that is logically equivalent to one that is more complex.</summary>
			<returns>If the method succeeded, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>, otherwise an error code.</returns>
			<param name="pformatetcOut">Pointer to a <see cref="T:Microsoft.VisualStudio.OLE.Interop.FORMATETC"></see> structure that contains the most general information possible for a specific rendering, making it canonically equivalent to pFormatetcIn.</param>
			<param name="pformatectIn">Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.FORMATETC"></see> structure that defines the format, medium, and target device that the caller would like to use to retrieve data in a subsequent call such as <see cref="M:Microsoft.VisualStudio.Shell.OleDataObject.Microsoft.VisualStudio.OLE.Interop.IDataObject.GetData(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],Microsoft.VisualStudio.OLE.Interop.STGMEDIUM[])"></see>. The TYMED member is not significant in this case and should be ignored.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.OleDataObject.Microsoft.VisualStudio.OLE.Interop.IDataObject.GetData(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],Microsoft.VisualStudio.OLE.Interop.STGMEDIUM[])">
			<summary>Transfers data from the data object to the client. The pformatetcIn parameter must specify a storage medium type of <see cref="F:Microsoft.VisualStudio.OLE.Interop.TYMED.TYMED_MFPICT"></see>.</summary>
			<param name="pRemoteMedium">Pointer to the STGMEDIUM structure that indicates the storage medium containing the returned data through its tymed member, and the responsibility for releasing the medium through the value of its punkOuter member.</param>
			<param name="pformatetcIn">Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.FORMATETC"></see> structure that defines the format, medium, and target device to use when passing the data.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.OleDataObject.Microsoft.VisualStudio.OLE.Interop.IDataObject.GetDataHere(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],Microsoft.VisualStudio.OLE.Interop.STGMEDIUM[])">
			<summary>Similar to <see cref="M:Microsoft.VisualStudio.Shell.OleDataObject.Microsoft.VisualStudio.OLE.Interop.IDataObject.GetData(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],Microsoft.VisualStudio.OLE.Interop.STGMEDIUM[])"></see>, except the client must allocate the <see cref="T:Microsoft.VisualStudio.OLE.Interop.STGMEDIUM"></see> structure.</summary>
			<param name="pFormatetc">Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.FORMATETC"></see> structure that defines the format, medium, and target device to use when passing the data. Only one medium can be specified in the tymed member of the FORMATETC structure. These values are valid:TYMED_STORAGETYMED_STREAMTYMED_HGLOBALTYMED_FILE</param>
			<param name="pRemoteMedium">Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.STGMEDIUM"></see> structure that defines the storage medium containing the data being transferred.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.OleDataObject.Microsoft.VisualStudio.OLE.Interop.IDataObject.QueryGetData(Microsoft.VisualStudio.OLE.Interop.FORMATETC[])">
			<summary>Determines whether the data object supports a particular <see cref="T:Microsoft.VisualStudio.OLE.Interop.FORMATETC"></see> structure for transferring data.</summary>
			<returns>If the method succeeded, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>, otherwise an error code.</returns>
			<param name="pFormatetc">Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.FORMATETC"></see> structure that defines the format, medium, and target device to use when passing the data. Only one medium can be specified in the tymed member of the FORMATETC structure. These values are valid:TYMED_STORAGETYMED_STREAMTYMED_HGLOBALTYMED_FILE</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.OleDataObject.Microsoft.VisualStudio.OLE.Interop.IDataObject.SetData(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],Microsoft.VisualStudio.OLE.Interop.STGMEDIUM[],System.Int32)">
			<summary>Transfers data from the client to the data object.</summary>
			<param name="pFormatetc">Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.FORMATETC"></see> structure that defines the format, medium, and target device to use when passing the data. Only one medium can be specified in the tymed member of the FORMATETC structure. These values are valid:TYMED_STORAGETYMED_STREAMTYMED_HGLOBALTYMED_FILE</param>
			<param name="pmedium">Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.STGMEDIUM"></see> structure that defines the storage medium containing the data being transferred. The medium must be allocated by the caller and filled in by <see cref="M:Microsoft.VisualStudio.Shell.OleDataObject.Microsoft.VisualStudio.OLE.Interop.IDataObject.GetDataHere(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],Microsoft.VisualStudio.OLE.Interop.STGMEDIUM[])"></see>. The caller must also free the medium. The implementation of this method must always supply a value of NULL for the punkForRelease member of the STGMEDIUM structure to which this parameter points.</param>
			<param name="fRelease">If TRUE, the data object called, which implements <see cref="M:Microsoft.VisualStudio.Shell.OleDataObject.Microsoft.VisualStudio.OLE.Interop.IDataObject.SetData(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],Microsoft.VisualStudio.OLE.Interop.STGMEDIUM[],System.Int32)"></see>, owns the storage medium after the call returns.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.OleMenuCmdEventArgs">
			<summary>The set of arguments passed to an <see cref="T:Microsoft.VisualStudio.Shell.OleMenuCommand"></see> object when the <see cref="M:Microsoft.VisualStudio.Shell.OleMenuCommand.Invoke(System.Object)"></see> function is called.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.OleMenuCmdEventArgs.#ctor(System.Object,System.IntPtr)">
			<summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.OleMenuCmdEventArgs"></see> the specified in and out parameters.</summary>
			<param name="inParam">The input parameters to the command function.</param>
			<param name="outParam">A pointer to the parameter returned by the function.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.OleMenuCmdEventArgs.InValue">
			<summary>Gets the in parameters to the command.</summary>
			<returns>The in parameters to the command.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.OleMenuCmdEventArgs.OutValue">
			<summary>Gets a pointer to the parameter used as output by the command function.</summary>
			<returns>A pointer to the out parameter.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.OleMenuCommand">
			<summary>This class is an expansion of the <see cref="T:System.ComponentModel.Design.MenuCommand"></see> class.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.OleMenuCommand.#ctor(System.EventHandler,System.ComponentModel.Design.CommandID)">
			<summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.OleMenuCommand"></see> for the specified command.</summary>
			<param name="invokeHandler">The event handler called to execute the command.</param>
			<param name="id">ID of the command.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.OleMenuCommand.#ctor(System.EventHandler,System.ComponentModel.Design.CommandID,System.String)">
			<summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.OleMenuCommand"></see> for the specified command.</summary>
			<param name="Text">The text of the command.</param>
			<param name="invokeHandler">The event handler called to execute the command.</param>
			<param name="id">ID of the command.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.OleMenuCommand.#ctor(System.EventHandler,System.EventHandler,System.ComponentModel.Design.CommandID)">
			<summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.OleMenuCommand"></see> for the specified command with the specified invocation and status handlers.</summary>
			<param name="statusHandler">The event handler called when the command's status changes.</param>
			<param name="invokeHandler">The event handler called to execute the command.</param>
			<param name="id">ID of the command.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.OleMenuCommand.#ctor(System.EventHandler,System.EventHandler,System.ComponentModel.Design.CommandID,System.String)">
			<summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.OleMenuCommand"></see> for the specified command with the specified invocation and status handlers.</summary>
			<param name="Text">The text of the command.</param>
			<param name="statusHandler">The event handler called when the command's status changes.</param>
			<param name="invokeHandler">The event handler called to execute the command.</param>
			<param name="id">ID of the command.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.OleMenuCommand.#ctor(System.EventHandler,System.EventHandler,System.EventHandler,System.ComponentModel.Design.CommandID)">
			<summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.OleMenuCommand"></see> for the specified command with the specified pre-QueryStatus, invocation, and status handlers.</summary>
			<param name="beforeQueryStatus">Event handler called when a client requests the command status.</param>
			<param name="statusHandler">The event handler called when the command's status changes.</param>
			<param name="invokeHandler">The event handler called to execute the command.</param>
			<param name="id">ID of the command.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.OleMenuCommand.#ctor(System.EventHandler,System.EventHandler,System.EventHandler,System.ComponentModel.Design.CommandID,System.String)">
			<summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.OleMenuCommand"></see> for the specified command with the specified pre-QueryStatus, invocation, and status handlers.</summary>
			<param name="Text">The text of the command.</param>
			<param name="beforeQueryStatus">Event handler called when a client requests the command status.</param>
			<param name="statusHandler">The event handler called when the command's status changes.</param>
			<param name="invokeHandler">The event handler called to execute the command.</param>
			<param name="id">ID of the command.</param>
		</member>
		<member name="E:Microsoft.VisualStudio.Shell.OleMenuCommand.BeforeQueryStatus">
			<summary>Called when a client requests the status of the command.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.OleMenuCommand.DynamicItemMatch(System.Int32)">
			<summary>Allows a dynamic item command to match the subsequent items in its list. </summary>
			<returns>true if the dynamic item found a match, otherwise false.</returns>
			<param name="cmdId">The command ID.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.OleMenuCommand.Invoke(System.Object)">
			<summary>Executes the command.</summary>
			<param name="inArg">The parameter passed to the command.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.OleMenuCommand.Invoke(System.Object,System.IntPtr)">
			<summary>Executes the command.</summary>
			<param name="outArg">The parameter returned by the command.</param>
			<param name="inArg">The parameter passed to the command.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.OleMenuCommand.MatchedCommandId">
			<summary>Gets or sets a the command ID.</summary>
			<returns>The command ID that was most recently used to match this command.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.OleMenuCommand.OleStatus">
			<summary>Gets the OLE command status code for this menu item.</summary>
			<returns>The status flags that reflects the state of this menu item.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.OleMenuCommand.ParametersDescription">
			<summary>Gets or sets the description of the parameters of the command.</summary>
			<returns>The description of the parameters of the command.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.OleMenuCommand.Text">
			<summary>Gets or sets the text for the command.</summary>
			<returns>The text for the command.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.OleMenuCommandService">
			<summary>This class derives from the <see cref="T:System.ComponentModel.Design.MenuCommandService"></see> class and implements <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget"></see>. <see cref="T:System.ComponentModel.Design.MenuCommandService"></see> is the managed class used to add handlers for menu commands and to define verbs.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.OleMenuCommandService.#ctor(System.IServiceProvider)">
			<summary>Creates a new menu command service.</summary>
			<param name="serviceProvider">The service provider that this service uses to obtain other services. If the service is being used with a designer, this should be the service provider for the designer (such as the <see cref="T:System.ComponentModel.Design.DesignSurface"></see> instance).</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.OleMenuCommandService.#ctor(System.IServiceProvider,Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget)">
			<summary>Creates a new menu command service.</summary>
			<param name="serviceProvider">The service provider that this service uses to obtain other services. If the service is being used with a designer, this should be the service provider for the designer (such as the <see cref="T:System.ComponentModel.Design.DesignSurface"></see> instance).</param>
			<param name="parentCommandTarget">Allows the service to defer command searching to a parent IOleCommandTarget if the command is not found in this object.</param>
			<exception cref="T:System.ArgumentNullException">Throws an <see cref="T:System.ArgumentNullException"></see> if parentCommandTarget is null.</exception>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.OleMenuCommandService.GlobalInvoke(System.ComponentModel.Design.CommandID)">
			<summary>Can be used to invoke any command within Visual Studio.</summary>
			<returns>true if the invocation succeeded; otherwise, false.</returns>
			<param name="commandID">The command ID of the command to search for and execute.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.OleMenuCommandService.GlobalInvoke(System.ComponentModel.Design.CommandID,System.Object)">
			<summary>Can be used to invoke any command within Visual Studio.</summary>
			<returns>true if the invocation succeeded; otherwise, false.</returns>
			<param name="arg">The optional command argument.</param>
			<param name="commandID">The command ID of the command to search for and execute.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.OleMenuCommandService.Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget.Exec(System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
			<summary>Executes the selected command.</summary>
			<returns>An HRESULT code indicating the success or failure of the call.  The following HRESULTs may be returned:ValueDescription<see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>The command was successfully invoked.<see cref="F:Microsoft.VisualStudio.OLE.Interop.Constants.OLECMDERR_E_UNKNOWNGROUP"></see>The group guid did not match the commandID’s Guid property for any command or verb.<see cref="F:Microsoft.VisualStudio.OLE.Interop.Constants.OLECMDERR_E_NOTSUPPORTED"></see>The group was found, but there is no command or verb with an ID that matches.  This is also returned if the OleStatus property of a command that was found returns zero.</returns>
			<param name="nCmdId">System.UInt32 nCmdId. The ID code of the command.  This implementation maps nCmdId to CommandID.ID.</param>
			<param name="guidGroup">System.Guid guidGroup. The menu group.  This implementation maps the group to CommandID.Guid.</param>
			<param name="pIn">System.Object[] pIn. Actual command options.  This implementation ignores this parameter.</param>
			<param name="nCmdExcept">System.UInt32 nCmdExcept. Count of command options.  This implementation ignores this parameter.</param>
			<param name="vOut">System.IntPtr vOut. Output data for the command.  This implementation ignores this parameter.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.OleMenuCommandService.Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget.QueryStatus(System.Guid@,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr)">
			<summary>Sets command status.</summary>
			<returns>An HRESULT code indicating the success or failure of the call.  The following HRESULTs may be returned:ValueDescription<see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>The command was successfully invoked.<see cref="F:Microsoft.VisualStudio.OLE.Interop.Constants.OLECMDERR_E_UNKNOWNGROUP"></see>The group guid did not match the commandID’s Guid property for any command or verb.<see cref="F:Microsoft.VisualStudio.OLE.Interop.Constants.OLECMDERR_E_NOTSUPPORTED"></see>The group was found, but there is no command or verb with an ID that matches.  This is also returned if the OleStatus property of a command that was found returns zero.</returns>
			<param name="nCmdId">System.UInt32 nCmdId. The ID code of the command.  This implementation maps nCmdId to CommandID.ID.</param>
			<param name="guidGroup">System.Guid guidGroup. The menu group.  This implementation maps the group to CommandID.Guid.</param>
			<param name="oleCmd">Microsoft.OLE.Interop._tagOLECMD[] oleCmd. A command structure that contains data about the status of the command.</param>
			<param name="oleText">System.IntPtr oleText. A pointer to a text BSTR.  If the command is a verb the name of the verb will be filled in here.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.OleMenuCommandService.OnCommandsChanged(System.ComponentModel.Design.MenuCommandsChangedEventArgs)">
			<summary>Called by a menu command when its status has changed.</summary>
			<param name="e">Signifies that there has been a change in <see cref="T:System.Windows.Forms.Design.MenuCommands"></see> (added or removed) on the related object.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.OleMenuCommandService.ShowContextMenu(System.ComponentModel.Design.CommandID,System.Int32,System.Int32)">
			<summary>Shows the shortcut menu with the given command ID at the given location.</summary>
			<param name="y">The vertical position, in screen coordinates, of the top, left corner of the shortcut menu. If the shortcut menu does not fit on the screen, the operating system relocates it to fit.</param>
			<param name="menuID">A command ID representing the shortcut menu to show.</param>
			<param name="x">The horizontal position, in screen coordinates, of the top, left corner of the shortcut menu. If the shortcut menu does not fit on the screen, the operating system relocates it to fit.</param>
			<exception cref="T:System.ArgumentNullException">menuID is null.</exception>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.Package">
			<summary>Provides a managed implementation of the VSIP interfaces required to create a fully functional VSPackage.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.#ctor">
			<summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Package"></see>.</summary>
		</member>
		<member name="E:Microsoft.VisualStudio.Shell.Package.ToolboxInitialized">
			<summary>Event generated whenever Visual Studio initializes its Toolbox.</summary>
		</member>
		<member name="E:Microsoft.VisualStudio.Shell.Package.ToolboxUpgraded">
			<summary>Event generated whenever Visual Studio upgrades its Toolbox.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.AddOptionKey(System.String)">
			<summary>Adds a user option key name into the list of option keys.</summary>
			<param name="name">The name of the option key to add. An option key name must not have any periods in it.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.CreateInstance(System.Guid@,System.Guid@,System.Type)">
			<summary>Creates the specified COM object using the Visual Studio's local registry CLSID object.</summary>
			<returns>An instance of the created object.</returns>
			<param name="type">The managed type of the object to return.</param>
			<param name="iid">The interface IID the object implements.</param>
			<param name="clsid">The CLSID of the object to create.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.CreateTool(System.Guid@)">
			<summary>Enables derived classes to provide an implementation if necessary.</summary>
			<returns><see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see> if successful, otherwise an error code.</returns>
			<param name="persistenceSlot">The GUID of the tool window that should be created.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.CreateToolWindow(System.Type,System.Int32)">
			<summary>Creates a tool window of the specified type with the specified ID.</summary>
			<returns>An instance of the requested tool window.</returns>
			<param name="toolWindowType">The type of tool window to create.</param>
			<param name="id">The tool window ID. This is 0 for a single-instance tool window.</param>
			<exception cref="T:System.ArgumentNullException">toolWindowType is null.</exception>
			<exception cref="T:System.ArgumentException">id is less than 0.toolWindowType is not derived from <see cref="T:Microsoft.VisualStudio.Shell.ToolWindowPane"></see> type.</exception>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.Dispose(System.Boolean)">
			<summary>Releases the resources used by the <see cref="T:Microsoft.VisualStudio.Shell.Package"></see> object.</summary>
			<param name="disposing">true if the object is being disposed, false if it is being finalized.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.FindToolWindow(System.Type,System.Int32,System.Boolean)">
			<summary>Gets the tool window corresponding to the specified type and ID.</summary>
			<returns>An instance of the requested tool window. If create is false and the tool window does not exist, null is returned.</returns>
			<param name="create">If true, the tool window is created if it does not exist.</param>
			<param name="toolWindowType">The type of tool window to create.</param>
			<param name="id">The tool window ID. This is 0 for a single-instance tool window.</param>
			<exception cref="T:System.ArgumentNullException">toolWindowType is null.</exception>
			<exception cref="T:System.ArgumentException">toolWindowType is not derived from <see cref="T:Microsoft.VisualStudio.Shell.ToolWindowPane"></see>.toolWindowType does not have a public constructor that takes a service provider.</exception>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.GetAutomationObject(System.String)">
			<summary>Gets the automation object for the VSPackage.</summary>
			<returns>An instance of the automation object, or null if no automation support is available.</returns>
			<param name="name">The name of the automation object to return. If name is null, GetAutomationObject returns the default automation object for the VSPackage.</param>
			<exception cref="T:System.NotImplementedException">Thrown by the base implementation of GetAutomationObject.</exception>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.GetDialogPage(System.Type)">
			<summary>Gets the requested dialog page.</summary>
			<returns>An instance of the requested page.</returns>
			<param name="dialogPageType">The type of dialog page to retrieve.</param>
			<exception cref="T:System.ArgumentNullException">dialogPageType is null.</exception>
			<exception cref="T:System.ArgumentException">dialogPageType is not derived from <see cref="T:Microsoft.VisualStudio.Shell.DialogPage"></see>.dialogPageType does not have a public constructor.</exception>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.GetGlobalService(System.Type)">
			<summary>Gets a service proffered globally by Visual Studio or one of its packages. This is the same as calling GetService() on an instance of a package that proffers no services itself.</summary>
			<returns>The service being requested if available, otherwise null.</returns>
			<param name="serviceType">The type of the service requested.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.GetOutputPane(System.Guid,System.String)">
			<summary>Gets the requested output window.</summary>
			<returns>The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane"></see> interface. Returns null in case of failure.</returns>
			<param name="page">The GUID corresponding to the pane. (See <see cref="T:Microsoft.VisualStudio.VSConstants"></see> class for the GUIDs which correspond to output panes.)</param>
			<param name="caption">The caption to create if the pane does not exist.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.GetProviderLocale">
			<summary>Returns the locale associated with this service provider.</summary>
			<returns>Returns the locale identifier for the service provider.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.GetService(System.Type)">
			<summary>Gets type-based services from the VSPackage service container.</summary>
			<returns>An instance of the requested service, or null if the service could not be found.</returns>
			<param name="serviceType">The type of service to retrieve.</param>
			<exception cref="T:System.ArgumentNullException">serviceType is null.</exception>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.Initialize">
			<summary>Called when the VSPackage is loaded by Visual Studio.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget.Exec(System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
			<summary>Executes a specified command or displays help for a command.</summary>
			<returns>This method returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see> if it succeeds, otherwise an error code. If no instance of <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget"></see> can be found, returns <see cref="F:Microsoft.VisualStudio.NativeMethods.OLECMDERR_E_NOTSUPPORTED"></see>.</returns>
			<param name="nCmdId">The ID of the command.</param>
			<param name="guidGroup">The GUID specifying the command group to which the command belongs.</param>
			<param name="pIn">A pointer to a VARIANTARG structure containing input arguments. Can be null.</param>
			<param name="nCmdExcept">A pointer to an <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMDEXECOPT"></see> structure specifying how the command should be executed.</param>
			<param name="vOut">A pointer to a VARIANTARG structure to receive command output. Can be null. </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget.QueryStatus(System.Guid@,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr)">
			<summary>Queries the object for the status of one or more commands generated by user interface events.</summary>
			<returns><see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see> if the method succeeded, otherwise an error code. This method returns <see cref="F:Microsoft.VisualStudio.NativeMethods.OLECMDERR_E_NOTSUPPORTED"></see> if no instance of <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget"></see> can be found.</returns>
			<param name="nCmdId">The ID of the command.</param>
			<param name="guidGroup">The GUID of the command group to which the command belongs.</param>
			<param name="oleCmd">An array of OLECMD structures representing the commands being queried.</param>
			<param name="oleText">A pointer to an OLECMDTXT structure in which to return name and/or status information for a single command. Can be null to indicate that the caller does not need this information. </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft.VisualStudio.OLE.Interop.IServiceProvider.QueryService(System.Guid@,System.Guid@,System.IntPtr@)">
			<summary>Internal IServiceProvider implementation.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>, otherwise it returns an error code.</returns>
			<param name="sid">GUID of the service.</param>
			<param name="iid">GUID of the requested interface</param>
			<param name="ppvObj">Pointer to the object requested.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft.VisualStudio.Shell.Interop.IVsPackage.Close">
			<summary>Closes and disposes the package.</summary>
			<returns>If the method succeeds, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>, otherwise an error code.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft.VisualStudio.Shell.Interop.IVsPackage.GetAutomationObject(System.String,System.Object@)">
			<summary>Gets an automation-friendly object for this package.</summary>
			<returns>If the method succeeds, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>, otherwise an error code.</returns>
			<param name="propName">String containing the automation property name.</param>
			<param name="auto">[out] Returns the automation object.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft.VisualStudio.Shell.Interop.IVsPackage.GetPropertyPage(System.Guid@,Microsoft.VisualStudio.Shell.Interop.VSPROPSHEETPAGE[])">
			<summary>Proffers access to the Tools menu Options and the property pages of the Customize Toolbox dialog boxes.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>, otherwise it returns an error code.</returns>
			<param name="rguidPage">Unique identifier of the requested property page.</param>
			<param name="ppage">Specifies the property page whose values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSPROPSHEETPAGE"></see> structure.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft.VisualStudio.Shell.Interop.IVsPackage.QueryClose(System.Int32@)">
			<summary>Called to ask the VSPackage if the Visual Studio shell can be closed.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>, otherwise it returns an error code.</returns>
			<param name="close">Set canClose to false if you want to prevent the shell from closing</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft.VisualStudio.Shell.Interop.IVsPackage.ResetDefaults(System.UInt32)">
			<summary>Resets Toolbox defaults.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>, otherwise it returns an error code.</returns>
			<param name="grfFlags">Flags whose values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSPKGRESETFLAGS"></see> enumeration</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft.VisualStudio.Shell.Interop.IVsPackage.SetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
			<summary>Initializes the VSPackage in the Visual Studio environment.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="sp"><see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider"></see> object.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionOpts.LoadUserOptions(Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence,System.UInt32)">
			<summary>Loads user options for a given solution.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="pPersistance"><see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence"></see> object.</param>
			<param name="options">User options whose value is taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSLOADUSEROPTS"></see></param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionOpts.ReadUserOptions(Microsoft.VisualStudio.OLE.Interop.IStream,System.String)">
			<summary>Reads user options for a given solution.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="pStream"><see cref="T:Microsoft.VisualStudio.OLE.Interop.IStream"></see> object from which the VSPackage should read the user-specific options</param>
			<param name="pszKey">Name of the stream.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionOpts.SaveUserOptions(Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence)">
			<summary>Saves user options for a given solution.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="pPersistance"><see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence"></see> object.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionOpts.WriteUserOptions(Microsoft.VisualStudio.OLE.Interop.IStream,System.String)">
			<summary>Writes user options for a given solution.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="pStream"><see cref="T:Microsoft.VisualStudio.OLE.Interop.IStream"></see> object to which the VSPackage writes the user-specific options.</param>
			<param name="pszKey">Name of the stream.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft.VisualStudio.Shell.Interop.IVsToolWindowFactory.CreateToolWindow(System.Guid@,System.UInt32)">
			<summary>Creates a tool window of the specified type with the specified ID.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="toolWindowType">Type of the window to be created.</param>
			<param name="id">Instance ID</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft.VisualStudio.Shell.Interop.IVsUserSettings.ExportSettings(System.String,Microsoft.VisualStudio.Shell.Interop.IVsSettingsWriter)">
			<summary>This method implements the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUserSettings"></see> Interface used to manage profiles and import/export settings to XML files.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="writer"><see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSettingsWriter"></see> object.</param>
			<param name="strPageGuid">GUID of the page.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft.VisualStudio.Shell.Interop.IVsUserSettings.ImportSettings(System.String,Microsoft.VisualStudio.Shell.Interop.IVsSettingsReader,System.UInt32,System.Int32@)">
			<summary>Retrieves a VSPackage's configuration using the Visual Studio settings mechanism when a user selects the import option of the Import/Export Settings feature on the IDE’s Tools menu. This method is part of the implementation of the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUserSettings"></see> interface used to manage profiles and import/export settings to XML files.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="reader"><see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSettingsReader"></see> object.</param>
			<param name="restartRequired">true if the Visual Studio IDE must be restarted.</param>
			<param name="flags">Values from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__UserSettingsFlags"></see> returned by the shell, specifying how the settings are to be processed.</param>
			<param name="strPageGuid">GUID of the page.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.OnLoadOptions(System.String,System.IO.Stream)">
			<summary>Invoked by the package class when there are options to be read out of the solution file.</summary>
			<param name="stream">The stream to load the option data from.</param>
			<param name="key">The name of the option key to load.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.OnSaveOptions(System.String,System.IO.Stream)">
			<summary>Invoked by the <see cref="T:Microsoft.VisualStudio.Shell.Package"></see> class when there are options to be saved to the solution file. </summary>
			<param name="stream">The stream to save the option data to.</param>
			<param name="key">The name of the option key to save.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.ParseToolboxResource(System.IO.TextReader,System.Guid)">
			<summary>Parses an embedded text resource of appropriate format for information about which items should be added to the Toolbox.</summary>
			<param name="packageGuid">The GUID of the VSPackage.</param>
			<param name="resourceData">A text reader that provides toolbox item data in the format described in Remarks.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.ParseToolboxResource(System.IO.TextReader,System.Resources.ResourceManager)">
			<summary>Parses an embedded text resource of appropriate format for information about which items should be added to the Toolbox.</summary>
			<param name="localizedCategories">A resource manager that provides localized lookup names for the categories provided in the resource data. This parameter can be null, in which case the category names are directly used.</param>
			<param name="resourceData">A text reader that provides toolbox item data in the format described in Remarks.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.QueryClose(System.Boolean@)">
			<summary>Called to ask the package if the shell can be closed.</summary>
			<returns><see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see> if the method succeeded, otherwise an error code.</returns>
			<param name="canClose">[out] Returns true if the shell can be closed, otherwise false.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.RegisterEditorFactory(Microsoft.VisualStudio.Shell.Interop.IVsEditorFactory)">
			<summary>Registers an editor factory with Visual Studio.</summary>
			<param name="factory">The editor factory to register.</param>
			<exception cref="T:System.ArgumentNullException">factory is null.</exception>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.RegisterProjectFactory(Microsoft.VisualStudio.Shell.Interop.IVsProjectFactory)">
			<summary>Registers a project factory with Visual Studio.</summary>
			<param name="factory">The project factory to register.</param>
			<exception cref="T:System.ArgumentNullException">factory is null.</exception>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.ShowOptionPage(System.Type)">
			<summary>Displays a specified tools options page.</summary>
			<param name="optionsPageType">The options page to open. The options page is identified by the GUID of the optionsPageType object passed in.</param>
			<exception cref="T:System.ArgumentNullException">optionsPageType is null.</exception>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.Object)">
			<summary>Adds the given service to the VSPackage's service container.</summary>
			<param name="serviceType">Type of service to add.</param>
			<param name="serviceInstance">Service object.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)">
			<summary>Adds the given service to the VSPackage's service container.</summary>
			<param name="callback"><see cref="T:System.ComponentModel.Design.ServiceCreatorCallback"></see> that can create the service. This allows a service to be declared as available, but delays creation of the object until the service is requested.</param>
			<param name="serviceType">Type of service to add.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.Object,System.Boolean)">
			<summary>Adds the given service to the VSPackage's service container.</summary>
			<param name="promote">true if this service should be added to any parent service containers; otherwise, false.</param>
			<param name="serviceType">Type of service to add.</param>
			<param name="serviceInstance">Service object.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)">
			<summary>Adds the given service to the service container by means of the specified <see cref="T:System.ComponentModel.Design.ServiceCreatorCallback"></see>.</summary>
			<param name="promote">true if this service should be added to any parent service containers; otherwise, false.</param>
			<param name="callback"><see cref="T:System.ComponentModel.Design.ServiceCreatorCallback"></see> that can create the service. This allows a service to be declared as available, but delays creation of the object until the service is requested.</param>
			<param name="serviceType">The type of service to add.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.System.ComponentModel.Design.IServiceContainer.RemoveService(System.Type)">
			<summary>Removes the given service type from the service container.</summary>
			<param name="serviceType">The type of service to remove.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.System.ComponentModel.Design.IServiceContainer.RemoveService(System.Type,System.Boolean)">
			<summary>Removes the given service type from the service container, and optionally promotes the removal of the service to parent service containers.</summary>
			<param name="promote">true to promote this request to any parent service containers; otherwise, false.</param>
			<param name="serviceType">The type of service to remove.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.System.IServiceProvider.GetService(System.Type)">
			<summary>Gets the service of the specified type.</summary>
			<returns>An object representing the requested service, or null if none can be found.</returns>
			<param name="serviceType">The type of the service to get.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.Package.ApplicationRegistryRoot">
			<summary>Gets the root registry key of the current Visual Studio registry hive.</summary>
			<returns>The root <see cref="T:Microsoft.Win32.RegistryKey"></see> of the Visual Studio registry hive.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.Package.UserDataPath">
			<summary>Gets the path to user data storage for Visual Studio.</summary>
			<returns>The path to user data storage.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.Package.UserLocalDataPath">
			<summary>Gets the path to local user data storage for Visual Studio.</summary>
			<returns>The path to local user data storage.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.Package.UserRegistryRoot">
			<summary>Gets a registry key that can be used to store user data.</summary>
			<returns>A <see cref="T:Microsoft.Win32.RegistryKey"></see> that can be used to store user data.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.Package.Zombied">
			<summary>Gets a value indicating whether the package in the process of shutdown.</summary>
			<returns>true if the package is in the process of shutdown, otherwise false.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.PackageRegistrationAttribute">
			<summary>Modify your class that implements <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsPackage"></see> with this attribute so that the registration tool regpkg.exe will look for additional attributes. For more information, see How to: Register Managed VSPackages.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.PackageRegistrationAttribute.#ctor">
			<summary>Initializes an instance of this attribute.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.PackageRegistrationAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Creates registry entries that correspond to this attribute's value.</summary>
			<param name="context">Contains information about the entire installation so that registry entries specific to this attribute may be created.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.PackageRegistrationAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Removes attribute specific registry entries.</summary>
			<param name="context">Contains information about the entire installation so that registry entries specific to this attribute may be removed.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.PackageRegistrationAttribute.RegisterUsing">
			<summary>Gets or sets the method of registration.</summary>
			<returns><see cref="T:Microsoft.VisualStudio.Shell.RegistrationMethod"></see>.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.PackageRegistrationAttribute.SatellitePath">
			<summary>Gets or sets the non-default resource .dll location.</summary>
			<returns>The non-default resource .dll location.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.PackageRegistrationAttribute.UseManagedResourcesOnly">
			<summary>Gets or sets whether or not package resources are described in a managed package or in a satellite UI .dll.</summary>
			<returns>Set to true if package resources are described in a managed package, false if they are in a satellite UI .dll.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.PackageUtilities">
			<summary>A set of static utilities for filenames, paths, enumeration/string conversions, images, and other functions.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.PackageUtilities.ContainsInvalidFileNameChars(System.String)">
			<summary>Determines whether or not a string contains characters that are invalid for file names or paths.</summary>
			<returns>true if the string contains invalid characters, false if the string is a valid file name or path.</returns>
			<param name="name">The file name or path.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.PackageUtilities.ConvertFromType``1(System.String,System.Globalization.CultureInfo)">
			<summary>Converts a string to an enumeration using a converter.</summary>
			<returns>The enumeration value.</returns>
			<param name="culture">The <see cref="T:System.Globalization.CultureInfo"></see> of the string.</param>
			<param name="value">The string value.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.PackageUtilities.ConvertToType``1(``0,System.Type,System.Globalization.CultureInfo)">
			<summary>Converts a string to an enumeration type.</summary>
			<returns>The enumeration type.</returns>
			<param name="culture">A <see cref="T:System.Globalization.CultureInfo"></see> object describing the culture to use to read localized strings.</param>
			<param name="typeToConvert">The value to convert.</param>
			<param name="value">The enumeration to which the string is to be converted.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.PackageUtilities.CopyUrlToLocal(System.Uri,System.String)">
			<summary>Copies the specified file to the local project directory.  </summary>
			<param name="uri">The <see cref="T:System.Uri"></see> to copy.</param>
			<param name="local">The local resource to copy it to.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.PackageUtilities.CreateCAUUIDFromGuidArray(System.Guid[])">
			<summary>Creates a CAUUID from a GUID array. </summary>
			<returns>A <see cref="T:Microsoft.VisualStudio.OLE.Interop.CAUUID"></see> structure.</returns>
			<param name="guids">An array of GUIDs.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.PackageUtilities.EnsureOutputPath(System.String)">
			<summary>Creates the directories necessary for the given path.</summary>
			<param name="path">The path to create.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.PackageUtilities.GetImageList(System.Object)">
			<summary>Creates a list of bitmaps from the resource handle.</summary>
			<returns>An <see cref="T:System.Windows.Forms.ImageList"></see> containing a series of bitmaps.</returns>
			<param name="imageListAsPointer">The handle of a resource.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.PackageUtilities.GetImageList(System.IO.Stream)">
			<summary>Creates an image list from the specified stream.</summary>
			<returns>An <see cref="T:System.Windows.Forms.ImageList"></see> containing a series of 16 by 16 pixel bitmaps with a magenta background color.</returns>
			<param name="imageStream">The stream from which to extract the bitmaps.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.PackageUtilities.GetImageList(System.Reflection.Assembly,System.String[])">
			<summary>Creates a list of bitmaps from the specified assembly and resource names.</summary>
			<returns>An <see cref="T:System.Windows.Forms.ImageList"></see> containing a series of 16 by 16 pixel bitmaps.</returns>
			<param name="assembly">The assembly from which to get the resources.</param>
			<param name="resourceNames">An array of resource names (representing bitmaps) in the assembly.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.PackageUtilities.GetIntPointerFromImage(System.Drawing.Image)">
			<summary>Gets a pointer from a bitmap image.</summary>
			<returns>An integer which serves as an <see cref="T:System.IntPtr"></see>.</returns>
			<param name="image"><see cref="T:System.Drawing.Image"></see>.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.PackageUtilities.GetPathDistance(System.Uri,System.Uri)">
			<summary>Calculates the distance between two paths.</summary>
			<returns>The relative path.</returns>
			<param name="uriBase">The base <see cref="T:System.Uri"></see>.</param>
			<param name="uriRelativeTo">The relative <see cref="T:System.Uri"></see>.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.PackageUtilities.GetSystemAssemblyPath">
			<summary>Gets the path of system assemblies.</summary>
			<returns>The base directory for system assemblies.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.PackageUtilities.IsFileNameInvalid(System.String)">
			<summary>Determines whether or not the specified file name is invalid.</summary>
			<returns>true if the file name is invalid, false if it is valid.</returns>
			<param name="fileName">The name of the file.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.PackageUtilities.MakeRelative(System.String,System.String)">
			<summary>Returns a path for the second file that is relative to the first.</summary>
			<returns>The relative path of the second file.</returns>
			<param name="filename2">The relative path.</param>
			<param name="filename">The base path.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.PackageUtilities.MakeRelativeIfRooted(System.String,Microsoft.VisualStudio.Shell.Url)">
			<summary>Returns a relative path if the specified file path is absolute and if it is in the same folder as the URL or in a child folder of the URL.</summary>
			<returns>The relative path to the file.</returns>
			<param name="fileName">The path to convert.</param>
			<param name="url">The base URL.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.PackageUtilities.SetStringValueFromConvertedEnum``1(``0,System.Globalization.CultureInfo)">
			<summary>Returns a string from an enumeration value.</summary>
			<returns>A string value derived from the enumeration.</returns>
			<param name="culture">The <see cref="T:System.Globalization.CultureInfo"></see> of the string.</param>
			<param name="enumValue">The enumeration value.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.PropertyPageTypeConverterAttribute">
			<summary>The class representing the attribute describing how to convert property values on property pages in a package. Use this attribute rather than <see cref="T:System.ComponentModel.TypeConverterAttribute"></see>.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.PropertyPageTypeConverterAttribute.#ctor(System.Type)">
			<summary>Creates a new instance of the class for the specified type.</summary>
			<param name="t">The type (System.Type) to convert.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.PropertyPageTypeConverterAttribute.ConverterType">
			<summary>The type that is to be converted.</summary>
			<returns><see cref="T:System.Type"></see>.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.ProvideAssemblyFilterAttribute">
			<summary>Provides an assembly filter for an <see cref="T:Microsoft.VisualStudio.Shell.IConfigureToolboxItem"></see> object by describing the assemblies such an object supports.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideAssemblyFilterAttribute.#ctor(System.String)">
			<summary>Creates a new instance of a <see cref="T:Microsoft.VisualStudio.Shell.ProvideAssemblyFilterAttribute"></see> object on the basis of the assembly name provided.</summary>
			<param name="assemblyFilter">[in] A string containing the full name of an assembly.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideAssemblyFilterAttribute.AssemblyFilter">
			<summary>The string containing the full assembly specification of the filter.</summary>
			<returns>A string containing the full assembly specification of the filter.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.ProvideAutoLoadAttribute">
			<summary>Apply this attribute to your VSPackage class to cause it to be automatically loaded when a specified UI context is active. This class cannot be inherited.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideAutoLoadAttribute.#ctor(System.String)">
			<summary>Returns a new instance of this attribute with the specified cmdUiContextGuid.</summary>
			<param name="cmdUiContextGuid">The GUID of the command context which will cause this package to load.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideAutoLoadAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Provides registration information about a VSPackage when called by an external registration tool like regpkg.exe. </summary>
			<param name="Context">A registration context provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideAutoLoadAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Removes registration information about a VSPackage when called by an external registration tool like regpkg.exe. </summary>
			<param name="context">A registration context provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideAutoLoadAttribute.LoadGuid">
			<summary>Returns the UI context GUID which will cause your package to load.</summary>
			<returns>The UI context GUID.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.ProvideAutomationObjectAttribute">
			<summary>Modifying your <see cref="T:Microsoft.VisualStudio.Shell.Package"></see>-derived class with this attribute declares that it provides a particular automation object.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideAutomationObjectAttribute.#ctor(System.String)">
			<summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.ProvideAutomationObjectAttribute"></see>.</summary>
			<param name="objectName">The name of the automation object.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideAutomationObjectAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Registers this attribute when called by an external registration tool such as RegPkg.exe.</summary>
			<param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext"></see> provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideAutomationObjectAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Removes the registry key when called by an external registration tool such as RegPkg.exe. </summary>
			<param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext"></see> provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideAutomationObjectAttribute.Description">
			<summary>Gets or sets the description of the automation object.</summary>
			<returns>The description of the automation object.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideAutomationObjectAttribute.Name">
			<summary>Gets the name of the automation object.</summary>
			<returns>The name of the automation object.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.ProvideEditorExtensionAttribute">
			<summary>Associates a file extension to a given editor factory when applied to a class that inherits from <see cref="T:Microsoft.VisualStudio.Shell.Package"></see> or implements the interface <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsPackage"></see>.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideEditorExtensionAttribute.#ctor(System.Object,System.String,System.Int32)">
			<summary>Initializes an instance of ProvideEditorExtensionAttribute.</summary>
			<param name="factoryType">One of following types:The type of the editor factory expressed as a string.The GUID of the editor factory.The type of the editor factory.</param>
			<param name="priority">The priority of this editor factory. The editors with the higher priority number is given a chance to read a file first. Upon failure, the next editor in priority is used.  </param>
			<param name="extension">The file extension to associate with the editor factory. This extension should include the prefix “.”.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideEditorExtensionAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Called to register this attribute with the given context. The context contains the location where the registration information should be placed. It also contains the type being registered and path information.</summary>
			<param name="context">A registration context provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
			<exception cref="T:System.ArgumentNullException">This method throws an <see cref="T:System.ArgumentNullException"></see> if the context argument is null.</exception>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideEditorExtensionAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Removes the registration information about a VSPackage when called by an external registration tool such as RegPkg.exe. For more information, see How to: Register Managed VSPackages.</summary>
			<param name="context">A registration context provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
			<exception cref="T:System.ArgumentNullException">This method throws an <see cref="T:System.ArgumentNullException"></see> if the context argument is null.</exception>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideEditorExtensionAttribute.DefaultName">
			<summary>Gets or sets the default name of the editor.</summary>
			<returns>The default name of the editor.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideEditorExtensionAttribute.EditorFactoryNotify">
			<summary>Gets or sets the value that determines whether or not the EditorFactoryNotify registry key should be created.</summary>
			<returns>true if the EditorFactoryNotify registry key should be created, otherwise false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideEditorExtensionAttribute.Extension">
			<summary>Gets the file extension associated with this editor.</summary>
			<returns>The file extension for this editor.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideEditorExtensionAttribute.Factory">
			<summary>Returns the GUID of the associated factory.</summary>
			<returns>The GUID of the editor factory.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideEditorExtensionAttribute.NameResourceID">
			<summary>Gets and sets the integer NameResourceID.</summary>
			<returns>Name resource ID.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideEditorExtensionAttribute.Priority">
			<summary>Gets the editor's priority as set in the constructor.</summary>
			<returns>The priority for this editor for its file extension.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideEditorExtensionAttribute.ProjectGuid">
			<summary>Sets and gets the GUID of the project associated with this editor.</summary>
			<returns>The project GUID.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideEditorExtensionAttribute.TemplateDir">
			<summary>Gets or sets the template directory to be used by the editor factory to retrieve its source files.</summary>
			<returns>The template directory.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.ProvideEditorFactoryAttribute">
			<summary>This attribute declares that the VSPackage provides an editor factory.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideEditorFactoryAttribute.#ctor(System.Type,System.Int16)">
			<summary>This constructor creates a new <see cref="T:Microsoft.VisualStudio.Shell.ProvideEditorFactoryAttribute"></see> object.</summary>
			<param name="factoryType">The object type that implements <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsEditorFactory"></see>.</param>
			<param name="nameResourceID">The resource ID in the unmanaged resource file that contains the localized name of the editor factory.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideEditorFactoryAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Called to register this attribute with the given context.</summary>
			<param name="context"><see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext"></see>. Contains the location where the registration information should be placed, and also contains information about the editor type being registered, and path information.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideEditorFactoryAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Called to un-register this attribute with the given context.</summary>
			<param name="context"><see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext"></see>. Contains the location where the registration information should be placed, and also contains information about the editor type being registered, and path information.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideEditorFactoryAttribute.FactoryType">
			<summary>Gets the editor factory type.</summary>
			<returns>The editor factory type.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideEditorFactoryAttribute.NameResourceID">
			<summary>Gets resource ID.</summary>
			<returns>Returns the editor factory esource ID specified in the resource file.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideEditorFactoryAttribute.TrustLevel">
			<summary>Gets or sets the trust level for the editor.</summary>
			<returns><see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSEDITORTRUSTLEVEL"></see>.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.ProvideEditorLogicalViewAttribute">
			<summary>Adds a logical view to the editor created by an editor factory.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideEditorLogicalViewAttribute.#ctor(System.Object,System.String)">
			<summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.ProvideEditorLogicalViewAttribute"></see> for the specified factory type and logical view.</summary>
			<param name="factoryType">The type of factory.  This may be a type, a GUID or a string representation of a GUID</param>
			<param name="logicalViewGuid">The GUID of the logical view to register.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideEditorLogicalViewAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Registers this attribute with the given context. </summary>
			<param name="context"><see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext"></see>. The context contains the location where the registration information should be placed. It also contains other information such as the type being registered and path information.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideEditorLogicalViewAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Unregisters the logical view.</summary>
			<param name="context"><see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext"></see>. The context contains the location where the registration information should be placed. It also contains other information such as the type being registered and path information.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideEditorLogicalViewAttribute.FactoryType">
			<summary>Gets the GUID of the factory type.</summary>
			<returns>The GUID of the factory type.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideEditorLogicalViewAttribute.IsTrusted">
			<summary>Gets or sets the trust flag for this logical view. </summary>
			<returns>true if the logical view is trusted, otherwise false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideEditorLogicalViewAttribute.LogicalView">
			<summary>Gets the GUID of the logical view.</summary>
			<returns>The GUID of the logical view.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.ProvideExtenderAttribute">
			<summary>Provides an extender for Visual Studio. This class cannot be inherited.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideExtenderAttribute.#ctor(System.String,System.String,System.String)">
			<summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.ProvideExtenderAttribute"></see> for the specified extender.</summary>
			<param name="extendeeCatId">The CATID of the element to be extended.</param>
			<param name="extenderGuid">The GUID of the extender.</param>
			<param name="extenderName">The name of the extender.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideExtenderAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Provides registration information about a VSPackage when called by an external registration tool such as RegPkg.exe.</summary>
			<param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext"></see> provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideExtenderAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Removes registration information about a VSPackage when called by an external registration tool such as RegPkg.exe.</summary>
			<param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext"></see> provided by an external registration tool. The context can be used to remove registry keys, log registration activity, and obtain information about the component being registered.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideExtenderAttribute.ExtendeeCatId">
			<summary>Gets the GUID category ID of the element to be extended.</summary>
			<returns>The GUID category ID of the element to be extended.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideExtenderAttribute.Extender">
			<summary>Gets the GUID of the extender.</summary>
			<returns>The GUID of the extender.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideExtenderAttribute.ExtenderName">
			<summary>Gets the name of the extender.</summary>
			<returns>The name of the extender.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.ProvideKeyBindingTableAttribute">
			<summary>Provides a key binding table GUID. By putting this attribute on your <see cref="T:Microsoft.VisualStudio.Shell.Package"></see>-derived class or class that implements <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsPackage"></see> you will declare that it has the given key binding (KEYBINDINGS_SECTION – KEYBINDINGS_END) table in its Command Table Configuration (.ctc) File.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideKeyBindingTableAttribute.#ctor(System.String,System.Int16)">
			<summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.ProvideKeyBindingTableAttribute"></see> for the specified table and name resource ID.</summary>
			<param name="tableGuid">The GUID of the key binding table in the Command Table Configuration (.ctc) File.</param>
			<param name="nameResourceID">The resource ID in the unmanaged resource file that contains the localized name of the key binding table. </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideKeyBindingTableAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Called to register this attribute with the given context.</summary>
			<param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext"></see> provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideKeyBindingTableAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Removes the registration information about a VSPackage when called by an external registration tool such as regpkg.exe. For more information, see How to: Register Managed VSPackages.</summary>
			<param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext"></see> provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideKeyBindingTableAttribute.AllowNavKeyBinding">
			<summary>Gets or sets whether the user is allowed to bind new commands to navigation keys.</summary>
			<returns>true if the user is allowed to bind new commands to navigation keys, otherwise false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideKeyBindingTableAttribute.NameResourceID">
			<summary>Gets the name resource ID.</summary>
			<returns>The name resource ID</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideKeyBindingTableAttribute.TableGuid">
			<summary>Gets the GUID of the key binding table.</summary>
			<returns>The GUID of the key binding table.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.ProvideLanguageCodeExpansionAttribute">
			<summary>Registers language service support for code snippets.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideLanguageCodeExpansionAttribute.#ctor(System.Object,System.String,System.Int32,System.String,System.String)">
			<summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Shell.ProvideLanguageCodeExpansionAttribute"></see> class.</summary>
			<param name="pathToSnippetIndexFile">[in] A string containing the path to the code snippets index file for the language.</param>
			<param name="languageName">[in] The name of the language. This name is used in the registry for registry key and entry names.</param>
			<param name="languageResourceId">[in] The resource ID for the localized version of the language name. This is used to present the language name in dialog boxes and other user interface elements.</param>
			<param name="languageIdentifier">[in] A string containing an identifier specific to the language that is used to mark and identify code snippets.</param>
			<param name="languageService">[in] This is either a string containing a GUID or a type representing the class that implements the language service. The language service GUID is derived from this string or type.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideLanguageCodeExpansionAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Creates all of the registry keys and entries as specified by the class constructor.</summary>
			<param name="context">[in] A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext"></see> object used to manage registry keys.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideLanguageCodeExpansionAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Removes all of the registry keys and entries as specified by the class constructor.</summary>
			<param name="context">[in] A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext"></see> object used to manage registry keys.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageCodeExpansionAttribute.ForceCreateDirs">
			<summary>Gets or sets a semicolon-delimited string containing the directory or directories that should be created.</summary>
			<returns>The directory or directories that should be created.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageCodeExpansionAttribute.LanguageName">
			<summary>Gets the name of the language.</summary>
			<returns>The name of the language. </returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageCodeExpansionAttribute.LanguageServiceSid">
			<summary>Gets the GUID of the language service.</summary>
			<returns>The GUID of the language service. </returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageCodeExpansionAttribute.SearchPaths">
			<summary>Gets or sets a semicolon-delimited string containing the default paths to search for snippets.</summary>
			<returns>Returns a semicolon-delimited string containing the paths to search for snippets.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageCodeExpansionAttribute.ShowRoots">
			<summary>Gets or sets whether or not the roots of the code snippets should be shown.</summary>
			<returns>true if the roots should be shown, otherwise false.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.ProvideLanguageEditorOptionPageAttribute">
			<summary>Informs Visual Studio about a language service property page.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideLanguageEditorOptionPageAttribute.#ctor(System.Type,System.String,System.String,System.String,System.String)">
			<summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.ProvideLanguageEditorOptionPageAttribute"></see> for the specified page.</summary>
			<param name="languageName">The language name.</param>
			<param name="category">The option page category.</param>
			<param name="pageType">The type of the option page.</param>
			<param name="pageName">The caption of the option page.</param>
			<param name="pageNameResourceId">The resource ID of the page.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideLanguageEditorOptionPageAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Creates all the registry keys and entries as specified by the class constructor.</summary>
			<param name="context">[in] A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext"></see> object used to manage registry keys.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideLanguageEditorOptionPageAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Removes all of the registry keys and entries.</summary>
			<param name="context">[in] A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext"></see> object used to manage registry keys.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageEditorOptionPageAttribute.LanguageName">
			<summary>Gets the name of the language.</summary>
			<returns>The name of the language. This is the same string that was passed to the class constructor.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageEditorOptionPageAttribute.PageGuid">
			<summary>Gets the GUID of the option page.</summary>
			<returns>The GUID of the option page.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.ProvideLanguageEditorToolsOptionCategoryAttribute">
			<summary>This attribute is used to declare a Tools Option category for a language.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideLanguageEditorToolsOptionCategoryAttribute.#ctor(System.String,System.String,System.String)">
			<summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.ProvideLanguageEditorToolsOptionCategoryAttribute"></see> for the language and option category.</summary>
			<param name="categoryResourceId">The resource ID of the category.</param>
			<param name="languageName">The name of the language.</param>
			<param name="categoryName">The name of the category.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideLanguageEditorToolsOptionCategoryAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Registers the Tools Option page.</summary>
			<param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext"></see>  that describes the location of the key and its values in the registry</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideLanguageEditorToolsOptionCategoryAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Unregisters the Tools Option page.</summary>
			<param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext"></see> that describes the location of the key and its values in the registry.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.ProvideLanguageExtensionAttribute">
			<summary>Associates a file extension with a particular language service.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideLanguageExtensionAttribute.#ctor(System.String,System.String)">
			<summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Shell.ProvideLanguageExtensionAttribute"></see> attribute, using the specified language service GUID.</summary>
			<param name="languageServiceGuid">[in] A string containing the GUID of the language service.</param>
			<param name="extension">[in] A string containing the file extension to associate with the language service.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideLanguageExtensionAttribute.#ctor(System.Type,System.String)">
			<summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Shell.ProvideLanguageExtensionAttribute"></see> attribute, using the type of your language service class.</summary>
			<param name="languageService">[in] The type of the language service class.</param>
			<param name="extension">[in] A string containing the file extension to associate with the language service.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideLanguageExtensionAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Puts the file extension and language service GUID into the registry.</summary>
			<param name="context">[in] A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext"></see> object used to create registry keys and to log progress.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideLanguageExtensionAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Removes the file extension and language service GUID from the registry.</summary>
			<param name="context">[in] A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext"></see> object used to remove registry keys and to log progress.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageExtensionAttribute.Extension">
			<summary>Returns the associated file extension.</summary>
			<returns>Returns the string containing the file extension that was passed to the constructor of the <see cref="T:Microsoft.VisualStudio.Shell.ProvideLanguageExtensionAttribute"></see> class.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageExtensionAttribute.LanguageService">
			<summary>Returns the language GUID.</summary>
			<returns>Returns a <see cref="T:System.Guid"></see> object containing the GUID of the language service that was passed to the <see cref="T:Microsoft.VisualStudio.Shell.ProvideLanguageExtensionAttribute"></see> class constructor.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute">
			<summary>Informs Visual Studio that a VSPackage provides a language service. Used with the managed package framework (MPF).</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.#ctor(System.Object,System.String,System.Int32)">
			<summary>Initializes a new instance of the Shell.ProvideLanguageServiceAttribute class.</summary>
			<param name="languageService">[in] This is either a string containing a GUID or a type representing the class that implements the language service. The language service GUID is derived from this string or type.</param>
			<param name="strLanguageName">[in] The name of the language. This name is used in the registry for registry key and entry names.</param>
			<param name="languageResourceID">[in] The resource ID for the localized version of the language name. This is used to present the language name in dialog boxes and other user interface elements.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Creates all of the registry keys and entries as specified by the class constructor.</summary>
			<param name="context">[in] A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext"></see> object used to manage registry keys.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Removes all of the registry keys and entries as specified by the class constructor.</summary>
			<param name="context">[in] A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext"></see> object used to manage registry keys.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.AutoOutlining">
			<summary>Determines if the language service supports automatic outlining.</summary>
			<returns>Returns true if the language service supports automatic outlining; otherwise, returns false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.CodeSense">
			<summary>Determines if the language service supports IntelliSense operations.</summary>
			<returns>Returns true if the language service supports IntelliSense operations; otherwise, returns false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.CodeSenseDelay">
			<summary>Determines the amount of time before a parse operation is started to support an IntelliSense operation.</summary>
			<returns>Returns the number of milliseconds delay before a parse is started.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.DebuggerLanguageExpressionEvaluator">
			<summary>Determines the expression evaluator that is used for evaluating expressions.</summary>
			<returns>Returns a string containing the GUID of an expression evaluator; otherwise, returns a null value.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.DefaultToInsertSpaces">
			<summary>Determines the default setting for the Insert spaces option in the Options dialog box for a language service.</summary>
			<returns>Returns true if the language service initially uses spaces for formatting; otherwise, returns false to indicate the language service uses tabs.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.DefaultToNonHotURLs">
			<summary>Determines the initial setting of the Enable single-click URL navigation option in the Options dialog box.</summary>
			<returns>Returns true if the Enable single-click URL navigation should be turned off; otherwise, returns false, the option is initially turned on.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.EnableAdvancedMembersOption">
			<summary>Determines whether the Hide Advanced Members option is enabled in the Options dialog box.</summary>
			<returns>Returns true if the Hide Advanced Members option is enabled; otherwise, returns false. </returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.EnableAsyncCompletion">
			<summary>Determines whether the language supports background parsing.</summary>
			<returns>Returns true if background parsing is allowed; otherwise, returns false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.EnableCommenting">
			<summary>Determines whether the language service can comment and uncomment source code using a single command.</summary>
			<returns>Returns true if commenting is supported; otherwise, returns false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.EnableFormatSelection">
			<summary>Determines if the language service supports automatic formatting of the source code.</summary>
			<returns>Returns true if formatting is supported; otherwise, returns false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.EnableLineNumbers">
			<summary>Determines if the Line numbers option can be selected in the Options dialog box.</summary>
			<returns>Returns true if the Line numbers option is enabled for use; otherwise, returns false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.HideAdvancedMembersByDefault">
			<summary>Determines the initial state of the Hide Advanced Members option in the Options dialog box.</summary>
			<returns>Returns true if the Hide Advanced Members is initially selected; otherwise, returns false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.LanguageName">
			<summary>Returns the name of the language.</summary>
			<returns>Returns a string containing the name of the language. This is the same string that was passed to the class constructor.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.LanguageResourceID">
			<summary>Returns the resource ID used to obtain the localized version of the language name.</summary>
			<returns>Returns a number representing the resource ID. This is the same value that was passed to the class constructor.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.LanguageServiceSid">
			<summary>Returns the GUID of the language service.</summary>
			<returns>Returns the GUID of the language service. This is the value that was derived from the object passed to the class constructor.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.MatchBraces">
			<summary>Determines if the language service supports matching language pairs.</summary>
			<returns>Returns true if matching language pairs is supported; otherwise, returns false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.MatchBracesAtCaret">
			<summary>Determines if a language service supports matching language pairs while typing.</summary>
			<returns>Returns true if language pairs can be matched while typing; otherwise, returns false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.MaxErrorMessages">
			<summary>Determines the maximum number of errors message that a language service can report for a parsing operation.</summary>
			<returns>Returns a number indicating the maximum number of errors that can be reported.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.QuickInfo">
			<summary>Determines if the language service supports the IntelliSense Quick Info.</summary>
			<returns>Returns true if the IntelliSense Quick Info is supported; otherwise, returns false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.RequestStockColors">
			<summary>Determines if the language service is using the built-in colorable items as supplied by Visual Studio.</summary>
			<returns>Returns true if the language service uses the built-in colorable items; otherwise, returns false, indicating the language service is supplying custom colorable items.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.ShowCompletion">
			<summary>Determines if the Statement completion options are enabled in the Options dialog box.</summary>
			<returns>Returns true if the Statement completion options are enabled; otherwise, returns false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.ShowDropDownOptions">
			<summary>Determines if the Navigation bar option is enabled in the Options dialog box.</summary>
			<returns>Returns true if the Navigation bar option is to be enabled; otherwise, returns false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.ShowHotURLs">
			<summary>Determines if URLs are displayed in such a way as to show they can be clicked. This option is not used.</summary>
			<returns>Returns true if URLs are to be displayed "hot" or clickable; otherwise, returns false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.ShowMatchingBrace">
			<summary>Determines if the matching language pair is shown in the status bar.</summary>
			<returns>Returns true if the matching language pair is shown in the status bar; otherwise, returns false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.ShowSmartIndent">
			<summary>Determines if the Smart Indenting option is enabled in the Options dialog box.</summary>
			<returns>Returns true if the Smart Indenting option is enabled; otherwise, returns false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.SingleCodeWindowOnly">
			<summary>Determines if the Window -&gt; New Window command is disabled for a language service.</summary>
			<returns>Returns true if the Window -&gt; New Window command is disabled; otherwise, returns false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.SupportCopyPasteOfHTML">
			<summary>Determines if the language service supports the clipboard format HTML for copy and paste operations.</summary>
			<returns>Returns true if the HTML clipboard format is supported, otherwise, returns false.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.ProvideLoadKeyAttribute">
			<summary>This attribute provides a package load key for your package.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideLoadKeyAttribute.#ctor(System.String,System.String,System.String,System.String,System.Int16)">
			<summary>Creates a new <see cref="T:Microsoft.VisualStudio.Shell.ProvideLoadKeyAttribute"></see>.</summary>
			<param name="minimumEdition">The minimum edition of Visual Studio on which the VSPackage is loaded. This must be the literal edition value provided by Microsoft when obtaining your Package Load Key (PLK).</param>
			<param name="productName">Name of the product that this VSPackage delivers. Products comprised of multiple VSPackages each need their own PLK.</param>
			<param name="productVersion">The version of the product that this VSPackage implements.</param>
			<param name="companyName">VSIP Partner/creator of the VSPackage. Must exactly match the name you provided to Microsoft when you registered for a PLK. companyName is case-sensitive.</param>
			<param name="resourceId">Resource ID for VSPackage load key.</param>
			<exception cref="T:System.ArgumentNullException">minimumEdition, productVersion, productName or companyName are null.</exception>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideLoadKeyAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Provides registration information about a VSPackage when called by an external registration tool such as regpkg.exe. For more information, see How to: Register Managed VSPackages.</summary>
			<param name="context">A registration context provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideLoadKeyAttribute.RegKeyName(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Returns the registry key name for this package's load key information.</summary>
			<returns>The Registry Key name for the load key information of the VSPackage.</returns>
			<param name="context">A registration context provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideLoadKeyAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Removes the registration information about a VSPackage when called by an external registration tool such as regpkg.exe. For more information, see How to: Register Managed VSPackages.</summary>
			<param name="context">A registration context provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLoadKeyAttribute.CompanyName">
			<summary>Returns a string containing the CompanyName.</summary>
			<returns>The name of your company.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLoadKeyAttribute.MinimumEdition">
			<summary>The MinimumEdition property returns a string containing the minimum edition of Visual Studio needed to load your VSPackage.</summary>
			<returns>The minimum edition of Visual Studio needed to load your VSPackage.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLoadKeyAttribute.ProductName">
			<summary>The ProductName property returns a string containing the name of your VSPackage.</summary>
			<returns>The name of your VSPackage.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLoadKeyAttribute.ProductVersion">
			<summary>The ProductVersion attribute returns a string containing the version number of your VSPackage.</summary>
			<returns>The version number of your VSPackage.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLoadKeyAttribute.ResourceId">
			<summary>Gets resource ID for the Package Load Key.</summary>
			<returns>The resource ID for the Package Load Key.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.ProvideMenuResourceAttribute">
			<summary>Provides registration information about menu resources used in a VSPackage. This class cannot be inherited.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideMenuResourceAttribute.#ctor(System.Int16,System.Int32)">
			<summary>This constructor creates a new ProvideMenuResourceAttribute object with the given resource ID and version number.</summary>
			<param name="version">The version number of the menu resource.</param>
			<param name="resourceID">The ID of the menu resource. It must match the resource ID used in both the satellite (resource-only) DLL and the Command Table Configuration (.ctc) File.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideMenuResourceAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Provides registration information about a VSPackage when called by an external registration tool such as regpkg.exe. For more information, see How to: Register Managed VSPackages.</summary>
			<param name="context">A registration context provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideMenuResourceAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Removes registration information about a VSPackage when called by an external registration tool such as regpkg.exe. For more information, see How to: Register Managed VSPackages.</summary>
			<param name="context">A registration context provided by an external registration tool. The context can be used to remove registry keys, log registration activity, and obtain information about the component being registered.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideMenuResourceAttribute.ResourceID">
			<summary>The ResourceID property returns the value of the resource ID set in the constructor.</summary>
			<returns>The resource ID of the menu resource.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideMenuResourceAttribute.Version">
			<summary>Returns the version number of the menu resource.</summary>
			<returns>The version number of the menu resource.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.ProvideObjectAttribute">
			<summary>Informs Visual Studio that the VSPackage provides an object that can be created from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.ILocalRegistry"></see>interface. This class cannot be inherited.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideObjectAttribute.#ctor(System.Type)">
			<summary>This constructor creates a new <see cref="T:Microsoft.VisualStudio.Shell.ProvideObjectAttribute"></see> object with the given object type.</summary>
			<param name="objectType">The type of object that the VSPackage can create. This type can have any scoping (public, internal, etc.) but must have a public constructor that takes no arguments.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideObjectAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Provides registration information about a VSPackage when called by an external registration tool such as regpkg.exe. For more information, see How to: Register Managed VSPackages.</summary>
			<param name="context">A registration context provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideObjectAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Removes registration information about a VSPackage when called by an external registration tool such as regpkg.exe. For more information, see How to: Register Managed VSPackages.</summary>
			<param name="context">A registration context provided by an external registration tool. The context can be used to remove registry keys, log registration activity, and obtain information about the component being registered.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideObjectAttribute.ObjectType">
			<summary>The ObjectType property returns the object type set in the constructor.</summary>
			<returns>Returns the object type set in the constructor.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideObjectAttribute.RegisterUsing">
			<summary>Gets or sets the registration method.</summary>
			<returns><see cref="T:Microsoft.VisualStudio.Shell.RegistrationMethod"></see>.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.ProvideOptionDialogPageAttribute">
			<summary>The base class for all the attributes that are used to register an option page.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideOptionDialogPageAttribute.#ctor(System.Type,System.String)">
			<summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.ProvideOptionDialogPageAttribute"></see> for the specified page.</summary>
			<param name="pageNameResourceId">The name resource ID of the page.</param>
			<param name="pageType">The type of the page.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideOptionDialogPageAttribute.PageNameResourceId">
			<summary>Gets the name resource ID of the page.</summary>
			<returns>The name resource ID of the page.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideOptionDialogPageAttribute.PageType">
			<summary>Gets the type of the page.</summary>
			<returns>The type of the page.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.ProvideOptionPageAttribute">
			<summary>Apply this attribute to independent objects to allow users to configure VSPackages through a custom Tools Options page.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideOptionPageAttribute.#ctor(System.Type,System.String,System.String,System.Int16,System.Int16,System.Boolean)">
			<summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.ProvideOptionPageAttribute"></see> indicating that a particular class implements user configuration support for the VSPackage based on a Tools Options page. </summary>
			<param name="supportsAutomation">If true, the Tools Options page can be accessed through the Visual Studio automation mechanism.</param>
			<param name="pageType">The <see cref="T:System.Type"></see> of the class implementing the Tools Options page.</param>
			<param name="pageNameResourceID">The localized resource ID of the Tools Options page subcategory.</param>
			<param name="categoryResourceID">The localized resource ID of the Tools Options page category. </param>
			<param name="pageName">The canonical nonlocalized name of the Tools Options page subcategory.</param>
			<param name="categoryName">The  canonical nonlocalized name of the Tools Options page category.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideOptionPageAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Registers the Tools Options page.</summary>
			<param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext"></see> describing the location in the registry and values to be registered.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideOptionPageAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Removes the Tools Options page key from the registry.</summary>
			<param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext"></see> describing the location in the registry and values to be removed.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideOptionPageAttribute.CategoryName">
			<summary>Gets the canonical nonlocalized name of the Tools Options page's category.</summary>
			<returns>The canonical nonlocalized name of the Tools Options page category.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideOptionPageAttribute.CategoryResourceID">
			<summary>Gets the category resource ID for a Tools Options page.</summary>
			<returns>The category resource ID for the Tools Options page.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideOptionPageAttribute.NoShowAllView">
			<summary>Gets or sets whether aggregated Tools Options pages are shown.</summary>
			<returns>true if the Tools Options page is to be displayed in the default (complex) view of Tools Options pages.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideOptionPageAttribute.PageName">
			<summary>Gets the canonical nonlocalized name of the Tools Options page.</summary>
			<returns>The canonical nonlocalized name of the Tools Options page.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideOptionPageAttribute.SupportsAutomation">
			<summary>Gets whether a Tools Options page implementation supports automation.</summary>
			<returns>true if a Tools Options page supports the Visual Studio automation model and can be accessed through the <see cref="N:EnvDTE"></see> mechanism.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideOptionPageAttribute.SupportsProfiles">
			<summary>Gets or sets whether a Tools Options page implementation uses the Visual Studio settings mechanism to persist its state.</summary>
			<returns>true if the Tools Options page implementation supports the use of Visual Studio settings to persist its state.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideOptionPageAttribute.TypeId">
			<summary>Gets the current instance of <see cref="T:Microsoft.VisualStudio.Shell.ProvideOptionPageAttribute"></see>.</summary>
			<returns>The current instance of <see cref="T:Microsoft.VisualStudio.Shell.ProvideOptionPageAttribute"></see>.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.ProvideProfileAttribute">
			<summary>Apply this attribute to independent objects used to implement a VSPackage's Visual Studio settings support.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideProfileAttribute.#ctor(System.Type,System.String,System.String,System.Int16,System.Int16,System.Boolean)">
			<summary>Initializes a new instance of ProvideProfileAttribute.</summary>
			<param name="objectNameResourceID">The localized resource ID of the name used to identify the object implementing a Visual Studio settings category.</param>
			<param name="objectType">The <see cref="T:System.Type"></see> of the class implementing Visual Studio settings support.</param>
			<param name="isToolsOptionPage">This argument is not implemented.</param>
			<param name="categoryResourceID">The localized resource ID of a Visual Studio settings category's name. </param>
			<param name="categoryName">The canonical, nonlocalized name of a Visual Studio settings category.</param>
			<param name="objectName">The canonical, nonlocalized name used to identify the object implementing a Visual Studio settings category.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideProfileAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Registers this attribute.</summary>
			<param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext"></see> describing the location of the key and its values in the registry.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideProfileAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Removes the key from the registry.</summary>
			<param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext"></see> describing the location of the key and its values in the registry.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideProfileAttribute.AlternateParent">
			<summary>Gets or sets the name of a different category in the profile.</summary>
			<returns>The name of a different category in the profile.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideProfileAttribute.CategoryName">
			<summary>Gets the canonical nonlocalized name of the Visual Studio settings category.</summary>
			<returns>The canonical nonlocalized name of the Visual Studio settings category.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideProfileAttribute.CategoryResourceID">
			<summary>Gets the name resource ID for a Visual Studio settings category.</summary>
			<returns>The localized name resource ID of the Visual Studio settings category.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideProfileAttribute.DescriptionResourceID">
			<summary>Gets the localized resource ID of the description of this page of the profile.</summary>
			<returns>The localized resource ID of the description of this page of the profile.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideProfileAttribute.GroupName">
			<summary>Gets the nonlocalized name of this group.</summary>
			<returns>The nonlocalized name of this group.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideProfileAttribute.GroupResourceID">
			<summary>Gets or sets the localized resource ID of the group to which this page belongs.</summary>
			<returns>The localized resource ID of the group to which this page belongs.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideProfileAttribute.IsToolsOptionPage">
			<summary>Gets whether this is also a Tools Options page.</summary>
			<returns>true if this is also a Tools Options page, otherwise false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideProfileAttribute.ObjectName">
			<summary>Gets the canonical nonlocalized name of this page in the profile.</summary>
			<returns>The canonical, nonlocalized name of the page.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideProfileAttribute.ObjectNameResourceID">
			<summary>Gets the localized resource ID of the name of this page in the profile.</summary>
			<returns>The localized resource ID of the name of this page in the profile.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideProfileAttribute.ObjectType">
			<summary>Gets the type of the page.</summary>
			<returns>A <see cref="T:System.Type"></see> of the page.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideProfileAttribute.ResourcePackageGuid">
			<summary>Gets or sets the GUID of a package providing the resource strings.</summary>
			<returns>The GUID of a package providing the resource strings.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute">
			<summary>ProvideProjectFactoryAttribute declares that a package provides a project factory.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.#ctor(System.Type,System.String,System.String,System.String,System.String,System.String)">
			<summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute"></see>.</summary>
			<param name="factoryType">The type of factory the VSPackage offers.</param>
			<param name="defaultProjectExtension">The default project extension.</param>
			<param name="possibleProjectExtensions">The possible project extensions supported by this project factory.</param>
			<param name="name">The name of the project.</param>
			<param name="projectTemplatesDirectory">The directory containing this project factory’s templates.</param>
			<param name="displayProjectFileExtensionsResourceID">The resource ID of the project file extensions.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Registers this attribute.</summary>
			<param name="Context"><see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext"></see>. Contains the location where the registration information should be placed, the type being registered, and path information.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Removes the key for this attribute from the registry.</summary>
			<param name="context"><see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext"></see>. Contains the location where the registration information should be placed, the type being registered, and path information.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.DefaultProjectExtension">
			<summary>Gets the default extension of the project file.</summary>
			<returns>The default project extension.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.DisplayProjectFileExtensions">
			<summary>Gets the resource ID for project file extensions.</summary>
			<returns>The resource ID for project file extensions.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.DisplayProjectTypeVsTemplate">
			<summary>Gets or sets the Visual Studio template for the project.</summary>
			<returns>The Visual Studio template for the project.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.FactoryType">
			<summary>Gets the type of the project factory.</summary>
			<returns>The type of the project factory.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.FolderGuid">
			<summary>Gets or sets the GUID of the folder for this type of project.</summary>
			<returns>The GUID of the folder for this type of project.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.LanguageVsTemplate">
			<summary>Gets and sets the Visual Studio language template.</summary>
			<returns>The Visual Studio language template.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.Name">
			<summary>Gets the name of the type of project.</summary>
			<returns>The project node name.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.NewProjectRequireNewFolderVsTemplate">
			<summary>Gets or sets whether this type of project requires a Visual Studio template that creates a new folder.</summary>
			<returns>true if this type of project requires a Visual Studio template that creates a new folder, otherwise false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.PossibleProjectExtensions">
			<summary>Gets the set of possible project extensions.</summary>
			<returns>The set of possible project extensions.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.ProjectSubTypeVsTemplate">
			<summary>Gets or sets the Visual Studio template for the project subtype.</summary>
			<returns>The Visual Studio template for the project subtype.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.ProjectTemplatesDirectory">
			<summary>Gets the project templates directory.</summary>
			<returns>The path to the directory where the project templates are located.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.ShowOnlySpecifiedTemplatesVsTemplate">
			<summary>Gets or sets the Visual Studio template to be shown in the New Project dialog.</summary>
			<returns>The Visual Studio template.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.SortPriority">
			<summary>Gets or sets the order in which projects are displayed in the New Project dialog.</summary>
			<returns>The sort priority for the New Project dialog.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.TemplateGroupIDsVsTemplate">
			<summary>Gets or sets the Visual Studio template's group ID.</summary>
			<returns>The template's group ID.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.TemplateIDsVsTemplate">
			<summary>Gets or sets the Visual Studio template ID.</summary>
			<returns>The template ID.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.ProvideProjectItemAttribute">
			<summary>This attribute registers items to be included in the Add New Item dialog for the specified project type. It is placed on a VSPackage.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideProjectItemAttribute.#ctor(System.Object,System.String,System.String,System.Int32)">
			<summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.ProvideProjectItemAttribute"></see> for the item.</summary>
			<param name="itemCategoryName">The display name of the type of item.</param>
			<param name="templatesDir">The directory in which the templates for this project type can be found.</param>
			<param name="priority">The priority of this type (for sorting purposes).</param>
			<param name="projectFactoryType">The type of project factory. This can be a <see cref="T:System.Type"></see> , a GUID, or the string form of the GUID.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideProjectItemAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Registers this item type.</summary>
			<param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext"></see>  that describes the location and values of the registry key.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideProjectItemAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Removes the registry key for this item type.</summary>
			<param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext"></see>  that describes the location and values of the registry key.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideProjectItemAttribute.ItemType">
			<summary>Gets the name of this type of item.</summary>
			<returns>The name of this type of item.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideProjectItemAttribute.Priority">
			<summary>Gets the sort priority of this type.</summary>
			<returns>The sort priority of this type.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideProjectItemAttribute.ProjectFactoryType">
			<summary>Gets the GUID of the type of project factory.</summary>
			<returns>The GUID of the type of project factory.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideProjectItemAttribute.TemplateDir">
			<summary>Gets the directory in which the templates for this project type are found.</summary>
			<returns>The directory in which the templates for this project type are found.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.ProvideServiceAttribute">
			<summary>This attribute indicates that the package proffers a service when applied to a subclass of <see cref="T:Microsoft.VisualStudio.Shell.Package"></see> or a class that implements <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsPackage"></see>.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideServiceAttribute.#ctor(System.Object)">
			<summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.ProvideServiceAttribute"></see>.</summary>
			<param name="serviceType">The type of the service.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideServiceAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Registers this service.</summary>
			<param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext"></see> that describes the location and values of the registry key.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideServiceAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Removes the registry key for this service.</summary>
			<param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext"></see> that describes the location and values of the registry key.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideServiceAttribute.Service">
			<summary>Gets the type of the service.</summary>
			<returns>The type of the service.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideServiceAttribute.ServiceName">
			<summary>Gets or sets the name of the service.</summary>
			<returns>The name of the service.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideServiceAttribute.ServiceType">
			<summary>Gets the GUID of the service type.</summary>
			<returns>The GUID of the service type.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.ProvideToolboxFormatAttribute">
			<summary>Apply this attribute to classes implementing VSPackages to declare that the VSPackage provides Toolbox items with the specified clipboard format and to enable drag-and-drop support in the Visual StudioToolbox.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideToolboxFormatAttribute.#ctor(System.String)">
			<summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.ProvideToolboxFormatAttribute"></see> for the specified format.</summary>
			<param name="format">The name of a supported format.</param>
			<exception cref="T:System.ArgumentNullException">Thrown if the format argument is null.</exception>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideToolboxFormatAttribute.Format">
			<summary>Gets the name of a supported clipboard format.</summary>
			<returns>The name of the clipboard format.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.ProvideToolboxItemConfigurationAttribute">
			<summary>Registers a VSPackage as supplying a particular implementation of <see cref="T:Microsoft.VisualStudio.Shell.IConfigureToolboxItem"></see>. Used in conjunction with <see cref="T:Microsoft.VisualStudio.Shell.ProvideAssemblyFilterAttribute"></see>.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideToolboxItemConfigurationAttribute.#ctor(System.Type)">
			<summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.ProvideToolboxItemConfigurationAttribute"></see>. </summary>
			<param name="objectType">[in] <see cref="T:System.Type"></see>.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideToolboxItemConfigurationAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Registers the toolbox item configuration.</summary>
			<param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext"></see> describing the location and values of the registry key.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideToolboxItemConfigurationAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Removes the registry key.</summary>
			<param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext"></see> describing the location and values of the registry key.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideToolboxItemConfigurationAttribute.ObjectType">
			<summary>Gets the type of the toolbox item configuration.</summary>
			<returns>The type of the toolbox item configuration.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.ProvideToolboxItemsAttribute">
			<summary>Apply this attribute to classes implementing VSPackages to declare if they offer a set of items to the Visual StudioToolbox.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideToolboxItemsAttribute.#ctor(System.Int32)">
			<summary>Creates a new instance of <see cref="T:Microsoft.VisualStudio.Shell.ProvideToolboxItemsAttribute"></see> which indicates if a class implementing a VSPackage is providing Toolbox items.</summary>
			<param name="version">The version of the Toolbox items a VSPackage supplies.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideToolboxItemsAttribute.#ctor(System.Int32,System.Boolean)">
			<summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.ProvideToolboxItemsAttribute"></see> for the specified version.</summary>
			<param name="version">The version of the items.</param>
			<param name="needsCallbackAfterReset">If true, then set the registry key that forces a <see cref="E:Microsoft.VisualStudio.Shell.Package.ToolboxInitialized"></see> event after each toolbox reset.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideToolboxItemsAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Registers a VSPackage as a Toolbox item provider for specified formats when called by an external registration tool such as regpkg.exe. For more information, see How to: Register Managed VSPackages.</summary>
			<param name="context">A registration context provided by an external registration tool. The context is used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideToolboxItemsAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Reverses the changes that the <see cref="M:Microsoft.VisualStudio.Shell.ProvideToolboxItemsAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)"></see> method had applied to the registry.</summary>
			<param name="context">A registration context provided by an external registration tool. The context is used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideToolboxItemsAttribute.NeedsCallBackAfterReset">
			<summary>Gets or sets whether the <see cref="E:Microsoft.VisualStudio.Shell.Package.ToolboxInitialized"></see> event should be raised after each toolbox reset.</summary>
			<returns>true if the <see cref="E:Microsoft.VisualStudio.Shell.Package.ToolboxInitialized"></see> event should be raised after each toolbox reset, otherwise false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideToolboxItemsAttribute.Version">
			<summary>Property returning the version of Toolbox items a VSPackage provides.</summary>
			<returns>An integer value containing the version number of the Toolbox items a VSPackage supports.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.ProvideToolboxPageAttribute">
			<summary>Registers a VSPackage as providing one or more dialog pages in the Customize Toolbox dialog page of the Visual Studio IDE.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideToolboxPageAttribute.#ctor(System.Type,System.Int16)">
			<summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.ProvideToolboxPageAttribute"></see>, using the type of the class implementing the Customize Toolbox dialog page, and a resource ID.</summary>
			<param name="pageType">[in] The <see cref="T:System.Type"></see> of the class implementing the Customize Toolbox dialog page. This type must derive from the <see cref="T:Microsoft.VisualStudio.Shell.DialogPage"></see> class.</param>
			<param name="nameResourceID">[in] The native resource ID in a VSPackage's satellite dll containing the name for the tab hosting this Customize Toolbox dialog page.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideToolboxPageAttribute.#ctor(System.Type,System.Int16,System.Int16)">
			<summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.ProvideToolboxPageAttribute"></see>, using the type of the class implementing the Customize Toolbox dialog page, a resource ID, and a page order.</summary>
			<param name="pageOrder">[in] The Customize Toolbox dialog page placement in the pages of the Visual StudioCustomize Toolbox Dialog. A value of 0 indicates that no order is requested. </param>
			<param name="pageType">[in] The type of the class implementing the Customize Toolbox dialog page. This type must derive from the <see cref="T:Microsoft.VisualStudio.Shell.DialogPage"></see> class.</param>
			<param name="nameResourceID">[in] The native resource ID in a VSPackage's satellite dll containing the name for the tab of hosting this Customize Toolbox dialog page.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideToolboxPageAttribute.#ctor(System.Type,System.Int16,System.Int16,System.String)">
			<summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.ProvideToolboxPageAttribute"></see>, using the <see cref="T:System.Type"></see> of the class implementing the Customize Toolbox dialog page, a resource ID, a page order, and a help string.</summary>
			<param name="pageOrder">[in] The Customize Toolbox dialog page placement in the pages of the Visual StudioCustomize Toolbox Dialog box. A value of zero indicates that no order is requested. </param>
			<param name="pageType">[in] The type of the class implementing the Customize Toolbox dialog page. This type must derive from the <see cref="T:Microsoft.VisualStudio.Shell.DialogPage"></see> class.</param>
			<param name="helpKeyword">[in] A help keyword used by the help system to find the correct help topic information.</param>
			<param name="nameResourceID">[in] The native resource ID in a VSPackage's satellite dll containing the name for the tab of hosting this Customize Toolbox dialog page.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideToolboxPageAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Registers the toolbox page.</summary>
			<param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext"></see> describing the location and values of the registry key.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideToolboxPageAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Removes the toolbox page registry key.</summary>
			<param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext"></see> describing the location and values of the registry key.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideToolboxPageAttribute.HelpKeyword">
			<summary>Gets a help keyword associated with the Customize Toolbox dialog page.</summary>
			<returns>The help keyword used to obtain information about the Customize Toolbox dialog page.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideToolboxPageAttribute.PageOrder">
			<summary>Gets the page order requested for the Customize Toolbox dialog page</summary>
			<returns>The page order requested for the Customize Toolbox dialog page.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideToolboxPageAttribute.TypeId">
			<summary>Gets the instance of the class implementing the Customize Toolbox dialog page.</summary>
			<returns>The current instance of the class implementing the Customize Toolbox dialog page.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.ProvideToolWindowAttribute">
			<summary>Notifies Visual Studio that a VSPackage owns a tool window.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideToolWindowAttribute.#ctor(System.Type)">
			<summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.ProvideToolWindowAttribute"></see>.</summary>
			<param name="toolType">The type of the tool window.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideToolWindowAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Registers the tool window.</summary>
			<param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext"></see> describing the location and values of the registry key.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideToolWindowAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Removes the registry key for the tool window.</summary>
			<param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext"></see> describing the location and values of the registry key.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideToolWindowAttribute.Height">
			<summary>Gets or sets the default height of the tool window.</summary>
			<returns>The height of the tool window.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideToolWindowAttribute.MultiInstances">
			<summary>Determines whether multiple instances of the tool window are allowed.</summary>
			<returns>true if multiple instances are allowed, otherwise false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideToolWindowAttribute.Orientation">
			<summary>Gets or sets the default orientation for the tool window relative to the window specified by the Window property.</summary>
			<returns><see cref="T:Microsoft.VisualStudio.Shell.ToolWindowOrientation"></see>.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideToolWindowAttribute.PositionX">
			<summary>Gets or sets the default horizontal value of the top left corner of the tool window.</summary>
			<returns>The horizontal value of the top left corner of the tool window.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideToolWindowAttribute.PositionY">
			<summary>Gets or sets the vertical value of the top left corner of the tool window.</summary>
			<returns>The vertical value of the top left corner of the tool window.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideToolWindowAttribute.Style">
			<summary>Gets or sets the default docking style for the tool window.</summary>
			<returns><see cref="T:Microsoft.VisualStudio.Shell.VsDockStyle"></see>.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideToolWindowAttribute.ToolType">
			<summary>Gets or sets the type of the tool window.</summary>
			<returns>The type of the tool window.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideToolWindowAttribute.Transient">
			<summary>Gets or sets whether the tool window should not be reopened when the IDE restarts.</summary>
			<returns>false if the tool window should be displayed when the IDE restarts if it was displayed when the IDE closed, otherwise true.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideToolWindowAttribute.Width">
			<summary>Gets or sets the default width of the tool window.</summary>
			<returns>The default width of the tool window.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideToolWindowAttribute.Window">
			<summary>Gets or sets the GUID of the default window on which the tool window should be docked.</summary>
			<returns>The GUID of the default window on which the tool window should be docked.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.ProvideToolWindowVisibilityAttribute">
			<summary>Maps a tool window to one or more UI contexts, so that the window is displayed when the user switches to one of those contexts and is hidden when the user switches away from one of the contexts.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideToolWindowVisibilityAttribute.#ctor(System.Object,System.String)">
			<summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.ProvideToolWindowVisibilityAttribute"></see> for the specified type of the tool window and a GUID to associate with its visibility.</summary>
			<param name="toolWindow">The types of the tool window. This can be the type, the GUID, or the string value of the GUID.</param>
			<param name="commandUIGuid">The GUID of the tool window to which the automatic visibility behavior should be applied.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideToolWindowVisibilityAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Registers the tool window visibility.</summary>
			<param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext"></see> that describes the location and values of the registry key.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideToolWindowVisibilityAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Removes the registry key.</summary>
			<param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext"></see> that describes the location and values of the registry key.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideToolWindowVisibilityAttribute.CommandUIGuid">
			<summary>Gets the GUID of a command associated with showing or hiding the tool window.</summary>
			<returns>The GUID of a command associated with showing or hiding the tool window.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideToolWindowVisibilityAttribute.Name">
			<summary>Gets or sets the name of the window.</summary>
			<returns>The name of the tool window.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.ProvideViewAttribute">
			<summary>This attribute declares that an editor factory class offers a particular logical view.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideViewAttribute.#ctor(Microsoft.VisualStudio.Shell.LogicalView,System.String)">
			<summary>Creates a new attribute.</summary>
			<param name="logicalView">An enumeration of the kinds of logical views available.</param>
			<param name="physicalView">The GUID of the physical view. This can be null to indicate the default physical view.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideViewAttribute.LogicalView">
			<summary>Gets the logical view in this attribute.</summary>
			<returns><see cref="T:Microsoft.VisualStudio.Shell.LogicalView"></see>.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideViewAttribute.PhysicalView">
			<summary>Returns the physical view that is mapped to the logical view.</summary>
			<returns><see cref="P:Microsoft.VisualStudio.Shell.ProvideViewAttribute.PhysicalView"></see>.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.RegisterAutoLoadAttribute">
			<summary>Registers the VSPackage as an extender that is automatically loaded in response to a particular context GUID. This class cannot be inherited.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegisterAutoLoadAttribute.#ctor(System.String)">
			<summary>Creates a new RegisterAutoLoadAttribute object and saves the GUID of the package that initiated package loading.</summary>
			<param name="cmdUiContextGuid">Context GUID that triggers the loading of the VSPackage</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegisterAutoLoadAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Provides registration information about a VSPackage when called by an external registration tool such as RegPkg.exe.</summary>
			<param name="context">A registration context provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegisterAutoLoadAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Removes registration information about a VSPackage when called by an external registration tool such as RegPkg.exe.</summary>
			<param name="context">A registration context provided by an external registration tool. The context can be used to remove registry keys, log registration activity, and obtain information about the component being registered.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.RegisterAutoLoadAttribute.LoadGuid">
			<summary>Returns the context GUID that triggers package load.</summary>
			<returns>The context GUID that triggers package load.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.RegisterEditorExtensionAttribute">
			<summary>See <see cref="T:Microsoft.VisualStudio.Shell.ProvideEditorExtensionAttribute"></see>. Registers a file extension with a given editor factory. This class cannot be inherited.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegisterEditorExtensionAttribute.#ctor(System.Object,System.String,System.Int32)">
			<summary>Initializes a new <see cref="T:Microsoft.VisualStudio.Shell.RegisterEditorExtensionAttribute"></see> for the supplied factory type and extension.</summary>
			<param name="factoryType">One of following types:The type of the editor factory expressed as a string.The GUID of the editor factory.The type of the editor factory.</param>
			<param name="priority">The priority of this editor factory. Editors with higher priority numbers are given a chance to read a file first. Upon failure, the next editor in priority order is used.</param>
			<param name="extension">The file extension to associate with the editor factory. This extension should include the prefix “.”.</param>
			<exception cref="T:System.ArgumentException">This method throws an <see cref="T:System.ArgumentException"></see> if:The factory GUID string cannot be converted to a GUID object. Extension does not begin with a “.”.</exception>
			<exception cref="T:System.ArgumentNullException">This method throws an <see cref="T:System.ArgumentNullException"></see> if:Factory GUID value passed in factoryType is null.extension is null.</exception>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegisterEditorExtensionAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Registers the editor extension.</summary>
			<param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext"></see> that describes the location and values of a registry key.</param>
			<exception cref="T:System.ArgumentNullException">This method throws an <see cref="T:System.ArgumentNullException"></see> if context is null.</exception>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegisterEditorExtensionAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Removes the editor extension registry key.</summary>
			<param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext"></see> that describes the location and values of a registry key.</param>
			<exception cref="T:System.ArgumentNullException">This method throws an <see cref="T:System.ArgumentNullException"></see> if the context argument is null.</exception>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.RegisterEditorExtensionAttribute.EditorFactoryNotify">
			<summary>Gets or sets whether or not to create the EditorFactoryNotify registry key on registration.</summary>
			<returns>true if the EditorFactoryNotify registry key should be created, otherwise false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.RegisterEditorExtensionAttribute.Extension">
			<summary>Gets the file extension of the file.</summary>
			<returns>The file extension for this editor.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.RegisterEditorExtensionAttribute.Factory">
			<summary>Gets the editor factory GUID.</summary>
			<returns>The GUID of the editor factory.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.RegisterEditorExtensionAttribute.NameResourceID">
			<summary>Gets or sets the name resource ID.</summary>
			<returns>The name resource ID.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.RegisterEditorExtensionAttribute.Priority">
			<summary>Gets the priority of this extension registration.</summary>
			<returns>The priority for this editor for its file extension.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.RegisterEditorExtensionAttribute.ProjectGuid">
			<summary>Gets or sets the project GUID.</summary>
			<returns>The project GUID.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.RegisterEditorExtensionAttribute.TemplateDir">
			<summary>Gets or sets the template directory.</summary>
			<returns>The template directory.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.RegisterEditorLogicalViewAttribute">
			<summary>Adds a logical view to the editor created by an editor factory. This attribute has been deprecated. Please use <see cref="T:Microsoft.VisualStudio.Shell.ProvideEditorLogicalViewAttribute"></see> instead.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegisterEditorLogicalViewAttribute.#ctor(System.Object,System.String)">
			<summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.RegisterEditorLogicalViewAttribute"></see>.</summary>
			<param name="factoryType">The type of factory.  This may be a Type, a GUID or a string representation of a GUID</param>
			<param name="logicalViewGuid">The GUID of the logical view to register.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegisterEditorLogicalViewAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Registers logical view.</summary>
			<param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext"></see> that describes the location and values of the registry key.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegisterEditorLogicalViewAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Removes the editor logical view registry key.</summary>
			<param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext"></see> that describes the location and values of the registry key.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.RegisterEditorLogicalViewAttribute.FactoryType">
			<summary>Gets the GUID of the factory type.</summary>
			<returns>The GUID of the factory type.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.RegisterEditorLogicalViewAttribute.LogicalView">
			<summary>Gets the GUID of the logical view.</summary>
			<returns>The GUID of the logical view.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.RegisterExtenderAttribute">
			<summary>Registers an extender with Visual Studio.  This class cannot be inherited. This class is obsolete. Please use ProvideExtenderAttribute instead.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegisterExtenderAttribute.#ctor(System.String,System.String,System.String)">
			<summary>This constructor creates a new <see cref="T:Microsoft.VisualStudio.Shell.RegisterExtenderAttribute"></see> object.</summary>
			<param name="extendeeCatId">The CATID of the extendee.</param>
			<param name="extenderGuid">The GUID of the extender.</param>
			<param name="extenderName">The name of the extender.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegisterExtenderAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Provides registration information about a VSPackage when called by an external registration tool such as RegPkg.exe.</summary>
			<param name="context">A registration context provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegisterExtenderAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Removes registration information about a VSPackage when called by an external registration tool such as RegPkg.exe.</summary>
			<param name="context">A registration context provided by an external registration tool. The context can be used to remove registry keys, log registration activity, and obtain information about the component being registered.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.RegisterExtenderAttribute.ExtendeeCatId">
			<summary>Gets the CATID of the object to be extended.</summary>
			<returns>The CATID of the object to be extended.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.RegisterExtenderAttribute.Extender">
			<summary>Gets the GUID of the extender.</summary>
			<returns>The GUID of the extender.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.RegisterExtenderAttribute.ExtenderName">
			<summary>Gets the name of the extender.</summary>
			<returns>The name of the extender.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.RegisterLanguageExtensionAttribute">
			<summary>Registers a file extension with a given language service by applying the attribute to a <see cref="T:Microsoft.VisualStudio.Shell.Package"></see>-derived class or class that implements <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsPackage"></see> when registered using a registration tool like regpkg.exe. For more information, see How to: Register Managed VSPackages.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegisterLanguageExtensionAttribute.#ctor(System.String,System.String)">
			<summary>Initializes a new instance of RegisterLanguageExtensionAttribute.</summary>
			<param name="languageServiceGuid">The GUID of language service class that is derived from <see cref="T:Microsoft.VisualStudio.Package.LanguageService"></see> as a string.</param>
			<param name="extension">The file extension associated with the language service. Include a "." in the value of extension.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegisterLanguageExtensionAttribute.#ctor(System.Type,System.String)">
			<summary>Initializes a new instance of RegisterLanguageExtensionAttribute and initializes the values of the language service and file extension that it associates. </summary>
			<param name="languageService">The GUID of language service class that is derived from <see cref="T:Microsoft.VisualStudio.Package.LanguageService"></see> as a string.</param>
			<param name="extension">The file extension associated with the language service. Include a "." in the value of extension.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegisterLanguageExtensionAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Registers this attribute with the given context.</summary>
			<param name="context">A registration context provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegisterLanguageExtensionAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Removes the registration information about a VSPackage when called by an external registration tool such as regpkg.exe. For more information, see How to: Register Managed VSPackages.</summary>
			<param name="context">A registration context provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.RegisterLanguageExtensionAttribute.Extension">
			<summary>Gets the associated file extension.</summary>
			<returns>The associated file extension.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.RegisterLanguageExtensionAttribute.LanguageService">
			<summary>Gets the GUID of the language service.</summary>
			<returns>The GUID of the language service.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.RegisterLoadKeyAttribute">
			<summary>Registers a Package load key with the VSPackage. This class cannot be inherited.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegisterLoadKeyAttribute.#ctor(System.String,System.String,System.String,System.String,System.Int16)">
			<summary>Creates a new <see cref="T:Microsoft.VisualStudio.Shell.RegisterLoadKeyAttribute"></see>.</summary>
			<param name="minimumEdition">The minimum edition of Visual Studio .NET needed to load the VSPackage.</param>
			<param name="productName">The name of the VSPackage.</param>
			<param name="productVersion">The version number of the VSPackage.</param>
			<param name="companyName">The name of your company.</param>
			<param name="resourceId">The resource ID for the VSPackage load key.</param>
			<exception cref="T:System.ArgumentNullException">minimumEdition, productVersion, productName or companyName are null.</exception>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegisterLoadKeyAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Provides registration information about a VSPackage when called by an external registration tool such as regpkg.exe. For more information, see How to: Register Managed VSPackages.</summary>
			<param name="context">A registration context provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegisterLoadKeyAttribute.RegKeyName(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Retrieves the registry key name for the load key information of the VSPackage.</summary>
			<returns>The Registry Key name for the load key information of the VSPackage.</returns>
			<param name="context">A registration context provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegisterLoadKeyAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Removes the registration information about a VSPackage when called by an external registration tool such as regpkg.exe. For more information, see How to: Register Managed VSPackages.</summary>
			<param name="context">A registration context provided by an external registration tool. The context can be used to remove registry keys, log registration activity, and obtain information about the component being registered.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.RegisterLoadKeyAttribute.CompanyName">
			<summary>The CompanyName property returns a string containing the name of your company.</summary>
			<returns>The name of your company.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.RegisterLoadKeyAttribute.MinimumEdition">
			<summary>The MinimumEdition property returns a string containing the minimum edition of Visual Studio needed to load your VSPackage.</summary>
			<returns>The minimum edition of Visual Studio needed to load your VSPackage.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.RegisterLoadKeyAttribute.ProductName">
			<summary>The ProductName property returns a string containing the name of your VSPackage.</summary>
			<returns>The name of your VSPackage.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.RegisterLoadKeyAttribute.ProductVersion">
			<summary>The ProductVersion attribute returns a string containing the version number of your VSPackage.</summary>
			<returns>The version number of your VSPackage.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.RegisterLoadKeyAttribute.ResourceId">
			<summary>Gets resource ID for the Package Load Key.</summary>
			<returns>The resource ID for the Package Load Key.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.RegisterProjectItemAttribute">
			<summary><see cref="T:Microsoft.VisualStudio.Shell.RegisterProjectItemAttribute"></see> has been deprecated. Please use <see cref="T:Microsoft.VisualStudio.Shell.ProvideProjectItemAttribute"></see> instead</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegisterProjectItemAttribute.#ctor(System.Object,System.String,System.String,System.Int32)">
			<summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.RegisterProjectItemAttribute"></see>.</summary>
			<param name="itemCategoryName">The name of the item category.</param>
			<param name="templatesDir">The template directory for this project type.</param>
			<param name="priority">The priority of the project type. </param>
			<param name="projectFactoryType">The type of the project factory.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegisterProjectItemAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Registers this item type.</summary>
			<param name="context"> A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext"></see>  that describes the location and values of the registry key.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegisterProjectItemAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Removes the registry key for this item type.</summary>
			<param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext"></see>  that describes the location and values of the registry key.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.RegisterProjectItemAttribute.ItemType">
			<summary>Gets the name of this type of item. </summary>
			<returns>The name of this type of item.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.RegisterProjectItemAttribute.Priority">
			<summary>Gets the sort priority of this type.</summary>
			<returns>The sort priority of this type.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.RegisterProjectItemAttribute.ProjectFactoryType">
			<summary>Gets the GUID of the type of project factory.</summary>
			<returns>The GUID of the type of project factory.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.RegisterProjectItemAttribute.TemplateDir">
			<summary>Gets the directory in which the templates for this project type are found.</summary>
			<returns>The directory in which the templates for this project type are found.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.RegistrationAttribute">
			<summary>An abstract class for VSPackage registration. The RegistrationAttribute class allows new registration information to be added without changing the registration tools.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.#ctor">
			<summary>Initializes a new instance of the class.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Provides registration information about a VSPackage when called by an external registration tool such as regpkg.exe. For more information, see How to: Register Managed VSPackages.</summary>
			<param name="context">A registration context provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Removes registration information about a VSPackage when called by an external registration tool such as regpkg.exe. For more information, see How to: Register Managed VSPackages. Any class deriving from the RegistrationAttribute class must implement this method.</summary>
			<param name="context">A registration context provided by an external registration tool. The context can be used to remove registry keys, log registration activity, and obtain information about the component being registered.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.RegistrationAttribute.TypeId">
			<summary>Gets the current instance of this attribute.</summary>
			<returns>The current instance of this attribute.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.Key">
			<summary>Provides an abstract class that represents a registration key.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.Key.#ctor">
			<summary>Creates a new <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.Key"></see> object.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.Key.Close">
			<summary>Closes a key after writing is complete.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.Key.CreateSubkey(System.String)">
			<summary>Creates a new registration key. The new key is a subkey of the current Key.</summary>
			<returns>The newly created Key.</returns>
			<param name="name">The name of the new key. This name is relative to the current key.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.Key.SetValue(System.String,System.Object)">
			<summary>Adds a value to the current registration Key.</summary>
			<param name="valueName">The name of the value to set. If valueName is null or an empty string, SetValue sets the default value for the current Key.</param>
			<param name="value">An object to store in the value. The object cannot be null. If the object is a numeric type that can be converted to an integer, it is stored as a DWORD registry encoding. Otherwise it is stored as a string.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.Key.System.IDisposable.Dispose">
			<summary>Disposes the object and its resources.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext">
			<summary>An abstract base class for objects providing context information from an external source to a registration attribute.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext.#ctor">
			<summary>Creates a new RegistrationAttribute.RegistrationContext object.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext.CreateKey(System.String)">
			<summary>Creates a new registration key by name.</summary>
			<returns>A new <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.Key"></see> object.</returns>
			<param name="name">The name of the key to create.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext.EscapePath(System.String)">
			<summary>Reformats a string as needed by the registration tool.</summary>
			<returns>The reformatted path string.</returns>
			<param name="str">The path string to reformat.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext.RemoveKey(System.String)">
			<summary>Removes an existing registration key.</summary>
			<param name="name">The name of the key to remove.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext.RemoveKeyIfEmpty(System.String)">
			<summary>Removes the key of the specified name if it has no child key and no value.</summary>
			<param name="name">The name of the key to remove.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext.RemoveValue(System.String,System.String)">
			<summary>Removes a value from a registration key.</summary>
			<param name="valuename">The name of the value to remove.</param>
			<param name="keyname">The name of the key that contains the value to be removed.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext.CodeBase">
			<summary>Gets the path and filename of the object being registered.</summary>
			<returns>The path and filename of the object being registered.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext.ComponentPath">
			<summary>Gets the path to the component that is being registered.</summary>
			<returns>The path to the component being registered.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext.ComponentType">
			<summary>Gets the type of component being registered.</summary>
			<returns>The type of component being registered.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext.InprocServerPath">
			<summary>Gets the path to the in-process server DLL.</summary>
			<returns>The path to the in-process server DLL.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext.Log">
			<summary>Gets a <see cref="T:System.IO.TextWriter"></see> object that can be used to log events during registration.</summary>
			<returns>A <see cref="T:System.IO.TextWriter"></see> object.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext.RegistrationMethod">
			<summary>Gets a value that specifies how the assembly should be registered/located.</summary>
			<returns>Specifies how the assembly should be registered/located.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.RegistrationMethod">
			<summary>Specifies how the assembly should be registered/located.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.RegistrationMethod.Assembly">
			<summary>Indicates that the assembly should be in the GAC or in PrivateAssemblies.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.RegistrationMethod.CodeBase">
			<summary>Indicates that the path to the assembly should be stored in the registry and used to locate the assembly at runtime.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.RegistrationMethod.Default">
			<summary>Indicates that the registration method should only be used by tools.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.RunningDocumentInfo">
			<summary>Represents information about a document in the <see cref="T:Microsoft.VisualStudio.Shell.RunningDocumentTable"></see>. It includes all the information returned by <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.GetDocumentInfo(System.UInt32,System.UInt32@,System.UInt32@,System.UInt32@,System.String@,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@,System.UInt32@,System.IntPtr@)"></see>.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.RunningDocumentInfo.DocData">
			<summary>The document object in the Running Document Table (RDT).</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.RunningDocumentInfo.EditLocks">
			<summary>The number of edit locks held on the document.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.RunningDocumentInfo.Flags">
			<summary>The <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS"></see> set on the document.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.RunningDocumentInfo.Hierarchy">
			<summary>The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy"></see> interface of the hierarchy node that owns the document.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.RunningDocumentInfo.ItemId">
			<summary>The item ID of the node that holds the document.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.RunningDocumentInfo.Moniker">
			<summary>The absolute path of the document.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.RunningDocumentInfo.ReadLocks">
			<summary>The number of read locks held on the document.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.RunningDocumentTable">
			<summary>Provides access to the Running Document Table (RDT) that tracks all currently opened documents in Visual Studio.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RunningDocumentTable.#ctor(System.IServiceProvider)">
			<summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.RunningDocumentTable"></see> class.</summary>
			<param name="site">[in] An <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider"></see> object used to access services. This cannot be a null value.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RunningDocumentTable.Advise(Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents)">
			<summary>Enables the client to receive events about changes to the Running Document Table (RDT).</summary>
			<returns>A cookie associated with the given <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents"></see> object. If an error occurs, this method throws an exception.</returns>
			<param name="sink">[in] An <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents"></see> object representing an entity to be called for various running document table events.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RunningDocumentTable.FindDocument(System.String)">
			<summary>Gets an object from the Running Document Table (RDT) that represents the document specified by the given path.</summary>
			<returns>An object that can be cast to an appropriate interface to access the document (see Remarks for details), or null if the document is not registered with Visual Studio.</returns>
			<param name="moniker">[in] Path to the desired document.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RunningDocumentTable.FindDocument(System.String,System.UInt32@)">
			<summary>Gets a cookie from the Running Document Table (RDT) that represents the document specified by the given path.</summary>
			<returns>An object that can be cast to an appropriate interface to access the document (see Remarks for details), or null if the document is not registered with Visual Studio.</returns>
			<param name="moniker">[in] Path to the desired document.</param>
			<param name="docCookie">[out] Returns the unique value that represents the requested document in the RDT.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RunningDocumentTable.FindDocument(System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@,System.UInt32@,System.UInt32@)">
			<summary>Gets an object, cookie, and owning project type from the Running Document Table (RDT) for the document specified by the given path.</summary>
			<returns>An object that can be cast to an appropriate interface to access the document (see Remarks for details). If a null value is returned, the document is not registered with Visual Studio.</returns>
			<param name="itemid">[out] Returns the ID of the document in the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy"></see> object. </param>
			<param name="hierarchy">[out] Returns an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy"></see> object that represents the project that owns the requested document.</param>
			<param name="moniker">[in] Path to the desired document.</param>
			<param name="docCookie">[out] Returns the unique value that represents the requested document in the RDT.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RunningDocumentTable.GetDocumentInfo(System.UInt32)">
			<summary>Gets information about a document registered in the Running Document Table, given the identifier of the document. </summary>
			<returns>The <see cref="T:Microsoft.VisualStudio.Shell.RunningDocumentInfo"></see> for the specified document.</returns>
			<param name="docCookie">The identifier of the document data object in the Running Document Table.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RunningDocumentTable.GetEnumerator">
			<summary>Gets an enumerator of the documents in the Running Document Table.</summary>
			<returns>An <see cref="T:System.Collections.IEnumerator"></see> of type <see cref="T:Microsoft.VisualStudio.Shell.RunningDocumentInfo"></see>.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RunningDocumentTable.GetHierarchyItem(System.String)">
			<summary>Gets the project that owns the specified document.</summary>
			<returns><see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy"></see>, otherwise null.</returns>
			<param name="moniker">[in] Path to the desired document.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RunningDocumentTable.GetRunningDocumentContents(System.String)">
			<summary>Uses the Running Document Table (RDT) to obtain the contents of a document given the path to the document.</summary>
			<returns>The contents of the document in a string format, or null if the document is not registered with the RDT.</returns>
			<param name="path">[in] Path to the desired document.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RunningDocumentTable.GetRunningDocumentContents(System.UInt32)">
			<summary>Uses the Running Document Table (RDT) to obtain the contents of a document given the path to the document.</summary>
			<returns>The contents of the document in a string format, or null if the document is not registered with the RDT.</returns>
			<param name="docCookie">[in] The unique value that represents the requested document in the RDT.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RunningDocumentTable.LockDocument(Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS,System.UInt32)">
			<summary>Gets a read or edit lock on the specified document.</summary>
			<param name="cookie">The identifier of the document to lock.</param>
			<param name="lockType">Lock values from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS"></see> enumeration.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RunningDocumentTable.RegisterAndLockDocument(Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS,System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.IntPtr)">
			<summary>Creates an entry in the running document table when a document is created or opened. </summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="itemid">The item ID of the node.</param>
			<param name="hierarchy">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy"></see> interface of the hierarchy element that owns the document.</param>
			<param name="mkDocument">The absolute path of the document.</param>
			<param name="lockType">Lock values from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS"></see> enumeration. </param>
			<param name="docData">[out] Returns a pointer to the IUnknown interface of the document data object.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RunningDocumentTable.RenameDocument(System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32)">
			<summary>Renames a document and optionally gives ownership of the document to the specified project.</summary>
			<param name="pIVsHierarchy">[in] An <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy"></see> object representing the project that is to take ownership of the document. Pass the value (IVsHierarchy)-1 to indicate no change in ownership is to take place</param>
			<param name="newName">[in] The full path representing the new name.</param>
			<param name="itemId">[in] This value can be <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_NIL"></see>, <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT"></see>, or <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_SELECTION"></see>. Pass <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_NIL"></see> to indicate no change in ownership is to take place.</param>
			<param name="oldName">[in] The full path representing the original name.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RunningDocumentTable.SaveFileIfDirty(System.String)">
			<summary>Saves the specified file if it has changed since the last save.</summary>
			<returns>The path to which the file was saved. This is either the original path or a new path specified by the user.</returns>
			<param name="fullPath">[in] The full path to the document to be saved.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RunningDocumentTable.System.Collections.IEnumerable.GetEnumerator">
			<summary>Enumerates the documents in the Running Document Table.</summary>
			<returns>An <see cref="T:System.Collections.IEnumerator"></see> of type <see cref="T:Microsoft.VisualStudio.Shell.RunningDocumentInfo"></see>.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RunningDocumentTable.Unadvise(System.UInt32)">
			<summary>Indicates the client is no longer interested in receiving Running Document Table (RDT) events.</summary>
			<param name="cookie">[in] A unique value returned from the <see cref="M:Microsoft.VisualStudio.Shell.RunningDocumentTable.Advise(Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents)"></see> method. See Remarks.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RunningDocumentTable.UnlockDocument(Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS,System.UInt32)">
			<summary>Releases a read or edit lock on the open document. </summary>
			<param name="cookie">The identifier of the document data in the Running Document Table.</param>
			<param name="lockType">Lock values from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS"></see> enumeration.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.SelectionContainer">
			<summary>Provides a unified interface for accessing a set of selected objects.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.SelectionContainer.#ctor">
			<summary>Initializes a new <see cref="T:Microsoft.VisualStudio.Shell.SelectionContainer"></see> object.  The overload provides the ability to restrict user control over the <see cref="P:Microsoft.VisualStudio.Shell.SelectionContainer.SelectableObjects"></see> and <see cref="P:Microsoft.VisualStudio.Shell.SelectionContainer.SelectedObjects"></see> collections.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.SelectionContainer.#ctor(System.Boolean,System.Boolean)">
			<summary>Creates a new <see cref="T:Microsoft.VisualStudio.Shell.SelectionContainer"></see> object with the ability to restrict user control over the <see cref="P:Microsoft.VisualStudio.Shell.SelectionContainer.SelectableObjects"></see> and <see cref="P:Microsoft.VisualStudio.Shell.SelectionContainer.SelectedObjects"></see> collections.</summary>
			<param name="selectableReadOnly">If true, a request to change the <see cref="P:Microsoft.VisualStudio.Shell.SelectionContainer.SelectableObjects"></see> throws a <see cref="T:System.NotSupportedException"></see>. If false, a request to change the <see cref="P:Microsoft.VisualStudio.Shell.SelectionContainer.SelectableObjects"></see> is handled normally.</param>
			<param name="selectedReadOnly">If false, a request to change the <see cref="P:Microsoft.VisualStudio.Shell.SelectionContainer.SelectedObjects"></see> throws a <see cref="T:System.NotSupportedException"></see>. If false, a request to change the <see cref="P:Microsoft.VisualStudio.Shell.SelectionContainer.SelectedObjects"></see> is handled normally.</param>
		</member>
		<member name="E:Microsoft.VisualStudio.Shell.SelectionContainer.SelectedObjectsChanged">
			<summary>Raised when an external object calls the <see cref="M:Microsoft.VisualStudio.Shell.SelectionContainer.Microsoft.VisualStudio.Shell.Interop.ISelectionContainer.SelectObjects(System.UInt32,System.Object[],System.UInt32)"></see> method with the F:Microsoft.VisualStudio.Shell.SelectionContainer.SELECTED flag set. </summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.SelectionContainer.ALL">
			<summary>Refers to all <see cref="P:Microsoft.VisualStudio.Shell.SelectionContainer.SelectableObjects"></see>.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.SelectionContainer.SELECTED">
			<summary>Refers to all <see cref="P:Microsoft.VisualStudio.Shell.SelectionContainer.SelectedObjects"></see>.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.SelectionContainer.ActivateObjects">
			<summary>Overriding this method enables an object to respond when selected.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.SelectionContainer.Microsoft.VisualStudio.Shell.Interop.ISelectionContainer.CountObjects(System.UInt32,System.UInt32@)">
			<summary>Determines the number of objects either those F:Microsoft.VisualStudio.Shell.SelectionContainer.SELECTED or F:Microsoft.VisualStudio.Shell.SelectionContainer.ALL items.</summary>
			<returns>Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see> if the operation is successful.</returns>
			<param name="dwFlags">Use F:Microsoft.VisualStudio.Shell.SelectionContainer.ALL to indicate all members and F:Microsoft.VisualStudio.Shell.SelectionContainer.SELECTED to indicate only those selected.</param>
			<param name="pc">A pointer to the number of items, this value is set by the method call.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.SelectionContainer.Microsoft.VisualStudio.Shell.Interop.ISelectionContainer.GetObjects(System.UInt32,System.UInt32,System.Object[])">
			<summary>Sets cObjects with the number of items <see cref="F:Microsoft.VisualStudio.Shell.SelectionContainer.SELECTED"></see> or <see cref="F:Microsoft.VisualStudio.Shell.SelectionContainer.ALL"></see> items and populates array apUnkObjects with pointers to those objects.</summary>
			<returns>Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see> if the operation is successful.</returns>
			<param name="cObjects">A pointer to the number of items, this value is set by the method call.</param>
			<param name="dwFlags">Use <see cref="F:Microsoft.VisualStudio.Shell.SelectionContainer.ALL"></see> to indicate all members and <see cref="F:Microsoft.VisualStudio.Shell.SelectionContainer.SELECTED"></see> to indicate only those selected.</param>
			<param name="apUnkObjects">An array of size cObjects that contains pointers to the retrieved objects.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.SelectionContainer.Microsoft.VisualStudio.Shell.Interop.ISelectionContainer.SelectObjects(System.UInt32,System.Object[],System.UInt32)">
			<summary>Sets the collection of selectable objects.</summary>
			<returns>Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see> if the operation is successful.</returns>
			<param name="apUnkSelect">The array of objects to be selected.</param>
			<param name="cSelect">The size of the array of selected objects.</param>
			<param name="dwFlags">If this value is true<see cref="M:Microsoft.VisualStudio.Shell.SelectionContainer.ActivateObjects"></see> will be performed on the array of objects.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.SelectionContainer.SelectableObjects">
			<summary>Gets the collection of selectable objects.</summary>
			<returns>Returns a collection of selectable objects.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.SelectionContainer.SelectedObjects">
			<summary>Gets or sets the collection of selected objects.</summary>
			<returns>Returns a collection of selected objects.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.ServiceProvider">
			<summary>Provides a unified service provider for managed VSPackages.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ServiceProvider.#ctor(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
			<summary>Initializes a instance with an existing <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider"></see> interface.</summary>
			<param name="sp">A <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider"></see> interface.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ServiceProvider.#ctor(Microsoft.VisualStudio.OLE.Interop.IServiceProvider,System.Boolean)">
			<summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Shell.ServiceProvider"></see> class with an existing <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider"></see> object and optionally passes all requests to the underlying service provider.</summary>
			<param name="defaultServices">Determines if this service should respond to queries for <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider"></see> and <see cref="T:Microsoft.VisualStudio.OLE.Interop.IObjectWithSite"></see>.</param>
			<param name="sp">An <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider"></see> interface used to resolve services.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ServiceProvider.Dispose">
			<summary>Releases the resources used by the <see cref="T:Microsoft.VisualStudio.Shell.ServiceProvider"></see> object.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ServiceProvider.GetService(System.Guid)">
			<summary>Gets the specified service from the unmanaged service provider.</summary>
			<returns>The requested service, or null if the service could not be located.</returns>
			<param name="guid">The GUID of the service to retrieve.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ServiceProvider.GetService(System.Type)">
			<summary>Gets type-based services from the unmanaged service provider.</summary>
			<returns>The requested service, or null if the service could not be located.</returns>
			<param name="serviceType">The type of service to retrieve. The GUID of this type is used to obtain the service from the native service provider.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ServiceProvider.Microsoft.VisualStudio.OLE.Interop.IObjectWithSite.GetSite(System.Guid@,System.IntPtr@)">
			<summary>Gets the current site object to resolve services.</summary>
			<param name="ppv">The retrieved interface or null.</param>
			<param name="riid">The GUID of the requested interface.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ServiceProvider.Microsoft.VisualStudio.OLE.Interop.IObjectWithSite.SetSite(System.Object)">
			<summary>Sets the site object to resolve services.</summary>
			<param name="pUnkSite">The site to be set.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.ServiceProviderHierarchy">
			<summary>A hierarchical service provider that stores <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider"></see> objects in a sorted collection for an ordered retrieval. When <see cref="M:Microsoft.VisualStudio.Shell.ServiceProviderHierarchy.GetService(System.Type)"></see> is called to retrieve a service, the service providers are queried in a specific order. This is useful when multiple service providers are combined, such as in the <see cref="T:Microsoft.VisualStudio.Shell.WindowPane"></see> implementation.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ServiceProviderHierarchy.#ctor">
			<summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.ServiceProviderHierarchy"></see>.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ServiceProviderHierarchy.GetService(System.Type)">
			<summary>Gets a service of the specified type.</summary>
			<returns>The requested service, or null if the service cannot be found. This service must be cast to the required service type. </returns>
			<param name="serviceType">The type of the service.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.ServiceProviderHierarchyOrder">
			<summary>Provides a recommended service resolution order for common service providers. When multiple service providers are combined in a service provider hierarchy, they are given a numeric ordering.  </summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ServiceProviderHierarchyOrder.#ctor">
			<summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.ServiceProviderHierarchyOrder"></see>.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.ServiceProviderHierarchyOrder.PackageSite">
			<summary>The order for a package service provider.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.ServiceProviderHierarchyOrder.ProjectItemContext">
			<summary>The order for a project item context service provider.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.ServiceProviderHierarchyOrder.WindowPaneSite">
			<summary>The order for a window pane service provider.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.Task">
			<summary>An implementation of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem"></see>, used to modify the appearance and functionality of a task in the task list.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Task.#ctor">
			<summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Task"></see>.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Task.#ctor(System.Exception)">
			<summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Task"></see> for the supplied exception.</summary>
			<param name="error">The <see cref="T:System.Exception"></see> used to create the task.</param>
		</member>
		<member name="E:Microsoft.VisualStudio.Shell.Task.Deleted">
			<summary>Handles <see cref="M:Microsoft.VisualStudio.Shell.Task.OnDeleted(System.EventArgs)"></see> events.</summary>
		</member>
		<member name="E:Microsoft.VisualStudio.Shell.Task.Help">
			<summary>Handles <see cref="M:Microsoft.VisualStudio.Shell.Task.OnHelp(System.EventArgs)"></see> events.</summary>
		</member>
		<member name="E:Microsoft.VisualStudio.Shell.Task.Navigate">
			<summary>Handles <see cref="M:Microsoft.VisualStudio.Shell.Task.OnNavigate(System.EventArgs)"></see> events.</summary>
		</member>
		<member name="E:Microsoft.VisualStudio.Shell.Task.Removed">
			<summary>Handles <see cref="M:Microsoft.VisualStudio.Shell.Task.OnRemoved(System.EventArgs)"></see> events.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.Task.contextNameKeyword">
			<summary>Represents the keyword for the user context. This field is constant.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Task.GetUserContext(Microsoft.VisualStudio.Shell.Interop.IVsUserContext@)">
			<summary>Creates a new user context.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="ppctx">[out] The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUserContext"></see> that has been created.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Task.Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.CanDelete(System.Int32@)">
			<summary>Gets whether or not it is possible to delete the task.</summary>
			<returns><see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK"></see>.</returns>
			<param name="fdelete">[out] Returns true if it is possible to delete the task, otherwise false.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Task.Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.Category(Microsoft.VisualStudio.Shell.Interop.VSTASKCATEGORY[])">
			<summary>Sets the task category.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="cat">An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTASKCATEGORY"></see> objects.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Task.Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.Column(System.Int32@)">
			<summary>Gets the column number of the file associated with the task.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code. </returns>
			<param name="col">[out] Returns the column number.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Task.Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.Document(System.String@)">
			<summary>Gets the name of the file associated with the task.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="doc">[out] Returns the name of the file.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Task.Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.get_Checked(System.Int32@)">
			<summary>Determines whether the task item's check box is currently selected or cleared.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="f">[out] Returns true if the check box is selected, otherwise false.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Task.Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.get_Priority(Microsoft.VisualStudio.Shell.Interop.VSTASKPRIORITY[])">
			<summary>Gets the priority of the task.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="pri">An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTASKPRIORITY"></see> objects.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Task.Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.get_Text(System.String@)">
			<summary>Gets the description of the task.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="text">[out] The description of the task.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Task.Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.HasHelp(System.Int32@)">
			<summary>Determines whether or not the task has associated help.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="fHelp">[out] Returns true if there is help associated with the task, otherwise false.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Task.Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.ImageListIndex(System.Int32@)">
			<summary>Gets the index of the image associated with the task.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="index">[out] The index of the associated image.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Task.Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.IsReadOnly(Microsoft.VisualStudio.Shell.Interop.VSTASKFIELD,System.Int32@)">
			<summary>Determines whether or not the specified task field is read-only.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="fReadOnly">[out] Returns true if the field is read-only, otherwise false.</param>
			<param name="field">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTASKFIELD"></see>.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Task.Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.Line(System.Int32@)">
			<summary>Gets the line number of the file associated with the task.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="line">[out] Returns the line number of the file.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Task.Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.NavigateTo">
			<summary>Opens a file associated with a task and moves to the appropriate position in the file. </summary>
			<returns><see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK"></see>.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Task.Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.NavigateToHelp">
			<summary>Opens the Help resource associated with a task.</summary>
			<returns><see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK"></see>.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Task.Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.OnDeleteTask">
			<summary>Raised when a task has been deleted.</summary>
			<returns><see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK"></see>.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Task.Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.OnFilterTask(System.Int32)">
			<summary>Raised when a task has been filtered into or out of a view.</summary>
			<returns><see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK"></see>.</returns>
			<param name="f">If true, the task has become visible, otherwise it has become invisible.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Task.Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.put_Checked(System.Int32)">
			<summary>Sets whether a task item's check box is selected or cleared.</summary>
			<returns><see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK"></see>.</returns>
			<param name="f">true if the check box is selected, false if it is cleared.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Task.Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.put_Priority(Microsoft.VisualStudio.Shell.Interop.VSTASKPRIORITY)">
			<summary>Sets the priority level of a task item. </summary>
			<returns><see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK"></see>.</returns>
			<param name="pri">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTASKPRIORITY"></see>.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Task.Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.put_Text(System.String)">
			<summary>Sets the description of the task.</summary>
			<returns><see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK"></see>.</returns>
			<param name="t">The description of the task.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Task.Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.SubcategoryIndex(System.Int32@)">
			<summary>Gets the index of the task in the subcategory list.</summary>
			<returns><see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK"></see>.</returns>
			<param name="index">[out] Returns the index.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Task.OnDeleted(System.EventArgs)">
			<summary>Raised when the task has been deleted.</summary>
			<param name="e"><see cref="T:System.EventArgs"></see>.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Task.OnHelp(System.EventArgs)">
			<summary>Raised when the user requests Help; for example by right-clicking and selecting Show Error Help.</summary>
			<param name="e"><see cref="T:System.EventArgs"></see>.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Task.OnNavigate(System.EventArgs)">
			<summary>Raised when the user attempts to navigate to the task's location in the file, for example by double-clicking on the task.</summary>
			<param name="e"><see cref="T:System.EventArgs"></see>.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Task.OnRemoved(System.EventArgs)">
			<summary>Raised when a task has been removed from the task list.</summary>
			<param name="e"><see cref="T:System.EventArgs"></see>.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.Task.CanDelete">
			<summary>Gets or sets whether or not the task can be deleted.</summary>
			<returns>true if the task can be deleted, otherwise false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.Task.Category">
			<summary>Gets or sets the task's category.</summary>
			<returns><see cref="T:Microsoft.VisualStudio.Shell.TaskCategory"></see>.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.Task.Checked">
			<summary>Gets or sets whether not the task's check box is currently selected or cleared.</summary>
			<returns>true if the task is checked, otherwise false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.Task.Column">
			<summary>Gets or sets the column number within the file associated with the task.</summary>
			<returns>The column number of the task.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.Task.Document">
			<summary>Gets or sets the file associated with the task.</summary>
			<returns>The name of the file.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.Task.HelpKeyword">
			<summary>Gets or sets the Help keyword associated with the task.</summary>
			<returns>The Help keyword.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.Task.ImageIndex">
			<summary>Gets or sets the index of the image associated with the task.</summary>
			<returns>The index of the image associated with the task.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.Task.IsCheckedEditable">
			<summary>Gets or sets whether or not it is possible to edit the checked state of the task.</summary>
			<returns>true if it is possible to edit the checked state of the task, otherwise false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.Task.IsPriorityEditable">
			<summary>Gets or sets whether or not it is possible to edit the priority of a task.</summary>
			<returns>true if it is possible to edit the priority of a task, otherwise false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.Task.IsTextEditable">
			<summary>Gets or sets whether or not it is possible to edit the description of a task.</summary>
			<returns>true if it is possible to edit the description of a task, otherwise false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.Task.Line">
			<summary>Gets or sets the line number of the file associated with the task.</summary>
			<returns>The line number of the file associated with the task.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.Task.Priority">
			<summary>Gets or sets the priority of a task.</summary>
			<returns><see cref="T:Microsoft.VisualStudio.Shell.TaskPriority"></see>.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.Task.SubcategoryIndex">
			<summary>Gets or sets the index of the subcategory of the task.</summary>
			<returns>The index of the subcategory of a task.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.Task.Text">
			<summary>Gets or sets the description of a task.</summary>
			<returns>The description of a task.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.TaskCategory">
			<summary>Provides a set of task categories that specify the kind of task that is to be performed.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.TaskCategory.All">
			<summary>All tasks. Not a real category. It is used to allow a task list view to show all of the tasks in the task list. </summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.TaskCategory.BuildCompile">
			<summary>Build errors and warnings, and possibly deployment errors.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.TaskCategory.CodeSense">
			<summary>Errors generated as the user types source code.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.TaskCategory.Comments">
			<summary>Tasks generated by special comments, such as "TODO," "UNDONE," or "TBD." Also used for informational messages. </summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.TaskCategory.Html">
			<summary>Tasks which pertain to Web page development. .</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.TaskCategory.Misc">
			<summary>Miscellaneous tasks.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.TaskCategory.ShortCuts">
			<summary>Short cuts to code. Shortcuts are generated by the user right-clicking the editor window, and choosing Add Task List Shortcut from the pop-up menu.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.TaskCategory.User">
			<summary>User-defined tasks.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.TaskErrorCategory">
			<summary>Represents a collection of values that identify types or severity of error messages that can appear in the Error List Options task window.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.TaskErrorCategory.Error">
			<summary>Represents an error.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.TaskErrorCategory.Message">
			<summary>Represents an informational note.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.TaskErrorCategory.Warning">
			<summary>Represents a warning.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.TaskPriority">
			<summary>Provides values for task priorities.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.TaskPriority.High">
			<summary> High priority.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.TaskPriority.Low">
			<summary> Low priority.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.TaskPriority.Normal">
			<summary> Normal priority.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.TaskProvider">
			<summary>This class implements <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider"></see>. It provides a framework-friendly way to define a task provider and its associated services.  </summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.TaskProvider.#ctor(System.IServiceProvider)">
			<summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Shell.TaskProvider"></see> with the supplied service provider.</summary>
			<param name="provider"><see cref="T:System.IServiceProvider"></see>.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Dispose">
			<summary>Disposes this provider.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Dispose(System.Boolean)">
			<summary>Disposes the resources (task collection, task list, and image list) of this provider.</summary>
			<param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Finalize">
			<summary>Destroys the provider.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.TaskProvider.GetService(System.Type)">
			<summary>Gets the service of the specified type.</summary>
			<returns>An object representing the service.</returns>
			<param name="serviceType"> The type of the service.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider.EnumTaskItems(Microsoft.VisualStudio.Shell.Interop.IVsEnumTaskItems@)">
			<summary>Gets an enumerator over the task items.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="items">[out] <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsEnumTaskItems"></see>.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider.ImageList(System.IntPtr@)">
			<summary>Gets this provider's image list.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="himagelist">[out] <see cref="P:System.Windows.Forms.ImageList.Handle"></see>.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider.OnTaskListFinalRelease(Microsoft.VisualStudio.Shell.Interop.IVsTaskList)">
			<summary>Notifies the client to unregister the task provider from the task list if it has not been unregistered by the time the task list is closing. </summary>
			<returns><see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK"></see>. </returns>
			<param name="taskList">The task list.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider.ReRegistrationKey(System.String@)">
			<summary>Gets the re-registration key.</summary>
			<returns><see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK"></see>.</returns>
			<param name="key">[out] Returns the key.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider.SubcategoryList(System.UInt32,System.String[],System.UInt32@)">
			<summary>Gets a list of subcategories for the tasks of this task provider.</summary>
			<returns><see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK"></see>.</returns>
			<param name="rgbstr">An array of subcategories </param>
			<param name="cbstr">The number of subcategories in rgbstr.</param>
			<param name="cnt">[out] The number of subcategories.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider2.EnumTaskItems(Microsoft.VisualStudio.Shell.Interop.IVsEnumTaskItems@)">
			<summary>Gets an enumerator over task items.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="items">[out] <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsEnumTaskItems"></see>.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider2.ImageList(System.IntPtr@)">
			<summary>Gets this provider's image list.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="himagelist">[out] <see cref="P:System.Windows.Forms.ImageList.Handle"></see>.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider2.MaintainInitialTaskOrder(System.Int32@)">
			<summary>Gets or sets whether or not the task list should maintain the task order given to it by the task provider.</summary>
			<returns><see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK"></see>.</returns>
			<param name="fMaintainOrder">[out] Returns true if the task order should be maintained, otherwise false.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider2.OnTaskListFinalRelease(Microsoft.VisualStudio.Shell.Interop.IVsTaskList)">
			<summary>Notifies the client to unregister the task provider from the task list if it has not been unregistered by the time the task list is closing. </summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="taskList">The task list.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider2.ReRegistrationKey(System.String@)">
			<summary>Gets the reregistration key.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="key">[out] Returns the key.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider2.SubcategoryList(System.UInt32,System.String[],System.UInt32@)">
			<summary>Gets a list of subcategories for the tasks of this task provider.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="rgbstr">An array of subcategories </param>
			<param name="cbstr">The number of subcategories in rgbstr.</param>
			<param name="cnt">[out] The number of subcategories.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider3.GetColumn(System.Int32,Microsoft.VisualStudio.Shell.Interop.VSTASKCOLUMN[])">
			<summary>Gets the definition of the column with the specified index.</summary>
			<returns>When implemented by derived classes, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see> or an error code.</returns>
			<param name="iColumn">The index of the column.</param>
			<param name="pColumn">An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTASKCOLUMN"></see> structures.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider3.GetColumnCount(System.Int32@)">
			<summary>Gets the total number of columns supported by this provider, including columns that are not visible by default.</summary>
			<returns>When implemented by derived classes, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see> or an error code.</returns>
			<param name="count">[out] Returns the total number of columns. By default returns 0.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider3.GetProviderFlags(System.UInt32@)">
			<summary>Gets the behavior flags for this provider.</summary>
			<returns><see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK"></see>.</returns>
			<param name="tpfFlags">[out] Returns <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSTASKPROVIDERFLAGS"></see>. </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider3.GetProviderGuid(System.Guid@)">
			<summary>Gets a unique GUID for this provider. This is used to persist and restore provider-specific data managed by the task list, such as user customizations of column width and order.</summary>
			<returns><see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK"></see>.</returns>
			<param name="pguidProvider">[out] The GUID of the provider's type.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider3.GetProviderName(System.String@)">
			<summary>Gets the name of the provider.</summary>
			<returns><see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK"></see>.</returns>
			<param name="pbstrName">[out] The name of the provider.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider3.GetProviderToolbar(System.Guid@,System.UInt32@)">
			<summary>Gets the provider's toolbar.</summary>
			<returns><see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK"></see>.</returns>
			<param name="pguidGroup">[out] The GUID of the group to which the toolbar belongs.</param>
			<param name="pdwID">[out] The ID of the toolbar.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider3.GetSurrogateProviderGuid(System.Guid@)">
			<summary>If this method is implemented, all the provider's tasks will be listed under the surrogate provider in the list as though they belonged to the surrogate provider.</summary>
			<returns>When implemented by derived classes, <see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK"></see> or an error code.</returns>
			<param name="guid">[out] The GUID of the surrogate provider. By default returns an empty GUID.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider3.OnBeginTaskEdit(Microsoft.VisualStudio.Shell.Interop.IVsTaskItem)">
			<summary>Raised when the user begins editing a task in place.</summary>
			<returns><see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK"></see>.</returns>
			<param name="item"> The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem"></see> being edited.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider3.OnEndTaskEdit(Microsoft.VisualStudio.Shell.Interop.IVsTaskItem,System.Int32,System.Int32@)">
			<summary>Raised when the user finishes editing a task in-place.  </summary>
			<returns><see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK"></see>.</returns>
			<param name="fAllowChanges"> [out] Returns true if the changes have been committed, false to disallow the user from leaving edit mode.</param>
			<param name="fCommitChanges">true if the user wishes to commit the changes, false if the user wishes to discard them.</param>
			<param name="item">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem"></see> being edited.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Navigate(Microsoft.VisualStudio.Shell.Task,System.Guid)">
			<summary>Navigates from the task to the correct position in the document, shown in the specified logical view.</summary>
			<returns>true if it was possible to perform the navigation, otherwise false.</returns>
			<param name="task">The task from which to do the navigation.</param>
			<param name="logicalView">The logical view in which to display the document.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Refresh">
			<summary>Informs the task list that there are new or edited tasks.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.TaskProvider.ResumeRefresh">
			<summary>Restarts the refreshing of the task list after it has been suspended.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Show">
			<summary>Displays the task list window.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.TaskProvider.SuspendRefresh">
			<summary>Stops refreshing the task list until <see cref="M:Microsoft.VisualStudio.Shell.TaskProvider.ResumeRefresh"></see> is called.  </summary>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.TaskProvider.AlwaysVisible">
			<summary>Determines whether or not the provider is always visible in the dropdown menu even though it has no tasks.</summary>
			<returns>true if it is always visible, otherwise false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.TaskProvider.DisableAutoRoute">
			<summary>Gets or sets whether autorouting should be disabled.</summary>
			<returns>true if autorouting should be disabled, false if it should be enabled.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.TaskProvider.ImageList">
			<summary>Gets or sets the provider's image list (a list of icons for the tasks that belong to the provider).</summary>
			<returns><see cref="T:System.Windows.Forms.ImageList"></see>.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.TaskProvider.MaintainInitialTaskOrder">
			<summary>Gets or sets whether or not the task list should maintain the task order given to it by the task provider.</summary>
			<returns>true if the task order should be maintained, otherwise false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.TaskProvider.ProviderGuid">
			<summary>Gets or sets the GUID of this provider.</summary>
			<returns>The GUID of this provider.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.TaskProvider.ProviderName">
			<summary>Gets or sets a localized name for this provider.</summary>
			<returns>The localized name of the provider.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.TaskProvider.Subcategories">
			<summary>Gets a collection of task subcategories.</summary>
			<returns>A <see cref="T:System.Collections.Specialized.StringCollection"></see> of task subcategories.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.TaskProvider.Tasks">
			<summary>Gets a collection of tasks.</summary>
			<returns><see cref="T:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection"></see>.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.TaskProvider.ToolbarGroup">
			<summary>Gets or sets a group GUID and toolbar ID indicating which toolbar should be displayed when this provider is active.  </summary>
			<returns>The group GUID and toolbar ID indicating which toolbar should be displayed when this provider is active.  </returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.TaskProvider.ToolbarId">
			<summary>Gets or sets this provider's toolbar ID.</summary>
			<returns>The toolbar ID.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.TaskProvider.VsTaskList">
			<summary>Gets the task list.</summary>
			<returns><see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTaskList"></see>.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection">
			<summary>A container for <see cref="T:Microsoft.VisualStudio.Shell.Task"></see> objects.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.#ctor(Microsoft.VisualStudio.Shell.TaskProvider)">
			<summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection"></see> for the supplied task provider.</summary>
			<param name="owner">The task provider that owns these tasks.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.Add(Microsoft.VisualStudio.Shell.Task)">
			<summary>Adds a task to the collection.</summary>
			<returns>The index of the added task.</returns>
			<param name="task">The task to add.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.Clear">
			<summary>Removes all the tasks from the collection.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.Contains(Microsoft.VisualStudio.Shell.Task)">
			<summary>Gets whether or not the task exists in the collection</summary>
			<returns>true if the task exists in the collection, otherwise false.</returns>
			<param name="task">The task for which to search.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.GetEnumerator">
			<summary>Gets an enumerator for the collection.</summary>
			<returns><see cref="T:System.Collections.IEnumerator"></see>.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.IndexOf(Microsoft.VisualStudio.Shell.Task)">
			<summary>Gets the index of the specified task in the collection.</summary>
			<returns>The index of the task.</returns>
			<param name="task">The task for which to search.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.Insert(System.Int32,Microsoft.VisualStudio.Shell.Task)">
			<summary>Inserts a task in the collection at the specified index.</summary>
			<param name="task">The task to insert.</param>
			<param name="index">The index at which to insert the task.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.Remove(Microsoft.VisualStudio.Shell.Task)">
			<summary>Removes a task from the collection.</summary>
			<param name="task">The task to remove.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.RemoveAt(System.Int32)">
			<summary>Removes the task at the specified index.</summary>
			<param name="index">The index at which to remove the task.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.System.Collections.ICollection.CopyTo(System.Array,System.Int32)">
			<summary>Copies the collection to an array, starting at the specified index.</summary>
			<param name="array">The array to which to copy the collection.</param>
			<param name="index">The index of the array at which to start the copy.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.System.Collections.IList.Add(System.Object)">
			<summary>Adds the task to the collection.</summary>
			<returns>The index at which the task was added.</returns>
			<param name="obj">The task object.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.System.Collections.IList.Clear">
			<summary>Removes all the tasks from the list.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.System.Collections.IList.Contains(System.Object)">
			<summary>Gets whether or not the specified task exists in the collection.</summary>
			<returns>true if the task exists in the collection, otherwise false.</returns>
			<param name="obj">The task to find.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.System.Collections.IList.IndexOf(System.Object)">
			<summary>Gets the index of the collection at which the specified task exists.</summary>
			<returns>The index of the collection at which the task exists.</returns>
			<param name="obj">The task to find.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.System.Collections.IList.Insert(System.Int32,System.Object)">
			<summary>Inserts a task in the collection at the specified index.</summary>
			<param name="obj">The task to insert.</param>
			<param name="index">The index at which to insert the task.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.System.Collections.IList.Remove(System.Object)">
			<summary>Removes the specified task from the collection.</summary>
			<param name="obj">The task to be removed.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.System.Collections.IList.RemoveAt(System.Int32)">
			<summary>Removes the task from the specified index of the collection.</summary>
			<param name="index">The index at which to remove the task.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.Count">
			<summary>Gets the number of tasks in the collection.</summary>
			<returns>The number of tasks in the collection.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.Item(System.Int32)">
			<summary>Gets or sets the task at the given index.</summary>
			<returns><see cref="T:Microsoft.VisualStudio.Shell.Task"></see>.</returns>
			<param name="index">The index of the task.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.System.Collections.ICollection.IsSynchronized">
			<summary>Gets whether or not the collection is synchronized.</summary>
			<returns>By default returns false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.System.Collections.ICollection.SyncRoot">
			<summary>Gets the object that can be used to synchronize access to the collection.</summary>
			<returns>By default returns the current instance of this collection.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.System.Collections.IList.IsFixedSize">
			<summary>Gets whether or not the collection is of a fixed size.</summary>
			<returns>By default returns false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.System.Collections.IList.IsReadOnly">
			<summary>Gets whether or not the collection is read-only.</summary>
			<returns>By default returns false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.System.Collections.IList.Item(System.Int32)">
			<summary>Gets or sets the task at the specified index.</summary>
			<returns>The specified task.</returns>
			<param name="index">The index of the collection.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.ToolWindowOrientation">
			<summary>This enumeration provides a number of possible tool window orientations with respect to a docking window.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.ToolWindowOrientation.Bottom">
			<summary>Tool window initially oriented against the bottom of the docking window.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.ToolWindowOrientation.Left">
			<summary>Tool window initially oriented to the left of the docking window.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.ToolWindowOrientation.none">
			<summary>No tool window orientation indicated.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.ToolWindowOrientation.Right">
			<summary>Tool window initially oriented to the right of the docking window.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.ToolWindowOrientation.Top">
			<summary>Tool window initially oriented against the top of the docking window.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.ToolWindowPane">
			<summary>A default implementation for a tool window. It can be subclassed for a customized tool window.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ToolWindowPane.#ctor(System.IServiceProvider)">
			<summary>Initializes an instance of this class.</summary>
			<param name="provider">The single constructor argument is a service provider the created window can use to obtain services.  This parameter must not be null, or else the tool window will not be able to add itself to the shell.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ToolWindowPane.GetIVsWindowPane">
			<summary>Gets the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowPane"></see> associated with the tool window.</summary>
			<returns><see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowPane"></see>.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ToolWindowPane.OnToolBarAdded">
			<summary>Called when a toolbar is added to the tool window.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ToolWindowPane.OnToolWindowCreated">
			<summary>This method can be overridden by the derived class to execute any code that needs to run after the creation of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame"></see>.</summary>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ToolWindowPane.BitmapIndex">
			<summary>Gets or sets the index of the image to use in the bitmap strip for the window frame icon.</summary>
			<returns>The index of the image to use for the window frame icon.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ToolWindowPane.BitmapResourceID">
			<summary>Gets or sets the resource ID for the bitmap strip from which to take the window frame icon.</summary>
			<returns>The resource ID for the bitmap strip.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ToolWindowPane.Caption">
			<summary>Gets or sets the caption for the tool window.</summary>
			<returns>The caption of the tool window.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ToolWindowPane.Frame">
			<summary>Gets or sets the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame"></see> hosting the ToolWindowPane.</summary>
			<returns><see cref=":Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame"></see>.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ToolWindowPane.Package">
			<summary>Gets or sets the package owning the tool window.</summary>
			<returns><see cref="T:Microsoft.VisualStudio.Shell.Package"></see>.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ToolWindowPane.ToolBar">
			<summary>Gets or sets the <see cref="T:System.ComponentModel.Design.CommandID"></see>.</summary>
			<returns><see cref="T:System.ComponentModel.Design.CommandID"></see> if the tool window has a toolbar, otherwise null.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ToolWindowPane.ToolBarLocation">
			<summary>Gets or sets the location of the toolbar in the tool window.</summary>
			<returns>A value from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTWT_LOCATION"></see> enumeration.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ToolWindowPane.ToolClsid">
			<summary>Gets or sets the CLSID of a tool that should be used for this tool window.</summary>
			<returns>The CLSID of the tool.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.Url">
			<summary>Wraps the <see cref="T:System.Uri"></see> class. It provides an unescaped version of <see cref="P:System.Uri.LocalPath"></see> for file URL types and <see cref="P:System.Uri.AbsoluteUri"></see> for HTTP URL types. It also returns an unescaped result from <see cref="M:System.Uri.MakeRelative(T:System.Uri)"></see> so that it can be presented to the user.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Url.#ctor(System.String)">
			<summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Url"></see> for the specified path.</summary>
			<param name="path">The path for which to create the URL.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Url.#ctor(Microsoft.VisualStudio.Shell.Url,System.String)">
			<summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Url"></see> based on the specified base <see cref="T:Microsoft.VisualStudio.Shell.Url"></see> and relative path.</summary>
			<param name="baseUrl">The base <see cref="T:Microsoft.VisualStudio.Shell.Url"></see>.</param>
			<param name="relpath">The relative path.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Url.GetPartial(System.Int32)">
			<summary>Gets the unescaped path up to the specified index.</summary>
			<returns>The unescaped path up to the specified index of the <see cref="P:Microsoft.VisualStudio.Shell.Url.Segments"></see> array.</returns>
			<param name="i">The index of the <see cref="P:Microsoft.VisualStudio.Shell.Url.Segments"></see> array up to which to get the path.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Url.GetRemainder(System.Int32)">
			<summary>Gets the unescaped remainder of the path, starting at the specified segment.</summary>
			<returns>The unescaped remainder of the path, starting with the specified index of the <see cref="P:Microsoft.VisualStudio.Shell.Url.Segments"></see> array.</returns>
			<param name="i">The index of the <see cref="P:Microsoft.VisualStudio.Shell.Url.Segments"></see> array at which to start getting the path.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Url.JoinSegments(System.Int32,System.Int32)">
			<summary>Joins the specified segments into a path.</summary>
			<returns>The unescaped path starting at segment i and not including segment j or higher.</returns>
			<param name="j">The index of the <see cref="P:Microsoft.VisualStudio.Shell.Url.Segments"></see> array at which to stop adding segments to the path.</param>
			<param name="i">The index of the <see cref="P:Microsoft.VisualStudio.Shell.Url.Segments"></see> array at which to start the path.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Url.MakeRelative(Microsoft.VisualStudio.Shell.Url)">
			<summary>Makes the specified <see cref="T:Microsoft.VisualStudio.Shell.Url"></see> relative with respect to the current one.</summary>
			<returns>Using the current <see cref="T:Microsoft.VisualStudio.Shell.Url"></see> as the base, the relative path of url.</returns>
			<param name="url">The <see cref="T:Microsoft.VisualStudio.Shell.Url"></see> to make relative.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Url.Move(Microsoft.VisualStudio.Shell.Url,Microsoft.VisualStudio.Shell.Url)">
			<summary>Moves the URL from the old base to the new one.</summary>
			<returns>The new <see cref="T:Microsoft.VisualStudio.Shell.Url"></see>.</returns>
			<param name="newBase">The new <see cref="T:Microsoft.VisualStudio.Shell.Url"></see> base.</param>
			<param name="oldBase">The original <see cref="T:Microsoft.VisualStudio.Shell.Url"></see> base.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Url.Unescape(System.String,System.Boolean)">
			<summary>Converts an escaped string to an unescaped string.</summary>
			<returns>The unescaped string.</returns>
			<param name="escaped">The string to convert.</param>
			<param name="isFile">true if the string represents a file URL, otherwise false.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.Url.AbsoluteUrl">
			<summary>Gets the absolute URL as a string.</summary>
			<returns>The string value of the absolute URL.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.Url.Directory">
			<summary>Returns the unescaped absolute URL for the parent directory containing the file referenced by this URL object.</summary>
			<returns>The unescaped absolute URL of the parent directory.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.Url.IsFile">
			<summary>Determines whether or not the URL represents a file (as opposed to an HTTP location).</summary>
			<returns>true if the URL represents a file, otherwise false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.Url.Segments">
			<summary>Gets an array of the URL's segments.</summary>
			<returns>An array of the URL's segments.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.Url.Uri">
			<summary>Gets the URI for this URL.</summary>
			<returns><see cref="T:System.Uri"></see>.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.VsDockStyle">
			<summary>Defines constants for tool window orientation.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.VsDockStyle.AlwaysFloat">
			<summary>If the Style value is <see cref="F:Microsoft.VisualStudio.Shell.VsDockStyle.AlwaysFloat"></see>, the tool window cannot be docked.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.VsDockStyle.Float">
			<summary>If the Style value is <see cref="F:Microsoft.VisualStudio.Shell.VsDockStyle.Float"></see>, the tool window will float initially, but when the title bar is double-clicked, Orientation and Window apply, and the window will default to Tabbed.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.VsDockStyle.Linked">
			<summary>If the Style value is <see cref="F:Microsoft.VisualStudio.Shell.VsDockStyle.Linked"></see>, Orientation can be Left, Right, Top, or Bottom.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.VsDockStyle.MDI">
			<summary>If the Style value is <see cref="F:Microsoft.VisualStudio.Shell.VsDockStyle.MDI"></see>, the tool window will be linked to the MDI area, and Window is ignored.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.VsDockStyle.none">
			<summary>The registration attribute <see cref="T:Microsoft.VisualStudio.Shell.ProvideToolWindowAttribute"></see> initializes to this value of no style specified. </summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.VsDockStyle.Tabbed">
			<summary>If the Style value is <see cref="F:Microsoft.VisualStudio.Shell.VsDockStyle.Tabbed"></see>, Orientation can be Left or Right and specifies where the tab will be placed.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.VsMenus">
			<summary>Includes the GUIDs for Visual Studio menu commands.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.VsShellUtilities">
			<summary>Provides static helper methods to use when dealing with the Visual Studio shell.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.EmptyTaskList(System.IServiceProvider)">
			<summary>Empties the task list.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="serviceProvider"><see cref="T:System.IServiceProvider"></see>.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.GetDebugMode(System.IServiceProvider)">
			<summary>Gets the current debug mode of the shell, for example design mode, running mode, or break mode.</summary>
			<returns>One of the <see cref="T:Microsoft.VisualStudio.Shell.Interop.DBGMODE"></see> values.</returns>
			<param name="serviceProvider"><see cref="T:System.IServiceProvider"></see>.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.GetHierarchy(System.IServiceProvider,System.Guid)">
			<summary>Gets the hierarchy node specified by the project GUID.</summary>
			<returns>The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy"></see> interface of the project.</returns>
			<param name="site"><see cref="T:System.IServiceProvider"></see>.</param>
			<param name="projectGuid">The GUID of the project.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.GetMiscellaneousProject(System.IServiceProvider)">
			<summary>Gets the miscellaneous project from the current solution.</summary>
			<returns>The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProject3"></see> interface of the miscellaneous project.</returns>
			<param name="provider"><see cref="T:System.IServiceProvider"></see>.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.GetMiscellaneousProject(System.IServiceProvider,System.Boolean)">
			<summary>Returns the miscellaneous project in a solution.</summary>
			<returns>The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProject3"></see> interface of the miscellaneous project.</returns>
			<param name="create">true if the project should be created, otherwise false.</param>
			<param name="provider"><see cref="T:System.IServiceProvider"></see> object used to retrieve the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSolution"></see> object.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.GetOutputWindowPane(System.IServiceProvider,System.Guid)">
			<summary>Gets the output window pane specified by the GUID.</summary>
			<returns>The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane"></see> interface specified by the GUID.</returns>
			<param name="serviceProvider"><see cref="T:System.IServiceProvider"></see>.</param>
			<param name="guidPane">The GUID of the output window pane.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.GetProject(System.IServiceProvider,System.String)">
			<summary>Returns a project for the specified document.</summary>
			<returns>The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy"></see> interface of the project that contains the document.</returns>
			<param name="site">The <see cref="T:System.IServiceProvider"></see> object used to retrieve the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSolution"></see> object.</param>
			<param name="moniker">The unique identifier of the document in the project system.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.GetRDTDocumentInfo(System.IServiceProvider,System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@,System.UInt32@,Microsoft.VisualStudio.Shell.Interop.IVsPersistDocData@,System.UInt32@)">
			<summary>Gets an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsPersistDocData"></see> interface and a document cookie from the running document table for the specified document.</summary>
			<param name="docCookie">[out] The identifier of the document held by the running document table.</param>
			<param name="itemid">[out] The item ID of the document.</param>
			<param name="hierarchy">[out] The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy"></see> interface of the project containing the document.</param>
			<param name="site"><see cref="T:System.IServiceProvider"></see>.</param>
			<param name="documentName">The moniker of the file.</param>
			<param name="persistDocData">[out] The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsPersistDocData"></see> interface for the document.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.GetRunningDocumentContents(System.IServiceProvider,System.String)">
			<summary>Gets the text of the specified file, if it exists in the running document table.</summary>
			<returns>The text of the file.</returns>
			<param name="site"><see cref="T:System.IServiceProvider"></see>.</param>
			<param name="path">The absolute path of the file.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.GetTaskItems(System.IServiceProvider)">
			<summary>Gets a list of tasks.</summary>
			<returns>An <see cref="T:System.Collections.IList"></see> of type <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem2"></see> of the task items.</returns>
			<param name="serviceProvider"><see cref="T:System.IServiceProvider"></see>.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.GetTextView(Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame)">
			<summary>Gets the text view in the specified window frame.</summary>
			<returns>The text view in an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"></see> object, or null if the window frame is a code window that is not implemented as a text view.</returns>
			<param name="windowFrame"><see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame"></see> that contains the text view.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.GetUIHierarchyWindow(System.IServiceProvider,System.Guid)">
			<summary>Gets a window for the given GUID.</summary>
			<returns><see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchyWindow"></see>.</returns>
			<param name="serviceProvider"><see cref="T:System.IServiceProvider"></see>.</param>
			<param name="guidPersistenceSlot">The GUID of the hierarchy window.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.GetWindowObject(Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame)">
			<summary>Gets the window that exists in the specified window frame.</summary>
			<returns>The <see cref="T:EnvDTE.Window"></see>, if there is an object of that type in the frame, otherwise null.</returns>
			<param name="windowFrame">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame"></see> interface for the window frame.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.IsDocumentOpen(System.IServiceProvider,System.String,System.Guid,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy@,System.UInt32@,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)">
			<summary>Determines whether or not the specified document is open.</summary>
			<returns>true if the document is open in the given logical view. If logicalView is Guid.Empty, then this method returns true if any view is open, otherwise false.</returns>
			<param name="logicalView">The GUID of the logical view.</param>
			<param name="hierarchy">[out] Returns the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy"></see> interface of the project that contains the document.</param>
			<param name="windowFrame">[out] Returns the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame"></see> in which the document is open.</param>
			<param name="provider"><see cref="T:System.IServiceProvider"></see>.</param>
			<param name="fullPath">The full path to the document.</param>
			<param name="itemID">[out] Returns the item ID of the document.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.IsInAutomationFunction(System.IServiceProvider)">
			<summary>Determines whether or not the extensibility object is currently executing an automation operation.</summary>
			<returns>true if the extensibility object is executing an automation operation, otherwise false.</returns>
			<param name="serviceProvider"><see cref="T:System.IServiceProvider"></see>.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.IsSolutionBuilding(System.IServiceProvider)">
			<summary>Determines whether or not the build manager is busy.</summary>
			<returns>true if the build manager is building or deploying the built application, otherwise false.</returns>
			<param name="serviceProvider"><see cref="T:System.IServiceProvider"></see>.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.IsVisualStudioInDesignMode(System.IServiceProvider)">
			<summary>Determines whether or not Visual Studio is in design mode (as opposed to run or debug mode).</summary>
			<returns>true if vsprvs is in design mode, otherwise false.</returns>
			<param name="serviceProvider"><see cref="T:System.IServiceProvider"></see>.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.LaunchDebugger(System.IServiceProvider,Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo)">
			<summary>Launches the debugger.</summary>
			<param name="info">A <see cref="T:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo"></see> structure.</param>
			<param name="serviceProvider"><see cref="T:System.IServiceProvider"></see>.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.OpenAsMiscellaneousFile(System.IServiceProvider,System.String,System.String,System.Guid,System.String,System.Guid)">
			<summary>Opens the specified miscellaneous file in the specified editor.</summary>
			<param name="path">The path of the file.</param>
			<param name="logicalView">The logical view of the editor, for example <see cref="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_TextView"></see>.</param>
			<param name="physicalView">The name of the type of window in which to open the editor.</param>
			<param name="editor">The GUID of the editor in which to open the file.</param>
			<param name="caption">The name of the file.</param>
			<param name="provider"><see cref="T:System.IServiceProvider"></see>.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.OpenDocument(System.IServiceProvider,System.String)">
			<summary>Opens the specified document.</summary>
			<param name="path">The path of the document.</param>
			<param name="provider"><see cref="T:System.IServiceProvider"></see>.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.OpenDocument(System.IServiceProvider,System.String,System.Guid,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy@,System.UInt32@,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)">
			<summary>Opens the specified document in the specified view.</summary>
			<param name="logicalView">The GUID of the logical view in which to open the document.</param>
			<param name="hierarchy">[out] Returns the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy"></see> interface of the project that contains the document.</param>
			<param name="windowFrame">[out] Returns the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame"></see> interface of the window in which the document is open.</param>
			<param name="provider"><see cref="T:System.IServiceProvider"></see>.</param>
			<param name="fullPath">The absolute path of the document.</param>
			<param name="itemID">[out] The item ID of the document.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.OpenDocument(System.IServiceProvider,System.String,System.Guid,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy@,System.UInt32@,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,Microsoft.VisualStudio.TextManager.Interop.IVsTextView@)">
			<summary>Opens the specified document in the specified logical view.</summary>
			<param name="view">[out] Returns the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"></see>  interface of the primary view of the window.</param>
			<param name="logicalView">The GUID of the logical view in which to open the document.</param>
			<param name="hierarchy">[out] Returns the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy"></see> interface of the project that contains the document.</param>
			<param name="windowFrame">[out] Returns the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame"></see> interface of the window in which the document is open.</param>
			<param name="provider"><see cref="T:System.IServiceProvider"></see>.</param>
			<param name="fullPath">The absolute path of the document.</param>
			<param name="itemID">[out] The item ID of the document.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.OpenDocumentWithSpecificEditor(System.IServiceProvider,System.String,System.Guid,System.Guid)">
			<summary>Opens the specified document with the specified editor.</summary>
			<returns>The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame"></see> interface of the window in which the document was opened.</returns>
			<param name="logicalView">The GUID of the logical view in which to open the document.</param>
			<param name="editorType">The GUID of the type of editor to use.</param>
			<param name="provider"><see cref="T:System.IServiceProvider"></see>.</param>
			<param name="fullPath">The absolute path of the document.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.OpenDocumentWithSpecificEditor(System.IServiceProvider,System.String,System.Guid,System.Guid,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy@,System.UInt32@,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)">
			<summary>Opens the specified document with the specified editor.</summary>
			<param name="logicalView">The GUID of the logical view in which to open the document.</param>
			<param name="hierarchy">[out] The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy"></see> interface of the project containing the document.</param>
			<param name="windowFrame">[out] the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame"></see> interface of the window in which the document was opened.</param>
			<param name="editorType">The GUID of the type of editor to use.</param>
			<param name="provider"><see cref="T:System.IServiceProvider"></see>.</param>
			<param name="fullPath">The absolute path of the document.</param>
			<param name="itemID">[out] The item ID of the document.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.PromptYesNo(System.String,System.String,Microsoft.VisualStudio.Shell.Interop.OLEMSGICON,Microsoft.VisualStudio.Shell.Interop.IVsUIShell)">
			<summary>Displays a message box with the specified title that prompts the user to respond yes/no to the specified message.</summary>
			<returns>true if the operation succeeded, otherwise false.</returns>
			<param name="icon">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.OLEMSGICON"></see> that defines the type of message.</param>
			<param name="uiShell">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIShell"></see> interface of shell in which to display the message box. </param>
			<param name="message">The message to which the user must respond.</param>
			<param name="title">The title of the message box.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.RenameDocument(System.IServiceProvider,System.String,System.String)">
			<summary>Renames the specified document.</summary>
			<param name="newName">The new absolute path of the document.</param>
			<param name="site"><see cref="T:System.IServiceProvider"></see>.</param>
			<param name="oldName">The current absolute path of the document.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.SaveFileIfDirty(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
			<summary>Saves the file in the specified text view if it is dirty.</summary>
			<param name="view">The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"></see> interface of the file to be saved.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.SaveFileIfDirty(System.IServiceProvider,System.String)">
			<summary>Saves the specified file if it is dirty.</summary>
			<param name="site"><see cref="T:System.IServiceProvider"></see>.</param>
			<param name="fullPath">The absolute path of the file.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.ShowMessageBox(System.IServiceProvider,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.OLEMSGICON,Microsoft.VisualStudio.Shell.Interop.OLEMSGBUTTON,Microsoft.VisualStudio.Shell.Interop.OLEMSGDEFBUTTON)">
			<summary>Displays a message box with the specified message.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code. </returns>
			<param name="icon">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.OLEMSGICON"></see> value specifying the type of message.</param>
			<param name="message">The message to display.</param>
			<param name="msgButton">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.OLEMSGBUTTON"></see> value specifying the set of buttons to display.</param>
			<param name="serviceProvider"><see cref="T:System.IServiceProvider"></see>.</param>
			<param name="defaultButton">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.OLEMSGDEFBUTTON"></see> value specifying which button is to be the default button.</param>
			<param name="title">The title of the message box.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.WindowPane">
			<summary>A default implementation of a tool window pane. This class implements <see cref="T:Microsoft.VisualStudio.Shell.InteropIVsWindowPane"></see>, but the implementer must provide an implementation of an object that returns an <see cref="T:Windows.Forms.IWin32Window"></see>. This class also implements <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget"></see>, mapping it to <see cref="T:System.ComponentModel.Design.IMenuCommandService"></see> and <see cref="T:Microsoft.VisualStudio.OLE.Interop.IObjectWithSite"></see>, mapping the site to services that can be queried through its protected <see cref="M:Microsoft.VisualStudio.Shell.WindowPane.GetService(System.Type)"></see> method.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.WindowPane.#ctor(System.IServiceProvider)">
			<summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.WindowPane"></see> with the specified service provider.</summary>
			<param name="provider"><see cref="T:System.IServiceProvider"></see>. Should be null. For more information, see Remarks.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.WindowPane.Dispose">
			<summary>Disposes the window pane and its resources.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.WindowPane.Dispose(System.Boolean)">
			<summary>Disposes the resources of the window pane.</summary>
			<param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.WindowPane.GetService(System.Type)">
			<summary>Gets the service of the specified type.</summary>
			<returns>The service.</returns>
			<param name="serviceType"> The type of the service to get.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.WindowPane.Initialize">
			<summary>Initializes services after the window pane has been sited.  </summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.WindowPane.Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget.Exec(System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
			<summary>Executes the specified command.</summary>
			<returns>Returns <see cref="F:Microsoft.VisualStudio.OLE.Interop.OleConstants.OLECMDERR_E_NOTSUPPORTED"></see> if the project manager is closed or the command is not supported. Otherwise returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see> or an error code if one of the executed commands returned an error code.</returns>
			<param name="nCmdId">The ID of the command.</param>
			<param name="guidGroup">The GUID of the command group to which the command belongs.</param>
			<param name="pIn">Pointer to a VARIANTARG structure containing input arguments. Can be null.</param>
			<param name="nCmdExcept">Values taken from the <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMDEXECOPT"></see> enumeration, which describe how the object should execute the command.</param>
			<param name="vOut">Pointer to a VARIANTARG structure containing command output. Can be null.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.WindowPane.Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget.QueryStatus(System.Guid@,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr)">
			<summary>Queries the object for the status of one or more commands generated by user interface events.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="nCmdId">The number of commands in the prgCmds array.</param>
			<param name="guidGroup">Unique identifier of the command group. All the commands that are passed in the prgCmds array must belong to the group specified by guidCmdGroup.</param>
			<param name="oleCmd">A caller-allocated array of <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMD"></see> structures that indicate the commands for which the caller needs status information. This method fills the cmdf member of each structure with values taken from the <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMDF"></see> enumeration.</param>
			<param name="oleText">Pointer to an <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMDTEXTF"></see> structure to return a name and/or status information of a single command. Can be null to indicate that the caller does not need this information.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.WindowPane.Microsoft.VisualStudio.Shell.Interop.IVsBroadcastMessageEvents.OnBroadcastMessage(System.UInt32,System.IntPtr,System.IntPtr)">
			<summary>Raised when a message is broadcast to the window. </summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="lParam">A long integer parameter for the message.</param>
			<param name="msg">The broadcast message.</param>
			<param name="wParam">A word value parameter for the message.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.WindowPane.Microsoft.VisualStudio.Shell.Interop.IVsWindowPane.ClosePane">
			<summary>Closes the window pane.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.WindowPane.Microsoft.VisualStudio.Shell.Interop.IVsWindowPane.CreatePaneWindow(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr@)">
			<summary>Creates a window pane.</summary>
			<returns><see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK"></see>. </returns>
			<param name="y">The absolute y ordinate.</param>
			<param name="hwndParent">A pointer to the parent window.</param>
			<param name="pane"> [out] A pointer to the new window pane.</param>
			<param name="cy">The height of the window.</param>
			<param name="cx">The width of the window.</param>
			<param name="x">The absolute x ordinate.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.WindowPane.Microsoft.VisualStudio.Shell.Interop.IVsWindowPane.GetDefaultSize(Microsoft.VisualStudio.OLE.Interop.SIZE[])">
			<summary>Gets the default size of the window pane.</summary>
			<returns>When implemented by derived classes, if the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="size">An array of <see cref="T:Microsoft.VisualStudio.OLE.Interop.SIZE"></see> structures.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.WindowPane.Microsoft.VisualStudio.Shell.Interop.IVsWindowPane.LoadViewState(Microsoft.VisualStudio.OLE.Interop.IStream)">
			<summary>Loads the saved view state.</summary>
			<returns>When implemented by derived classes, if the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="pstream">The <see cref="T:Microsoft.VisualStudio.OLE.Interop.IStream"></see> from which to load the view state.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.WindowPane.Microsoft.VisualStudio.Shell.Interop.IVsWindowPane.SaveViewState(Microsoft.VisualStudio.OLE.Interop.IStream)">
			<summary>Saves the loaded view state.</summary>
			<returns>When implemented by derived classes, if the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="pstream">The <see cref="T:Microsoft.VisualStudio.OLE.Interop.IStream"></see> to which to save the view state.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.WindowPane.Microsoft.VisualStudio.Shell.Interop.IVsWindowPane.SetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
			<summary>Initializes this window pane with the specified service provider.</summary>
			<returns><see cref="T:Microsoft.VisualStudio.NativeMethods.S_OK"></see>.</returns>
			<param name="p"><see cref="T:System.IServiceProvider"></see>.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.WindowPane.Microsoft.VisualStudio.Shell.Interop.IVsWindowPane.TranslateAccelerator(Microsoft.VisualStudio.OLE.Interop.MSG[])">
			<summary>Handles the translation of navigation keys.</summary>
			<returns>If this method succeeds, it returns <see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK"></see>; if it fails, it returns <see cref="F:Microsoft.VisualStudio.NativeMethods.E_FAIL"></see>.</returns>
			<param name="msg">An array of <see cref="T:Microsoft.VisualStudio.OLE.Interop.MSG"></see> structures containing the character or character combination to be translated.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.WindowPane.OnClose">
			<summary>Raised when the window is closed.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.WindowPane.OnCreate">
			<summary>Raised when the window pane is created.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.WindowPane.PreProcessMessage(System.Windows.Forms.Message@)">
			<summary>Preprocesses the messages from navigation keys.</summary>
			<returns>true if it was possible to get a control from the message's handle, otherwise false.</returns>
			<param name="m">The <see cref="T:System.Windows.Forms.Message"></see>.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.WindowPane.System.IServiceProvider.GetService(System.Type)">
			<summary>Gets the service of the specified type.</summary>
			<returns>An object that represents the service.</returns>
			<param name="serviceType">The type of the service to get.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.WindowPane.Window">
			<summary>Gets the window associated with this window pane.</summary>
			<returns><see cref="T:System.Windows.Forms.IWin32Window"></see>.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject">
			<summary>A project that is a subtype or flavor of an inner project. All methods by default delegate to the inner project. Non-default behaviors should be handled by the flavored project.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.#ctor">
			<summary>When overridden in a derived class, initializes an instance of the <see cref="T:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject"></see> class.</summary>
		</member>
		<member name="E:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.DirectoryAdded">
			<summary>Raised after a directory has been added to the project.</summary>
		</member>
		<member name="E:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.DirectoryRemoved">
			<summary>Raised after a directory has been removed from the project.</summary>
		</member>
		<member name="E:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.DirectoryRenamed">
			<summary>Raised after a directory in the project has been renamed.</summary>
		</member>
		<member name="E:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.FileAdded">
			<summary>Raised after a file has been added to the project.</summary>
		</member>
		<member name="E:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.FileRemoved">
			<summary>Raised after a file has been removed from the project.</summary>
		</member>
		<member name="E:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.FileRenamed">
			<summary>Raised after a file in the project has been renamed.</summary>
		</member>
		<member name="E:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.SccStatusChanged">
			<summary>Raised after the source code control status of an item in the project has changed.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.innerOleCommandTarget">
			<summary>The <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget"></see> interface of the inner project.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.innerVsAggregatableProject">
			<summary>The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsAggregatableProject"></see> of the inner project.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.innerVsHierarchy">
			<summary>The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy"></see> interface of the inner project.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.innerVsUIHierarchy">
			<summary>The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy"></see> interface of the inner project.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.serviceProvider">
			<summary>The service provider of the project.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.AdviseHierarchyEvents(Microsoft.VisualStudio.Shell.Interop.IVsHierarchyEvents)">
			<summary>Subscribes to hierarchy events.</summary>
			<returns>A unique value, or cookie, that is needed to disable notification of hierarchy events.</returns>
			<param name="eventSink"><see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyEvents"></see>.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Close">
			<summary>Closes and cleans up a hierarchy once the environment determines that it is no longer used. </summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.ExecCommand(System.UInt32,System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
			<summary>Executes a command on a specific item within a UI hierarchy window, or on the hierarchy itself. </summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants."></see><see cref="S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="pvaOut">A pointer to a VARIANTARG structure to receive command output. Can be null.</param>
			<param name="itemid">The identifier of the item affected by the command. For single selection, this value is the actual item ID. For multiple selections, set itemid equal to <see cref="F:Microsoft.VisualStudio.VSConstants."></see><see cref="VSITEMID_SELECTION"></see>.</param>
			<param name="pvaIn">A pointer to a VARIANTARG structure containing input arguments. Can be null.</param>
			<param name="nCmdID">The command to be executed. This command must belong to the group specified with pguidCmdGroup.</param>
			<param name="pguidCmdGroup">Unique identifier of the command group. All the commands in nCmdID must belong to the group specified by pguidCmdGroup.</param>
			<param name="nCmdexecopt">A member of the <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMDEXECOPT"></see> enumeration, describing the type of action to perform.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.GetCanonicalName(System.UInt32,System.String@)">
			<summary>Gets the unique name associated with an item in the hierarchy. Used for workspace persistence, such as remembering window positions.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants."></see><see cref="S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="itemId">The ID of the hierarchy item. </param>
			<param name="name">[out] The canonical name of the hierarchy item.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.GetGuidProperty(System.UInt32,System.Int32)">
			<summary>Gets properties whose values are GUIDs.</summary>
			<returns>The GUID value of the property.</returns>
			<param name="itemId">The item ID of the hierarchy node for which to get the property.</param>
			<param name="propId">The ID of the property.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.GetNestedHierarchy(System.UInt32,System.Guid@,System.IntPtr@,System.UInt32@)">
			<summary>Determines whether or not a node is a nested hierarchy.</summary>
			<returns>If itemid is not a nested hierarchy node, this method returns <see cref="F:Microsoft.VisualStudio.VSConstants."></see><see cref="E_FAIL"></see>. If the requested interface is not supported on the hierarchy object, <see cref="F:Microsoft.VisualStudio.VSConstants."></see><see cref="E_NOINTERFACE"></see> is returned. The caller would then treat this node as if it had no children. </returns>
			<param name="itemIdNested">[out] Returns the item ID of the nested hierarchy node; this will always be <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT"></see>.</param>
			<param name="itemId">The item ID of the node.</param>
			<param name="guidHierarchyNested">The interface ID of the node.</param>
			<param name="hierarchyNested">[out] Returns a pointer to the node, if it is a nested hierarchy node. </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.GetProperty(System.UInt32,System.Int32,System.Object@)">
			<summary>Gets the value of a property for a given node.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="itemId">The item ID of the node.</param>
			<param name="propId">The ID of the requested property.</param>
			<param name="property">[out] The value of the property.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.GetSite">
			<summary>Gets the service provider from which to access the services.</summary>
			<returns><see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider"></see>.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.InitializeForOuter(System.String,System.String,System.String,System.UInt32,System.Guid@,System.Boolean@)">
			<summary>Called by the outer project subtype to have the owned inner project subtype do its initialization work. </summary>
			<param name="fileName">The name of the project file.</param>
			<param name="name">The name of the project.</param>
			<param name="flags">Flags from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJECTFLAGS"></see> enumeration.</param>
			<param name="cancel">[out] Returns true if project creation was canceled.</param>
			<param name="guidProject">[ref] The interface ID of the project.</param>
			<param name="location">The path of the project file.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget.Exec(System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
			<summary>Executes a specified command or displays help for a command.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="pvaOut">A pointer to a VARIANTARG structure containing command output. May be null.</param>
			<param name="pvaIn">A pointer to a VARIANTARG structure containing input arguments. May be null.</param>
			<param name="nCmdID">The ID of the command.</param>
			<param name="pguidCmdGroup">The ID of the command group to which the command belongs.</param>
			<param name="nCmdexecopt">A member of the <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMDEXECOPT"></see> enumeration, describing the type of action to take.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget.QueryStatus(System.Guid@,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr)">
			<summary>Queries the object for the status of one or more commands.</summary>
			<returns>If the method succeeded, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>, otherwise an error code.</returns>
			<param name="pCmdText">Pointer to an <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMDTEXT"></see> structure in which to return name and/or status information of a single command. Can be null.</param>
			<param name="prgCmds">An array of <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMD"></see> structures that contain information about the commands.</param>
			<param name="cCmds">The number of commands in the command array.</param>
			<param name="pg uidCmdGroup">The GUID of the command group to which the commands belong.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsAggregatableProject.GetAggregateProjectTypeGuids(System.String@)">
			<summary>Gets the list of project type GUIDs that make up the aggregate project. This method should be delegated to the innermost project within the system of aggregated project subtypes.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="projectTypeGuids">[out] A semicolon-delimited set of project type GUIDs.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsAggregatableProject.InitializeForOuter(System.String,System.String,System.String,System.UInt32,System.Guid@,System.IntPtr@,System.Int32@)">
			<summary>Called by the outer project subtype to have the inner project subtype do its initialization work. </summary>
			<returns>If the method succeeds, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>, otherwise an error code.</returns>
			<param name="fileName">The project file name of the project to be initialized.</param>
			<param name="canceled">[out] true if the project was canceled. </param>
			<param name="name">The name of the project.</param>
			<param name="flags">Flags that describe how a project is to be created or opened. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS"></see> enumeration.</param>
			<param name="project">[out] A pointer to the project. </param>
			<param name="guidProject">[ref] The interface ID of the project. It should be <see cref="F:Microsoft.VisualStudio.NativeMethods.IID_IUnknown"></see>.</param>
			<param name="location">The path of the project file. </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsAggregatableProject.OnAggregationComplete">
			<summary>Called to continue initialization after aggregation is complete.</summary>
			<returns>If the method succeeded, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>, otherwise an error code.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsAggregatableProject.SetAggregateProjectTypeGuids(System.String)">
			<summary>Updates the list of GUIDs that are persisted in the project file of the base project. </summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>\. If it fails, it returns an error code.</returns>
			<param name="projectTypeGuids">The GUIDs to set.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsAggregatableProject.SetInnerProject(System.Object)">
			<summary>Sets up the inner project as well as the necessary interface pointers.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="inner">The IUnknown of the inner project subtype.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsHierarchy.AdviseHierarchyEvents(Microsoft.VisualStudio.Shell.Interop.IVsHierarchyEvents,System.UInt32@)">
			<summary>Subscribes to hierarchy events.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="cookie">[out] Returns the unique identifier used to unsubscribe for these events.</param>
			<param name="eventSink">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyEvents"></see> to which to register.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsHierarchy.Close">
			<summary>Closes and cleans up a hierarchy once the environment determines that it is no longer used. </summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsHierarchy.GetCanonicalName(System.UInt32,System.String@)">
			<summary>Gets a unique name for an item in the hierarchy. Used for workspace persistence, such as remembering window positions. </summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="itemId">The ID of the hierarchy item.</param>
			<param name="name">[out] The canonical name of the item.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsHierarchy.GetGuidProperty(System.UInt32,System.Int32,System.Guid@)">
			<summary>Gets properties whose values are GUIDs. </summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="itemId">The ID of the hierarchy item.</param>
			<param name="propId">The ID of the property.</param>
			<param name="guid">[out] Returns the GUID value of the property.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsHierarchy.GetNestedHierarchy(System.UInt32,System.Guid@,System.IntPtr@,System.UInt32@)">
			<summary>Determines whether or not a node is a nested hierarchy.</summary>
			<returns>If itemid is not a nested hierarchy node, this method returns <see cref="F:Microsoft.VisualStudio.VSConstants."></see><see cref="E_FAIL"></see>. If the requested interface is not supported on the hierarchy object, <see cref="F:Microsoft.VisualStudio.VSConstants."></see><see cref="E_NOINTERFACE"></see> is returned. The caller would then treat this node as if it had no children. </returns>
			<param name="itemIdNested">[out] Returns the item ID of the nested hierarchy node; this will always be <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT"></see>.</param>
			<param name="itemId">The item ID of the node.</param>
			<param name="guidHierarchyNested">The interface ID of the node.</param>
			<param name="hierarchyNested">[out] Returns a pointer to the node, if it is a nested hierarchy node. </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsHierarchy.GetProperty(System.UInt32,System.Int32,System.Object@)">
			<summary>Gets properties of a given node or of the hierarchy. </summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="itemId">The ID of the item.</param>
			<param name="propId">The ID of the property.</param>
			<param name="property">[out] The value of the property. </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsHierarchy.GetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider@)">
			<summary>Gets the service provider from which to access the services. </summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="serviceProvider"> <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider"></see>.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsHierarchy.ParseCanonicalName(System.String,System.UInt32@)">
			<summary>Returns the identifier of the hierarchy item, given its canonical name. </summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="itemId">[out] The ID of the item.</param>
			<param name="name">The canonical name of the item.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsHierarchy.QueryClose(System.Int32@)">
			<summary>Determines whether the hierarchy can be closed. </summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="canClose">[out] Returns true if the hierarchy can be closed, otherwise false. </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsHierarchy.SetGuidProperty(System.UInt32,System.Int32,System.Guid@)">
			<summary>Sets properties whose values are GUIDs. </summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="itemId">The ID of the item.</param>
			<param name="propId">The ID of the property to set.</param>
			<param name="guid">The GUID value of the property.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsHierarchy.SetProperty(System.UInt32,System.Int32,System.Object)">
			<summary>Sets properties of a specific node or of the hierarchy. </summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="itemId">The ID of the item.</param>
			<param name="propId">The ID of the property to set.</param>
			<param name="property">The value of the property.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsHierarchy.SetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
			<summary>Sets the service provider from which to access the services. </summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="serviceProvider"><see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider"></see>.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsHierarchy.UnadviseHierarchyEvents(System.UInt32)">
			<summary>Disables client notification of hierarchy events.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="cookie">The unique identifier that was handed back with <see cref="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.AdviseHierarchyEvents(Microsoft.VisualStudio.Shell.Interop.IVsHierarchyEvents)"></see>.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsHierarchy.Unused0">
			<summary>A placeholder for a future method.</summary>
			<returns>Implementers should return <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL"></see>.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsHierarchy.Unused1">
			<summary>A placeholder for a future method.</summary>
			<returns>Implementers should return <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL"></see>.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsHierarchy.Unused2">
			<summary>A placeholder for a future method.</summary>
			<returns>Implementers should return <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL"></see>.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsHierarchy.Unused3">
			<summary>A placeholder for a future method.</summary>
			<returns>Implementers should return <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL"></see>.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsHierarchy.Unused4">
			<summary>A placeholder for a future method.</summary>
			<returns>Implementers should return <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL"></see>.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2.OnAfterAddDirectoriesEx(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSADDDIRECTORYFLAGS[])">
			<summary>Raised after directories have been added to a project.</summary>
			<returns><see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK"></see>.</returns>
			<param name="cDirectories">The number of directories to be added.</param>
			<param name="cProjects">The number of projects in the rgpProjects array.</param>
			<param name="rgpszMkDocuments">An array of paths of the directories that were added.</param>
			<param name="rgFlags">An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSADDDIRECTORYFLAGS"></see>. May be null.</param>
			<param name="rgpProjects">An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProject"></see> objects, corresponding to the projects in the solution.</param>
			<param name="rgFirstIndices">An array of indices of the directories that were affected.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2.OnAfterAddFilesEx(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSADDFILEFLAGS[])">
			<summary>Raised after files have been added to a project.</summary>
			<returns><see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK"></see>.</returns>
			<param name="cProjects">The number of projects in the rgpProjects array.</param>
			<param name="cFiles">The number of files to be added.</param>
			<param name="rgpszMkDocuments">An array of paths of the files that were affected.</param>
			<param name="rgFlags">An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSADDFILEFLAGS"></see>. May be null.</param>
			<param name="rgpProjects">An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProject"></see> objects.</param>
			<param name="rgFirstIndices">An array of indices of the files that were affected.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2.OnAfterRemoveDirectories(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSREMOVEDIRECTORYFLAGS[])">
			<summary>Raised after a directory was removed from the project.</summary>
			<returns><see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK"></see>.</returns>
			<param name="cDirectories">The number of directories affected.</param>
			<param name="cProjects">The number of projects in the rgpProjects array.</param>
			<param name="rgpszMkDocuments">An array of paths of the directories that were affected. </param>
			<param name="rgFlags">An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSREMOVEDIRECTORYFLAGS"></see>. May be null.</param>
			<param name="rgpProjects">An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProject"></see> objects, corresponding to the projects in the solution.</param>
			<param name="rgFirstIndices">An array of indices of the directories that were affected.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2.OnAfterRemoveFiles(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSREMOVEFILEFLAGS[])">
			<summary>Raised after files have been removed from the project.</summary>
			<returns><see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK"></see>.</returns>
			<param name="cProjects">The number of projects in the rgpProjects array.</param>
			<param name="cFiles">The number of files that were affected.</param>
			<param name="rgpszMkDocuments">An array of paths of the files that were affected.</param>
			<param name="rgFlags">An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSREMOVEFILEFLAGS"></see>. May be null.</param>
			<param name="rgpProjects">An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProject"></see> objects, corresponding to the projects in the solution.</param>
			<param name="rgFirstIndices">An array of indices of the files that were affected.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2.OnAfterRenameDirectories(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSRENAMEDIRECTORYFLAGS[])">
			<summary>Raised after a directory has been moved or renamed.</summary>
			<returns><see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK"></see>.</returns>
			<param name="rgszMkNewNames">An array of the new paths of the directories.</param>
			<param name="cProjects">The number of projects in the rgpProjects array. </param>
			<param name="cDirs">The number of directories affected.</param>
			<param name="rgFlags">An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSRENAMEDIRECTORYFLAGS"></see>. May be null.</param>
			<param name="rgszMkOldNames">An array of the old paths of the directories.</param>
			<param name="rgpProjects">An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProject"></see> objects, corresponding to the projects in the solution.</param>
			<param name="rgFirstIndices">An array of indices of the directories affected.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2.OnAfterRenameFiles(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSRENAMEFILEFLAGS[])">
			<summary>Raised after files have been moved or renamed.</summary>
			<returns><see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK"></see>.</returns>
			<param name="rgszMkNewNames">An array of the new paths of the files.</param>
			<param name="cProjects">The number of projects in the rgpProjects array. </param>
			<param name="cFiles">The number of files affected.</param>
			<param name="rgFlags">An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSRENAMEFILEFLAGS"></see>. May be null.</param>
			<param name="rgszMkOldNames">An array of the old paths of the files.</param>
			<param name="rgpProjects">An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProject"></see> objects, corresponding to the projects in the solution.</param>
			<param name="rgFirstIndices">An array of the indices of the files.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2.OnAfterSccStatusChanged(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],System.UInt32[])">
			<summary>This method is called by the source code control component to inform listeners that source control status has changed. Do not call this method. </summary>
			<returns><see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK"></see>.</returns>
			<param name="rgdwSccStatus">An array of SccStatus flags. May be null.</param>
			<param name="cProjects">The number of projects in the rgpProjects array.</param>
			<param name="cFiles">The number of files affected.</param>
			<param name="rgpszMkDocuments">An array of paths of the files. </param>
			<param name="rgpProjects">An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProject"></see> objects, corresponding to the projects in the solution.</param>
			<param name="rgFirstIndices">An array of the indices of the files.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2.OnQueryAddDirectories(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYRESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYRESULTS[])">
			<summary>Raised by a project to determine whether directories can be added to the project. Not used.</summary>
			<returns><see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK"></see>.</returns>
			<param name="cDirectories">The number of directories affected.</param>
			<param name="rgpszMkDocumen ts">An array of paths to the directories. </param>
			<param name="rgResults">An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYRESULTS"></see>.</param>
			<param name="rgFlags">An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYFLAGS"></see>.</param>
			<param name="pSummaryResult">An array of summary <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYRESULTS"></see> objects, which represent a summary of the yes/no values returned.</param>
			<param name="pProject">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProject"></see> affected.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2.OnQueryAddFiles(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILEFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILERESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILERESULTS[])">
			<summary>Raised to determine whether files can be added to the project. Not used.</summary>
			<returns><see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK"></see>.</returns>
			<param name="pSummaryResult">An array of summary <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILERESULTS"></see> objects, which represent a summary of the yes/no values returned.</param>
			<param name="cFiles">The number of files affected. </param>
			<param name="rgResults">An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILERESULTS"></see>.</param>
			<param name="rgFlags">An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILEFLAGS"></see>.</param>
			<param name="pProject">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProject"></see> affected.</param>
			<param name="rgpszMkDocuments">An array of paths of the files.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2.OnQueryRemoveDirectories(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYRESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYRESULTS[])">
			<summary>Raised to determine whether directories can be removed from the project. Not used.</summary>
			<returns><see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK"></see>.</returns>
			<param name="cDirectories">The number of directories affected.</param>
			<param name="rgResults">An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYRESULTS"></see>.</param>
			<param name="rgFlags">An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYFLAGS"></see>.</param>
			<param name="pSummaryResult">An array of summary <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYRESULTS"></see> objects, which represent a summary of the yes/no values returned.</param>
			<param name="pProject">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProject"></see> affected.</param>
			<param name="rgpszMkDocuments">An array of paths of the directories.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2.OnQueryRemoveFiles(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILEFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS[])">
			<summary>Raised to determine whether files can be removed from the project. Not used.</summary>
			<returns><see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK"></see>.</returns>
			<param name="pSummaryResult">An array of summary <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS"></see> objects, which represent a summary of the yes/no values returned.</param>
			<param name="cFiles">The number of files affected.</param>
			<param name="rgResults">An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS"></see>.</param>
			<param name="rgFlags">An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILEFLAGS"></see>.</param>
			<param name="pProject">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProject"></see> affected. </param>
			<param name="rgpszMkDocuments">An array of paths to the files.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2.OnQueryRenameDirectories(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYRESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYRESULTS[])">
			<summary>Raised to determine whether directories can be renamed in the project. Not used.</summary>
			<returns><see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK"></see>.</returns>
			<param name="rgszMkNewNames">An array of the new paths of the files.</param>
			<param name="pSummaryResult">An array of summary <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYRESULTS"></see> objects, which represent a summary of the yes/no values returned.</param>
			<param name="cDirs">The number of directories affected. </param>
			<param name="rgResults">An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILERESULTS"></see>.</param>
			<param name="rgFlags">An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYFLAGS"></see>.</param>
			<param name="rgszMkOldNames">An array of the old paths of the files.</param>
			<param name="pProject">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProject"></see> affected.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2.OnQueryRenameFiles(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILEFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILERESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILERESULTS[])">
			<summary>Raised to determine whether files can be renamed in the project. Not used.</summary>
			<returns><see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK"></see>.</returns>
			<param name="rgszMkNewNames">An array of the new paths of the files.</param>
			<param name="pSummaryResult">An array of summary <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILERESULTS"></see> objects, which represent a summary of the yes/no values returned.</param>
			<param name="cFiles">The number of files affected.</param>
			<param name="rgResults">An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILERESULTS"></see>.</param>
			<param name="rgFlags">An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILEFLAGS"></see>.</param>
			<param name="rgszMkOldNames">An array of the old paths of the files.</param>
			<param name="pProject">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProject"></see> affected.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.AdviseHierarchyEvents(Microsoft.VisualStudio.Shell.Interop.IVsHierarchyEvents,System.UInt32@)">
			<summary>Subscribes to hierarchy events.</summary>
			<returns>The cookie. </returns>
			<param name="pEventSink"><see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyEvents"></see>.</param>
			<param name="pdwCookie">A unique value, or cookie, that is needed to disable notification of hierarchy events.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.Close">
			<summary>Closes the project and cleans up its resources once the environment determines that it is no longer used.</summary>
			<returns><see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK"></see>.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.ExecCommand(System.UInt32,System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
			<summary>Executes a command on a specific item within a UI hierarchy window, or on the hierarchy itself. </summary>
			<returns>If the method succeeded, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>, otherwise an error code.</returns>
			<param name="pvaOut">A pointer to a VARIANTARG structure to receive command output. Can be null.</param>
			<param name="itemid">The identifier of the item affected by the command. For single selection, this value is the actual item ID. For multiple selections, set itemid equal to <see cref="F:Microsoft.VisualStudio.VSConstants."></see><see cref="VSITEMID_SELECTION"></see>.</param>
			<param name="pvaIn">A pointer to a VARIANTARG structure containing input arguments. Can be null.</param>
			<param name="nCmdID">The command to be executed. This command must belong to the group specified with pguidCmdGroup.</param>
			<param name="pguidCmdGroup">Unique identifier of the command group. All the commands in nCmdID must belong to the group specified by pguidCmdGroup.</param>
			<param name="nCmdexecopt">A member of the <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMDEXECOPT"></see> enumeration, describing the type of action to perform.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.GetCanonicalName(System.UInt32,System.String@)">
			<summary>Gets the unique name associated with an item in the hierarchy. Used for workspace persistence, such as remembering window positions.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants."></see><see cref="S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="itemid">The ID of the hierarchy item. </param>
			<param name="pbstrName">[out] The canonical name of the item.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.GetGuidProperty(System.UInt32,System.Int32,System.Guid@)">
			<summary>Gets properties whose values are GUIDs.</summary>
			<returns><see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK"></see>.</returns>
			<param name="itemid">The item ID of the hierarchy node for which to get the property.</param>
			<param name="pguid">[out] The GUID value.</param>
			<param name="propid">The ID of the property.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.GetNestedHierarchy(System.UInt32,System.Guid@,System.IntPtr@,System.UInt32@)">
			<summary>Determines whether or not a node is a nested hierarchy.</summary>
			<returns>If itemid is not a nested hierarchy node, this method returns <see cref="F:Microsoft.VisualStudio.VSConstants."></see><see cref="E_FAIL"></see>. If the requested interface is not supported on the hierarchy object, <see cref="F:Microsoft.VisualStudio.VSConstants."></see><see cref="E_NOINTERFACE"></see> is returned. The caller would then treat this node as if it had no children. </returns>
			<param name="itemid">The item ID of the node.</param>
			<param name="ppHierarchyNested">[out] Returns a pointer to the node, if it is a nested hierarchy node. </param>
			<param name="iidHierarchyNested">The interface ID of the node.</param>
			<param name="pitemidNested">[out] Returns the item ID of the nested hierarchy node; this will always be <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT"></see>.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.GetProperty(System.UInt32,System.Int32,System.Object@)">
			<summary>Gets the value of a property for a given node.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="itemid">The item ID of the node.</param>
			<param name="propid">The ID of the requested property.</param>
			<param name="pvar">[out] The value of the property.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.GetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider@)">
			<summary>Gets the service provider from which to access the services.</summary>
			<returns><see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK"></see>.</returns>
			<param name="ppSP">[out] <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider"></see>.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.ParseCanonicalName(System.String,System.UInt32@)">
			<summary>Returns the identifier of the hierarchy item, given its canonical name. </summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="pitemid">[out] The ID of the item.</param>
			<param name="pszName">The canonical name of the item.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.QueryClose(System.Int32@)">
			<summary>Determines whether the hierarchy can be closed. </summary>
			<returns>true if the hierarchy can be closed, otherwise false.</returns>
			<param name="pfCanClose">[out] Returns true if the hierarchy can be closed, otherwise false.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.QueryStatusCommand(System.UInt32,System.Guid@,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr)">
			<summary>Gets the status of the specified commands.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="itemid">The ID of the item being queried.</param>
			<param name="pCmdText">A pointer to an <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMDTEXT"></see> structure containing name and/or status information on the command.</param>
			<param name="prgCmds">An array of command <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMD"></see> structures with information on the commands.</param>
			<param name="cCmds">The number of commands in the prgCmds array.</param>
			<param name="pguidCmdGroup">The GUID of the command group to which the commands belong.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.SetGuidProperty(System.UInt32,System.Int32,System.Guid@)">
			<summary>Sets properties whose values are GUIDs. </summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="itemid">The ID of the item.</param>
			<param name="propid">The ID of the property to set.</param>
			<param name="rguid">The GUID value of the property.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.SetProperty(System.UInt32,System.Int32,System.Object)">
			<summary>Sets properties of a specific node or of the hierarchy. </summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="itemid">The ID of the item.</param>
			<param name="propid">The ID of the property to set.</param>
			<param name="var">The value of the property.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.SetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
			<summary>Sets the service provider from which to access the services. </summary>
			<returns><see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK"></see>.</returns>
			<param name="psp"><see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider"></see>.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.UnadviseHierarchyEvents(System.UInt32)">
			<summary>Disables client notification of hierarchy events.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="dwCookie">The unique identifier that was handed back with <see cref="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.AdviseHierarchyEvents(Microsoft.VisualStudio.Shell.Interop.IVsHierarchyEvents)"></see>.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.Unused0">
			<summary>A placeholder for a future method.</summary>
			<returns>Implementers should return <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL"></see>.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.Unused1">
			<summary>A placeholder for a future method.</summary>
			<returns>Implementers should return <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL"></see>.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.Unused2">
			<summary>A placeholder for a future method.</summary>
			<returns>Implementers should return <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL"></see>.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.Unused3">
			<summary>A placeholder for a future method.</summary>
			<returns>Implementers should return <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL"></see>.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.Unused4">
			<summary>A placeholder for a future method.</summary>
			<returns>Implementers should return <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL"></see>.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.OnAggregationComplete">
			<summary>Subscribes to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2"></see> events. It is not required to flavor a project but makes it easier for derived classes to subscribe to these events.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.ParseCanonicalName(System.String,System.UInt32@)">
			<summary>Returns the identifier of the hierarchy item, given its canonical name. </summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="itemId">[out] The ID of the item.</param>
			<param name="name">The canonical name of the item.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.QueryClose">
			<summary>Determines whether the hierarchy can be closed. </summary>
			<returns>true if the hierarchy can be closed, otherwise false.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.QueryStatusCommand(System.UInt32,System.Guid@,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr)">
			<summary>Gets the status of the specified commands.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="itemid">The ID of the item being queried.</param>
			<param name="pCmdText">A pointer to an <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMDTEXT"></see> structure containing name and/or status information on the command.</param>
			<param name="prgCmds">An array of command <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMD"></see> structures with information on the commands.</param>
			<param name="cCmds">The number of commands in the prgCmds array.</param>
			<param name="pguidCmdGroup">The GUID of the command group to which the commands belong.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.SetGuidProperty(System.UInt32,System.Int32,System.Guid@)">
			<summary>Sets properties whose values are GUIDs. </summary>
			<param name="itemId">The ID of the item.</param>
			<param name="propId">The ID of the property to set.</param>
			<param name="guid">The GUID value of the property.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.SetInnerProject(System.Object)">
			<summary>Sets up the interfaces and menu commands for the inner project. </summary>
			<param name="inner">The inner project subtype.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.SetProperty(System.UInt32,System.Int32,System.Object)">
			<summary>Sets properties of a specific node or of the hierarchy. </summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see> . If it fails, it returns an error code.</returns>
			<param name="itemId">The ID of the item.</param>
			<param name="propId">The ID of the property to set.</param>
			<param name="property">The value of the property.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.System.IServiceProvider.GetService(System.Type)">
			<summary>Gets the service of the specified type.</summary>
			<returns>A service of the type specified. </returns>
			<param name="serviceType">The type of the service.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.UnadviseHierarchyEvents(System.UInt32)">
			<summary>Disables client notification of hierarchy events.</summary>
			<param name="cookie">The unique identifier that was handed back with <see cref="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.AdviseHierarchyEvents(Microsoft.VisualStudio.Shell.Interop.IVsHierarchyEvents)"></see>.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Unused0">
			<summary>A placeholder for a future method.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Unused1">
			<summary>A placeholder for a future method.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Unused2">
			<summary>A placeholder for a future method.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Unused3">
			<summary>A placeholder for a future method.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Unused4">
			<summary>A placeholder for a future method.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.EventHandler`1">
			<summary>Represents the method that handles events relating to files and folders of the flavored project.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactory">
			<summary>A factory for creating flavored projects, otherwise known as project subtypes.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactory.#ctor">
			<summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactory"></see>.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactory.CanCreateProject(System.String,System.UInt32)">
			<summary>Determines whether or not the project can be created with the supplied parameters.</summary>
			<returns>true if the project file name is valid, otherwise false.</returns>
			<param name="fileName">The name of the file.</param>
			<param name="flags">Not used.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactory.CreateProject(System.String,System.String,System.String,System.UInt32,System.Guid@,System.IntPtr@,System.Int32@)">
			<summary>Creates a project.</summary>
			<param name="fileName">The name of the project file.</param>
			<param name="canceled">[out] Returns true if the operation was canceled, otherwise false.</param>
			<param name="name">The name of the project.</param>
			<param name="flags">Values from <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS"></see>.</param>
			<param name="project">[out] Returns a pointer to the project.</param>
			<param name="location">The path of the project file. </param>
			<param name="projectGuid">The interface ID of the project.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactory.Dispose(System.Boolean)">
			<summary>Disposes the service provider.</summary>
			<param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactory.Initialize">
			<summary>Initializes the project factory.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactory.Microsoft.VisualStudio.Shell.Interop.IVsAggregatableProjectFactory.GetAggregateProjectType(System.String,System.String@)">
			<summary>Gets a semicolon-delimited string of project type GUIDs.</summary>
			<returns><see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK"></see>.</returns>
			<param name="fileName">The name of the project file.</param>
			<param name="projectTypeGuid">[out] Returns the semicolon-delimited string of project type GUIDs.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactory.Microsoft.VisualStudio.Shell.Interop.IVsAggregatableProjectFactory.PreCreateForOuter(System.Object,System.Object@)">
			<summary>Creates an aggregatable inner project.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="outerProject">The outer project, or null if the outer project is to be created.</param>
			<param name="project">[out] Returns the inner project.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactory.Microsoft.VisualStudio.Shell.Interop.IVsProjectFactory.CanCreateProject(System.String,System.UInt32,System.Int32@)">
			<summary>Determines whether or not the project can be created.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="fileName">The name of the file.</param>
			<param name="canCreate">[out] Returns true if the project can be created, otherwise false.</param>
			<param name="flags">If used, values from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS"></see> enumeration.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactory.Microsoft.VisualStudio.Shell.Interop.IVsProjectFactory.Close">
			<summary>Disposes this object.</summary>
			<returns><see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK"></see>.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactory.Microsoft.VisualStudio.Shell.Interop.IVsProjectFactory.CreateProject(System.String,System.String,System.String,System.UInt32,System.Guid@,System.IntPtr@,System.Int32@)">
			<summary>Creates a flavored project.</summary>
			<returns><see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK"></see>.</returns>
			<param name="fileName">The name of the project file.</param>
			<param name="canceled">[out] Returns true if the operation was canceled, otherwise false.</param>
			<param name="name">The name of the project.</param>
			<param name="flags">Values from <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS"></see>.</param>
			<param name="project">[out] Returns a pointer to the project.</param>
			<param name="location">The path of the project file. </param>
			<param name="projectGuid">The interface ID of the project.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactory.Microsoft.VisualStudio.Shell.Interop.IVsProjectFactory.SetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
			<summary>Initializes the project and allows the project to obtain services proffered by the environment. </summary>
			<returns><see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK"></see>.</returns>
			<param name="provider"><see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider"></see>.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactory.PreCreateForOuter(System.Object)">
			<summary>Creates an instance of the project. </summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="outerProject">The outermost project, or null if the outer project is being created.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactory.ProjectTypeGuids(System.String)">
			<summary>Gets the set of project type GUIDs from the project file.</summary>
			<returns>When implemented by a derived class, a semicolon-delimited string containing the project type GUIDs in the project file.</returns>
			<param name="file">The project file.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactory.serviceProvider">
			<summary>Gets the project's service provider.</summary>
			<returns><see cref="T:Microsoft.VisualStudio.Shell.ServiceProvider"></see>.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.Flavor.ProjectDocumentsChangeEventArgs">
			<summary>Contains event data for events relating to files and folders of the project subtype, for example the <see cref="E:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.FileAdded"></see> event.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.ProjectDocumentsChangeEventArgs.#ctor">
			<summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Flavor.ProjectDocumentsChangeEventArgs"></see>.</summary>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.Flavor.ProjectDocumentsChangeEventArgs.MkDocument">
			<summary>Gets or sets the unique name of the project item that was changed.</summary>
			<returns>The unique name of the project item that was changed.</returns>
		</member>
	</members>
</doc>